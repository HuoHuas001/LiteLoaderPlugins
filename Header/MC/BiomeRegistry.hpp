// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "Json.hpp"
#define EXTRA_INCLUDE_PART_BIOMEREGISTRY
#include "Extra/BiomeRegistryAPI.hpp"
#undef EXTRA_INCLUDE_PART_BIOMEREGISTRY
class BiomeRegistry {
#include "Extra/BiomeRegistryAPI.hpp"
public:
    /*0*/ virtual ~BiomeRegistry();
    /*1*/ virtual class OwnerPtrT<struct EntityRegistryRefTraits>& getEntityRegistry();

public:
    MCAPI void forEachBiome(class std::function<void(class Biome&)>) const;
    MCAPI class TagRegistry<struct IDType<struct BiomeTagIDType>, struct IDType<struct BiomeTagSetIDType>> const& getTagRegistry() const;
    MCAPI class TagRegistry<struct IDType<struct BiomeTagIDType>, struct IDType<struct BiomeTagSetIDType>>& getTagRegistry();
    MCAPI void initServerFromPacks(class ResourcePackManager&, class IWorldRegistriesProvider&);
    MCAPI bool isRegistrationFinished() const;
    MCAPI class Biome* lookupById(int) const;
    MCAPI class Biome* lookupByName(std::string const&) const;
    MCAPI class Biome& registerBiome(std::string const&);
    MCAPI void registrationFinished();

private:
    MCAPI bool _addToInheritanceTree(class InheritanceTree<struct BiomeRegistry::BiomeParent>&, std::string const&, class Json::Value&&, class SemVersion const&);
    MCAPI class InheritanceTree<struct BiomeRegistry::BiomeParent> _buildInheritanceTree(class ResourcePackManager&);
    MCAPI void _initTagRegistry();
    MCAPI bool _loadSingleBiome(class ResourcePackManager&, class InheritanceTree<struct BiomeRegistry::BiomeParent>&, std::string const&);
    MCAPI void _mergeDataInheritance(class Json::Value&, class SemVersion&, class InheritanceTree<struct BiomeRegistry::BiomeParent>&, struct BiomeRegistry::BiomeParent const&);
};