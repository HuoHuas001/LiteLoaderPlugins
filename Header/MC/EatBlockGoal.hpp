// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_EATBLOCKGOAL
#include "Extra/EatBlockGoalAPI.hpp"
#undef EXTRA_INCLUDE_PART_EATBLOCKGOAL
class EatBlockGoal {
#include "Extra/EatBlockGoalAPI.hpp"
public:
    /*0*/ virtual ~EatBlockGoal();
    /*1*/ virtual bool canUse();
    /*2*/ virtual bool canContinueToUse();
    /*3*/ virtual void __unk_vfn_0();
    /*4*/ virtual void start();
    /*5*/ virtual void __unk_vfn_1();
    /*6*/ virtual void tick();
    /*7*/ virtual void appendDebugInfo(std::string&) const;
    /*
    inline void stop(){
        void (EatBlockGoal::*rv)();
        *((void**)&rv) = dlsym("?stop@EatBlockGoal@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void appendDebugInfo(std::string& a0) const{
        void (EatBlockGoal::*rv)(std::string&) const;
        *((void**)&rv) = dlsym("?appendDebugInfo@EatBlockGoal@@UEBAXAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z");
        return (this->*rv)(std::forward<std::string&>(a0));
    }
    inline bool canContinueToUse(){
        bool (EatBlockGoal::*rv)();
        *((void**)&rv) = dlsym("?canContinueToUse@EatBlockGoal@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline bool canUse(){
        bool (EatBlockGoal::*rv)();
        *((void**)&rv) = dlsym("?canUse@EatBlockGoal@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline void start(){
        void (EatBlockGoal::*rv)();
        *((void**)&rv) = dlsym("?start@EatBlockGoal@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void tick(){
        void (EatBlockGoal::*rv)();
        *((void**)&rv) = dlsym("?tick@EatBlockGoal@@UEAAXXZ");
        return (this->*rv)();
    }
    */
    MCAPI float getEatSuccessChance(class Actor&) const;

protected:

private:
};