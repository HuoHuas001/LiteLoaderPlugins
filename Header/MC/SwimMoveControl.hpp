// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "MoveControl.hpp"
#define EXTRA_INCLUDE_PART_SWIMMOVECONTROL
#include "Extra/SwimMoveControlAPI.hpp"
#undef EXTRA_INCLUDE_PART_SWIMMOVECONTROL
class SwimMoveControl : public MoveControl {
#include "Extra/SwimMoveControlAPI.hpp"
public:
    /*0*/ virtual ~SwimMoveControl();
    /*1*/ virtual void initializeInternal(class Mob&, struct MoveControlDescription*);
    /*2*/ virtual void tick(class MoveControlComponent&, class Mob&);
    /*
    inline void initializeInternal(class Mob& a0, struct MoveControlDescription* a1){
        void (SwimMoveControl::*rv)(class Mob&, struct MoveControlDescription*);
        *((void**)&rv) = dlsym("?initializeInternal@SwimMoveControl@@UEAAXAEAVMob@@PEAUMoveControlDescription@@@Z");
        return (this->*rv)(std::forward<class Mob&>(a0), std::forward<struct MoveControlDescription*>(a1));
    }
    inline void tick(class MoveControlComponent& a0, class Mob& a1){
        void (SwimMoveControl::*rv)(class MoveControlComponent&, class Mob&);
        *((void**)&rv) = dlsym("?tick@SwimMoveControl@@MEAAXAEAVMoveControlComponent@@AEAVMob@@@Z");
        return (this->*rv)(std::forward<class MoveControlComponent&>(a0), std::forward<class Mob&>(a1));
    }
    */

protected:

private:
};