// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_NETWORKPEER
#include "Extra/NetworkPeerAPI.hpp"
#undef EXTRA_INCLUDE_PART_NETWORKPEER
class NetworkPeer {
#include "Extra/NetworkPeerAPI.hpp"
public:
    /*0*/ virtual ~NetworkPeer();
    /*1*/ virtual void sendPacket(std::string const&, int /*enum enum NetworkPeer::Reliability*/, int, unsigned short, int /*enum enum Compressibility*/) = 0;
    /*2*/ virtual int /*enum enum NetworkPeer::DataStatus*/ receivePacket(std::string&, class std::shared_ptr<class std::chrono::time_point<struct std::chrono::steady_clock, class std::chrono::duration<__int64, struct std::ratio<1, 1000000000> > > > const&) = 0;
    /*3*/ virtual struct NetworkPeer::NetworkStatus getNetworkStatus() const = 0;
    /*4*/ virtual void update();
    /*5*/ virtual void flush(class std::function<void (void)>&&);
    /*
    inline void flush(class std::function<void (void)>&& a0){
        void (NetworkPeer::*rv)(class std::function<void (void)>&&);
        *((void**)&rv) = dlsym("?flush@NetworkPeer@@UEAAX$$QEAV?$function@$$A6AXXZ@std@@@Z");
        return (this->*rv)(std::forward<class std::function<void (void)>&&>(a0));
    }
    inline void update(){
        void (NetworkPeer::*rv)();
        *((void**)&rv) = dlsym("?update@NetworkPeer@@UEAAXXZ");
        return (this->*rv)();
    }
    */

protected:

private:
};