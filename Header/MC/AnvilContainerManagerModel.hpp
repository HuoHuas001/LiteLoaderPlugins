// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "ContainerManagerModel.hpp"
#define EXTRA_INCLUDE_PART_ANVILCONTAINERMANAGERMODEL
#include "Extra/AnvilContainerManagerModelAPI.hpp"
#undef EXTRA_INCLUDE_PART_ANVILCONTAINERMANAGERMODEL
class AnvilContainerManagerModel : public ContainerManagerModel {
#include "Extra/AnvilContainerManagerModelAPI.hpp"
public:
    /*0*/ virtual ~AnvilContainerManagerModel();
    /*1*/ virtual void __unk_vfn_0();
    /*2*/ virtual void __unk_vfn_1();
    /*3*/ virtual void __unk_vfn_2();
    /*4*/ virtual void __unk_vfn_3();
    /*5*/ virtual std::vector<class ItemStack> getItemCopies() const;
    /*6*/ virtual void setSlot(int, class ItemStack const&, bool);
    /*7*/ virtual class ItemStack const& getSlot(int) const;
    /*8*/ virtual void setData(int, int);
    /*9*/ virtual void broadcastChanges();
    /*10*/ virtual bool isValid(float);
    /*11*/ virtual class ContainerScreenContext _postInit();
    /*
    inline void broadcastChanges(){
        void (AnvilContainerManagerModel::*rv)();
        *((void**)&rv) = dlsym("?broadcastChanges@AnvilContainerManagerModel@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void setData(int a0, int a1){
        void (AnvilContainerManagerModel::*rv)(int, int);
        *((void**)&rv) = dlsym("?setData@AnvilContainerManagerModel@@UEAAXHH@Z");
        return (this->*rv)(std::forward<int>(a0), std::forward<int>(a1));
    }
    inline class ContainerScreenContext _postInit(){
        class ContainerScreenContext (AnvilContainerManagerModel::*rv)();
        *((void**)&rv) = dlsym("?_postInit@AnvilContainerManagerModel@@MEAA?AVContainerScreenContext@@XZ");
        return (this->*rv)();
    }
    inline std::vector<class ItemStack> getItemCopies() const{
        std::vector<class ItemStack> (AnvilContainerManagerModel::*rv)() const;
        *((void**)&rv) = dlsym("?getItemCopies@AnvilContainerManagerModel@@UEBA?AV?$vector@VItemStack@@V?$allocator@VItemStack@@@std@@@std@@XZ");
        return (this->*rv)();
    }
    inline class ItemStack const& getSlot(int a0) const{
        class ItemStack const& (AnvilContainerManagerModel::*rv)(int) const;
        *((void**)&rv) = dlsym("?getSlot@AnvilContainerManagerModel@@UEBAAEBVItemStack@@H@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline bool isValid(float a0){
        bool (AnvilContainerManagerModel::*rv)(float);
        *((void**)&rv) = dlsym("?isValid@AnvilContainerManagerModel@@UEAA_NM@Z");
        return (this->*rv)(std::forward<float>(a0));
    }
    inline void setSlot(int a0, class ItemStack const& a1, bool a2){
        void (AnvilContainerManagerModel::*rv)(int, class ItemStack const&, bool);
        *((void**)&rv) = dlsym("?setSlot@AnvilContainerManagerModel@@UEAAXHAEBVItemStack@@_N@Z");
        return (this->*rv)(std::forward<int>(a0), std::forward<class ItemStack const&>(a1), std::forward<bool>(a2));
    }
    */
    MCAPI static int const INPUT_SLOT;
    MCAPI static int const MATERIAL_SLOT;
    MCAPI static int const RESULT_SLOT;

protected:

private:
};