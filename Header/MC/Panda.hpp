// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "Animal.hpp"
#include "Actor.hpp"
#define EXTRA_INCLUDE_PART_PANDA
#include "Extra/PandaAPI.hpp"
#undef EXTRA_INCLUDE_PART_PANDA
class Panda : public Animal {
#include "Extra/PandaAPI.hpp"
public:
    /*0*/ virtual ~Panda();
    /*1*/ virtual bool isRuntimePredictedMovementEnabled() const;
    /*2*/ virtual void __unk_vfn_0();
    /*3*/ virtual class Vec3 getInterpolatedRidingOffset(float) const;
    /*4*/ virtual void __unk_vfn_1();
    /*5*/ virtual void normalTick();
    /*6*/ virtual float getRidingHeight();
    /*7*/ virtual void __unk_vfn_2();
    /*8*/ virtual void __unk_vfn_3();
    /*9*/ virtual float getCameraOffset() const;
    /*10*/ virtual void __unk_vfn_4();
    /*11*/ virtual void __unk_vfn_5();
    /*12*/ virtual void playerTouch(class Player&);
    /*13*/ virtual void __unk_vfn_6();
    /*14*/ virtual void __unk_vfn_7();
    /*15*/ virtual bool isDamageBlocked(class ActorDamageSource const&) const;
    /*16*/ virtual void __unk_vfn_8();
    /*17*/ virtual void __unk_vfn_9();
    /*18*/ virtual void __unk_vfn_10();
    /*19*/ virtual void __unk_vfn_11();
    /*20*/ virtual class Actor* findAttackTarget();
    /*21*/ virtual bool isValidTarget(class Actor*) const;
    /*22*/ virtual void adjustDamageAmount(int&) const;
    /*23*/ virtual void onTame();
    /*24*/ virtual void onFailedTame();
    /*25*/ virtual void vehicleLanded(class Vec3 const&, class Vec3 const&);
    /*26*/ virtual int /*enum enum LevelSoundEvent*/ getAmbientSound() const;
    /*27*/ virtual void onBounceStarted(class BlockPos const&, class Block const&);
    /*28*/ virtual void __unk_vfn_12();
    /*29*/ virtual void awardKillScore(class Actor&, int);
    /*30*/ virtual class HashedString const& queryEntityRenderer() const;
    /*31*/ virtual struct ActorUniqueID getSourceUniqueID() const;
    /*32*/ virtual int getPortalWaitTime() const;
    /*33*/ virtual bool canChangeDimensions() const;
    /*34*/ virtual void __unk_vfn_13();
    /*35*/ virtual struct ActorUniqueID getControllingPlayer() const;
    /*36*/ virtual bool canPickupItem(class ItemStack const&) const;
    /*37*/ virtual bool canBePulledIntoVehicle() const;
    /*38*/ virtual void __unk_vfn_14();
    /*39*/ virtual bool canSynchronizeNewEntity() const;
    /*40*/ virtual void __unk_vfn_15();
    /*41*/ virtual void __unk_vfn_16();
    /*42*/ virtual bool isWorldBuilder() const;
    /*43*/ virtual void __unk_vfn_17();
    /*44*/ virtual bool isAdventure() const;
    /*45*/ virtual bool canDestroyBlock(class Block const&) const;
    /*46*/ virtual void setAuxValue(int);
    /*47*/ virtual void stopSpinAttack();
    /*48*/ virtual void __unk_vfn_18();
    /*49*/ virtual void __unk_vfn_19();
    /*50*/ virtual void __unk_vfn_20();
    /*51*/ virtual void readAdditionalSaveData(class CompoundTag const&, class DataLoadHelper&);
    /*52*/ virtual void __unk_vfn_21();
    /*53*/ virtual void _onSizeUpdated();
    /*54*/ virtual void __unk_vfn_22();
    /*55*/ virtual void spawnAnim();
    /*56*/ virtual int getItemUseDuration() const;
    /*57*/ virtual float getItemUseStartupProgress() const;
    /*58*/ virtual float getItemUseIntervalProgress() const;
    /*59*/ virtual void __unk_vfn_23();
    /*60*/ virtual bool isAlliedTo(class Mob*);
    /*61*/ virtual void __unk_vfn_24();
    /*62*/ virtual void sendArmorDamage(class std::bitset<4> const&);
    /*63*/ virtual void onBorn(class Actor&, class Actor&);
    /*64*/ virtual void setTransitioningSitting(bool);
    /*65*/ virtual void __unk_vfn_25();
    /*66*/ virtual void __unk_vfn_26();
    /*67*/ virtual void _serverAiMobStep();
    /*68*/ virtual void __unk_vfn_27();
    /*
    inline void _onSizeUpdated(){
        void (Panda::*rv)();
        *((void**)&rv) = dlsym("?_onSizeUpdated@Panda@@UEAAXXZ");
        return (this->*rv)();
    }
    inline int \/*enum enum LevelSoundEvent*\/ getAmbientSound() const{
        int \/*enum enum LevelSoundEvent*\/ (Panda::*rv)() const;
        *((void**)&rv) = dlsym("?getAmbientSound@Panda@@UEBA?AW4LevelSoundEvent@@XZ");
        return (this->*rv)();
    }
    inline void normalTick(){
        void (Panda::*rv)();
        *((void**)&rv) = dlsym("?normalTick@Panda@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void readAdditionalSaveData(class CompoundTag const& a0, class DataLoadHelper& a1){
        void (Panda::*rv)(class CompoundTag const&, class DataLoadHelper&);
        *((void**)&rv) = dlsym("?readAdditionalSaveData@Panda@@UEAAXAEBVCompoundTag@@AEAVDataLoadHelper@@@Z");
        return (this->*rv)(std::forward<class CompoundTag const&>(a0), std::forward<class DataLoadHelper&>(a1));
    }
    inline void setTransitioningSitting(bool a0){
        void (Panda::*rv)(bool);
        *((void**)&rv) = dlsym("?setTransitioningSitting@Panda@@UEAAX_N@Z");
        return (this->*rv)(std::forward<bool>(a0));
    }
    */
    MCAPI float getLieOnBackAmount(float) const;
    MCAPI float getSitAmount(float) const;
    MCAPI int getSneezeCounter() const;
    MCAPI int getUnhappyCounter() const;

protected:

private:
};