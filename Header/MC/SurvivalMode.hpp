// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "GameMode.hpp"
#define EXTRA_INCLUDE_PART_SURVIVALMODE
#include "Extra/SurvivalModeAPI.hpp"
#undef EXTRA_INCLUDE_PART_SURVIVALMODE
class SurvivalMode : public GameMode {
#include "Extra/SurvivalModeAPI.hpp"
public:
    /*0*/ virtual ~SurvivalMode();
    /*1*/ virtual bool startDestroyBlock(class BlockPos const&, unsigned char, bool&);
    /*2*/ virtual bool destroyBlock(class BlockPos const&, unsigned char);
    /*3*/ virtual void startBuildBlock(class BlockPos const&, unsigned char);
    /*4*/ virtual bool buildBlock(class BlockPos const&, unsigned char, bool);
    /*5*/ virtual void tick();
    /*6*/ virtual bool useItem(class ItemStack&);
    /*7*/ virtual bool useItemOn(class ItemStack&, class BlockPos const&, unsigned char, class Vec3 const&, class Block const*);
    /*8*/ virtual bool interact(class Actor&, class Vec3 const&);
    /*9*/ virtual bool attack(class Actor&);
    /*10*/ virtual void __unk_vfn_0();
    /*11*/ virtual bool isInTrialMode();
    /*12*/ virtual void registerUpsellScreenCallback(class std::function<void (bool)>);
    /*
    inline bool attack(class Actor& a0){
        bool (SurvivalMode::*rv)(class Actor&);
        *((void**)&rv) = dlsym("?attack@SurvivalMode@@UEAA_NAEAVActor@@@Z");
        return (this->*rv)(std::forward<class Actor&>(a0));
    }
    inline bool buildBlock(class BlockPos const& a0, unsigned char a1, bool a2){
        bool (SurvivalMode::*rv)(class BlockPos const&, unsigned char, bool);
        *((void**)&rv) = dlsym("?buildBlock@SurvivalMode@@UEAA_NAEBVBlockPos@@E_N@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0), std::forward<unsigned char>(a1), std::forward<bool>(a2));
    }
    inline bool destroyBlock(class BlockPos const& a0, unsigned char a1){
        bool (SurvivalMode::*rv)(class BlockPos const&, unsigned char);
        *((void**)&rv) = dlsym("?destroyBlock@SurvivalMode@@UEAA_NAEBVBlockPos@@E@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0), std::forward<unsigned char>(a1));
    }
    inline bool interact(class Actor& a0, class Vec3 const& a1){
        bool (SurvivalMode::*rv)(class Actor&, class Vec3 const&);
        *((void**)&rv) = dlsym("?interact@SurvivalMode@@UEAA_NAEAVActor@@AEBVVec3@@@Z");
        return (this->*rv)(std::forward<class Actor&>(a0), std::forward<class Vec3 const&>(a1));
    }
    inline bool isInTrialMode(){
        bool (SurvivalMode::*rv)();
        *((void**)&rv) = dlsym("?isInTrialMode@SurvivalMode@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline void registerUpsellScreenCallback(class std::function<void (bool)> a0){
        void (SurvivalMode::*rv)(class std::function<void (bool)>);
        *((void**)&rv) = dlsym("?registerUpsellScreenCallback@SurvivalMode@@UEAAXV?$function@$$A6AX_N@Z@std@@@Z");
        return (this->*rv)(std::forward<class std::function<void (bool)>>(a0));
    }
    inline void setTrialMode(bool a0){
        void (SurvivalMode::*rv)(bool);
        *((void**)&rv) = dlsym("?setTrialMode@SurvivalMode@@UEAAX_N@Z");
        return (this->*rv)(std::forward<bool>(a0));
    }
    inline void startBuildBlock(class BlockPos const& a0, unsigned char a1){
        void (SurvivalMode::*rv)(class BlockPos const&, unsigned char);
        *((void**)&rv) = dlsym("?startBuildBlock@SurvivalMode@@UEAAXAEBVBlockPos@@E@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0), std::forward<unsigned char>(a1));
    }
    inline bool startDestroyBlock(class BlockPos const& a0, unsigned char a1, bool& a2){
        bool (SurvivalMode::*rv)(class BlockPos const&, unsigned char, bool&);
        *((void**)&rv) = dlsym("?startDestroyBlock@SurvivalMode@@UEAA_NAEBVBlockPos@@EAEA_N@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0), std::forward<unsigned char>(a1), std::forward<bool&>(a2));
    }
    inline void tick(){
        void (SurvivalMode::*rv)();
        *((void**)&rv) = dlsym("?tick@SurvivalMode@@UEAAXXZ");
        return (this->*rv)();
    }
    inline bool useItem(class ItemStack& a0){
        bool (SurvivalMode::*rv)(class ItemStack&);
        *((void**)&rv) = dlsym("?useItem@SurvivalMode@@UEAA_NAEAVItemStack@@@Z");
        return (this->*rv)(std::forward<class ItemStack&>(a0));
    }
    inline bool useItemOn(class ItemStack& a0, class BlockPos const& a1, unsigned char a2, class Vec3 const& a3, class Block const* a4){
        bool (SurvivalMode::*rv)(class ItemStack&, class BlockPos const&, unsigned char, class Vec3 const&, class Block const*);
        *((void**)&rv) = dlsym("?useItemOn@SurvivalMode@@UEAA_NAEAVItemStack@@AEBVBlockPos@@EAEBVVec3@@PEBVBlock@@@Z");
        return (this->*rv)(std::forward<class ItemStack&>(a0), std::forward<class BlockPos const&>(a1), std::forward<unsigned char>(a2), std::forward<class Vec3 const&>(a3), std::forward<class Block const*>(a4));
    }
    */

protected:

private:
    MCAPI void _messagePlayers(std::string);
    MCAPI void _showTrialReminder(bool);
    MCAPI static bool mTrialHasEnded;
};