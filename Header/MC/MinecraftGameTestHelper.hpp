// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_MINECRAFTGAMETESTHELPER
#include "Extra/MinecraftGameTestHelperAPI.hpp"
#undef EXTRA_INCLUDE_PART_MINECRAFTGAMETESTHELPER
class MinecraftGameTestHelper {
#include "Extra/MinecraftGameTestHelperAPI.hpp"
public:
    /*0*/ virtual ~MinecraftGameTestHelper();
    /*1*/ virtual void succeedWhenEntityPresent(struct ActorDefinitionIdentifier const&, int, int, int, bool);
    /*2*/ virtual void succeedWhenEntityPresent(struct ActorDefinitionIdentifier const&, class BlockPos const&, bool);
    /*3*/ virtual void succeedWhenEntityData(class BlockPos const&, struct ActorDefinitionIdentifier const&, class std::function<bool (class Actor&)>);
    /*4*/ virtual void succeedWhenEntityHasComponent(struct ActorDefinitionIdentifier const&, std::string const&, class BlockPos const&, bool);
    /*5*/ virtual void succeedWhenBlockPresent(class Block const&, int, int, int, bool);
    /*6*/ virtual void succeedWhenBlockPresent(class Block const&, class BlockPos const&, bool);
    /*7*/ virtual void succeedWhenBlockPresent(class BlockLegacy const&, class BlockPos const&, bool);
    /*8*/ virtual void setNight();
    /*9*/ virtual void setDayTime(int);
    /*10*/ virtual class std::optional<struct gametest::GameTestError> setBlock(int, int, int, class Block const&, int);
    /*11*/ virtual class std::optional<struct gametest::GameTestError> setBlock(class BlockPos const&, class Block const&, int);
    /*12*/ virtual class std::optional<struct gametest::GameTestError> pressButton(int, int, int);
    /*13*/ virtual class std::optional<struct gametest::GameTestError> pressButton(class BlockPos const&);
    /*14*/ virtual class std::optional<struct gametest::GameTestError> pullLever(int, int, int);
    /*15*/ virtual class std::optional<struct gametest::GameTestError> pullLever(class BlockPos const&);
    /*16*/ virtual class std::optional<struct gametest::GameTestError> killAllEntities();
    /*17*/ virtual class std::variant<struct gametest::GameTestError, class Actor*> spawn(struct ActorDefinitionIdentifier const&, int, int, int);
    /*18*/ virtual class std::variant<struct gametest::GameTestError, class Actor*> spawn(struct ActorDefinitionIdentifier const&, class BlockPos const&);
    /*19*/ virtual class std::variant<struct gametest::GameTestError, class Actor*> spawn(struct ActorDefinitionIdentifier const&, class Vec3 const&);
    /*20*/ virtual class std::variant<struct gametest::GameTestError, class Actor*> spawnItem(class ItemStack const&, class Vec3 const&);
    /*21*/ virtual class std::variant<struct gametest::GameTestError, class Actor*> spawnWithoutBehaviors(struct ActorDefinitionIdentifier const&, class BlockPos const&);
    /*22*/ virtual class std::variant<struct gametest::GameTestError, class Actor*> spawnWithoutBehaviors(struct ActorDefinitionIdentifier const&, class Vec3 const&);
    /*23*/ virtual class std::optional<struct gametest::GameTestError> walkTo(class Mob&, class BlockPos const&, float);
    /*24*/ virtual class std::optional<struct gametest::GameTestError> walkTo(class Mob&, class Vec3 const&, float);
    /*25*/ virtual class std::optional<struct gametest::GameTestError> setTntFuse(class Actor&, int);
    /*26*/ virtual class std::optional<struct gametest::GameTestError> assertEntityPresent(struct ActorDefinitionIdentifier const&, bool);
    /*27*/ virtual class std::optional<struct gametest::GameTestError> assertEntityPresent(struct ActorDefinitionIdentifier const&, int, int, int, bool);
    /*28*/ virtual class std::optional<struct gametest::GameTestError> assertEntityPresent(struct ActorDefinitionIdentifier const&, class BlockPos const&, bool);
    /*29*/ virtual class std::optional<struct gametest::GameTestError> assertEntityPresent(struct ActorDefinitionIdentifier const&, class BlockPos const&, float, bool);
    /*30*/ virtual class std::optional<struct gametest::GameTestError> assertEntityInstancePresent(class Actor const*, class BlockPos const&, bool);
    /*31*/ virtual class std::optional<struct gametest::GameTestError> assertEntityTouching(struct ActorDefinitionIdentifier const&, class Vec3 const&, bool);
    /*32*/ virtual class std::optional<struct gametest::GameTestError> assertEntityState(class BlockPos const&, struct ActorDefinitionIdentifier const&, class std::function<bool (class Actor&)>);
    /*33*/ virtual class std::optional<struct gametest::GameTestError> assertBlockPresent(class BlockLegacy const&, int, int, int, bool);
    /*34*/ virtual class std::optional<struct gametest::GameTestError> assertBlockPresent(class BlockLegacy const&, class BlockPos const&, bool);
    /*35*/ virtual class std::optional<struct gametest::GameTestError> assertBlockState(class BlockPos const&, class std::function<bool (class Block const&)>);
    /*36*/ virtual class std::optional<struct gametest::GameTestError> assertItemEntityPresent(class Item const&, int, int, int, float, bool);
    /*37*/ virtual class std::optional<struct gametest::GameTestError> assertItemEntityPresent(class Item const&, class BlockPos const&, float, bool);
    /*38*/ virtual class std::optional<struct gametest::GameTestError> assertItemEntityCountIs(class Item const&, class BlockPos const&, float, int);
    /*39*/ virtual class std::optional<struct gametest::GameTestError> assertContainerEmpty(class BlockPos const&);
    /*40*/ virtual class std::optional<struct gametest::GameTestError> assertContainerContains(class ItemStack const&, class BlockPos const&);
    /*41*/ virtual class std::optional<struct gametest::GameTestError> assertEntityHasComponent(struct ActorDefinitionIdentifier const&, std::string const&, class BlockPos const&, bool);
    /*42*/ virtual class std::optional<struct gametest::GameTestError> assertEntityHasArmor(struct ActorDefinitionIdentifier const&, int /*enum enum ArmorSlot*/, std::string const&, int, class BlockPos const&, bool);
    /*43*/ virtual class std::optional<struct gametest::GameTestError> print(std::string const&);
    /*44*/ virtual class std::optional<struct gametest::GameTestError> assertRedstonePower(class BlockPos const&, int);
    /*45*/ virtual class std::optional<struct gametest::GameTestError> assertIsWaterlogged(class BlockPos const&, bool);
    /*46*/ virtual class std::optional<struct gametest::GameTestError> pulseRedstone(class BlockPos const&, int);
    /*47*/ virtual class std::variant<struct gametest::GameTestError, class ScriptGameTestConnectivity> getFenceConnectivity(class BlockPos const&);
    /*48*/ virtual class std::variant<struct gametest::GameTestError, class BlockPos> worldPosition(class BlockPos const&) const;
    /*49*/ virtual class std::variant<struct gametest::GameTestError, class Vec3> worldPosition(class Vec3 const&) const;
    /*50*/ virtual class std::variant<struct gametest::GameTestError, class BlockPos> relativePosition(class BlockPos const&) const;
    /*51*/ virtual class std::variant<struct gametest::GameTestError, class Vec3> relativePosition(class Vec3 const&) const;
    /*52*/ virtual class std::optional<struct gametest::GameTestError> setFluidContainer(class BlockPos const&, int);
    /*53*/ virtual class std::optional<struct gametest::GameTestError> assertCanReachLocation(class Mob&, class BlockPos const&, bool);
    /*54*/ virtual class std::optional<struct gametest::GameTestError> spreadFromFaceTowardDirection(class BlockPos const&, unsigned char, unsigned char);
    /*55*/ virtual class std::variant<struct gametest::GameTestError, class SimulatedPlayer*> spawnSimulatedPlayer(std::string const&, class BlockPos const&);
    /*56*/ virtual void removeSimulatedPlayer(class SimulatedPlayer&);
    /*57*/ virtual class std::optional<struct gametest::GameTestError> getBlockSource(class BlockSource*&);
    /*
    inline class std::optional<struct gametest::GameTestError> assertBlockPresent(class BlockLegacy const& a0, class BlockPos const& a1, bool a2){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(class BlockLegacy const&, class BlockPos const&, bool);
        *((void**)&rv) = dlsym("?assertBlockPresent@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEBVBlockLegacy@@AEBVBlockPos@@_N@Z");
        return (this->*rv)(std::forward<class BlockLegacy const&>(a0), std::forward<class BlockPos const&>(a1), std::forward<bool>(a2));
    }
    inline class std::optional<struct gametest::GameTestError> assertBlockPresent(class BlockLegacy const& a0, int a1, int a2, int a3, bool a4){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(class BlockLegacy const&, int, int, int, bool);
        *((void**)&rv) = dlsym("?assertBlockPresent@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEBVBlockLegacy@@HHH_N@Z");
        return (this->*rv)(std::forward<class BlockLegacy const&>(a0), std::forward<int>(a1), std::forward<int>(a2), std::forward<int>(a3), std::forward<bool>(a4));
    }
    inline class std::optional<struct gametest::GameTestError> assertBlockState(class BlockPos const& a0, class std::function<bool (class Block const&)> a1){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(class BlockPos const&, class std::function<bool (class Block const&)>);
        *((void**)&rv) = dlsym("?assertBlockState@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEBVBlockPos@@V?$function@$$A6A_NAEBVBlock@@@Z@3@@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0), std::forward<class std::function<bool (class Block const&)>>(a1));
    }
    inline class std::optional<struct gametest::GameTestError> assertCanReachLocation(class Mob& a0, class BlockPos const& a1, bool a2){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(class Mob&, class BlockPos const&, bool);
        *((void**)&rv) = dlsym("?assertCanReachLocation@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEAVMob@@AEBVBlockPos@@_N@Z");
        return (this->*rv)(std::forward<class Mob&>(a0), std::forward<class BlockPos const&>(a1), std::forward<bool>(a2));
    }
    inline class std::optional<struct gametest::GameTestError> assertContainerContains(class ItemStack const& a0, class BlockPos const& a1){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(class ItemStack const&, class BlockPos const&);
        *((void**)&rv) = dlsym("?assertContainerContains@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEBVItemStack@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class ItemStack const&>(a0), std::forward<class BlockPos const&>(a1));
    }
    inline class std::optional<struct gametest::GameTestError> assertContainerEmpty(class BlockPos const& a0){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(class BlockPos const&);
        *((void**)&rv) = dlsym("?assertContainerEmpty@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0));
    }
    inline class std::optional<struct gametest::GameTestError> assertEntityHasArmor(struct ActorDefinitionIdentifier const& a0, int \/*enum enum ArmorSlot*\/ a1, std::string const& a2, int a3, class BlockPos const& a4, bool a5){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(struct ActorDefinitionIdentifier const&, int \/*enum enum ArmorSlot*\/, std::string const&, int, class BlockPos const&, bool);
        *((void**)&rv) = dlsym("?assertEntityHasArmor@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEBUActorDefinitionIdentifier@@W4ArmorSlot@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@HAEBVBlockPos@@_N@Z");
        return (this->*rv)(std::forward<struct ActorDefinitionIdentifier const&>(a0), std::forward<int \/*enum enum ArmorSlot*\/>(a1), std::forward<std::string const&>(a2), std::forward<int>(a3), std::forward<class BlockPos const&>(a4), std::forward<bool>(a5));
    }
    inline class std::optional<struct gametest::GameTestError> assertEntityHasComponent(struct ActorDefinitionIdentifier const& a0, std::string const& a1, class BlockPos const& a2, bool a3){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(struct ActorDefinitionIdentifier const&, std::string const&, class BlockPos const&, bool);
        *((void**)&rv) = dlsym("?assertEntityHasComponent@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEBUActorDefinitionIdentifier@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@AEBVBlockPos@@_N@Z");
        return (this->*rv)(std::forward<struct ActorDefinitionIdentifier const&>(a0), std::forward<std::string const&>(a1), std::forward<class BlockPos const&>(a2), std::forward<bool>(a3));
    }
    inline class std::optional<struct gametest::GameTestError> assertEntityInstancePresent(class Actor const* a0, class BlockPos const& a1, bool a2){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(class Actor const*, class BlockPos const&, bool);
        *((void**)&rv) = dlsym("?assertEntityInstancePresent@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@PEBVActor@@AEBVBlockPos@@_N@Z");
        return (this->*rv)(std::forward<class Actor const*>(a0), std::forward<class BlockPos const&>(a1), std::forward<bool>(a2));
    }
    inline class std::optional<struct gametest::GameTestError> assertEntityPresent(struct ActorDefinitionIdentifier const& a0, class BlockPos const& a1, float a2, bool a3){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(struct ActorDefinitionIdentifier const&, class BlockPos const&, float, bool);
        *((void**)&rv) = dlsym("?assertEntityPresent@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEBUActorDefinitionIdentifier@@AEBVBlockPos@@M_N@Z");
        return (this->*rv)(std::forward<struct ActorDefinitionIdentifier const&>(a0), std::forward<class BlockPos const&>(a1), std::forward<float>(a2), std::forward<bool>(a3));
    }
    inline class std::optional<struct gametest::GameTestError> assertEntityPresent(struct ActorDefinitionIdentifier const& a0, class BlockPos const& a1, bool a2){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(struct ActorDefinitionIdentifier const&, class BlockPos const&, bool);
        *((void**)&rv) = dlsym("?assertEntityPresent@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEBUActorDefinitionIdentifier@@AEBVBlockPos@@_N@Z");
        return (this->*rv)(std::forward<struct ActorDefinitionIdentifier const&>(a0), std::forward<class BlockPos const&>(a1), std::forward<bool>(a2));
    }
    inline class std::optional<struct gametest::GameTestError> assertEntityPresent(struct ActorDefinitionIdentifier const& a0, int a1, int a2, int a3, bool a4){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(struct ActorDefinitionIdentifier const&, int, int, int, bool);
        *((void**)&rv) = dlsym("?assertEntityPresent@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEBUActorDefinitionIdentifier@@HHH_N@Z");
        return (this->*rv)(std::forward<struct ActorDefinitionIdentifier const&>(a0), std::forward<int>(a1), std::forward<int>(a2), std::forward<int>(a3), std::forward<bool>(a4));
    }
    inline class std::optional<struct gametest::GameTestError> assertEntityPresent(struct ActorDefinitionIdentifier const& a0, bool a1){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(struct ActorDefinitionIdentifier const&, bool);
        *((void**)&rv) = dlsym("?assertEntityPresent@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEBUActorDefinitionIdentifier@@_N@Z");
        return (this->*rv)(std::forward<struct ActorDefinitionIdentifier const&>(a0), std::forward<bool>(a1));
    }
    inline class std::optional<struct gametest::GameTestError> assertEntityState(class BlockPos const& a0, struct ActorDefinitionIdentifier const& a1, class std::function<bool (class Actor&)> a2){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(class BlockPos const&, struct ActorDefinitionIdentifier const&, class std::function<bool (class Actor&)>);
        *((void**)&rv) = dlsym("?assertEntityState@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEBVBlockPos@@AEBUActorDefinitionIdentifier@@V?$function@$$A6A_NAEAVActor@@@Z@3@@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0), std::forward<struct ActorDefinitionIdentifier const&>(a1), std::forward<class std::function<bool (class Actor&)>>(a2));
    }
    inline class std::optional<struct gametest::GameTestError> assertEntityTouching(struct ActorDefinitionIdentifier const& a0, class Vec3 const& a1, bool a2){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(struct ActorDefinitionIdentifier const&, class Vec3 const&, bool);
        *((void**)&rv) = dlsym("?assertEntityTouching@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEBUActorDefinitionIdentifier@@AEBVVec3@@_N@Z");
        return (this->*rv)(std::forward<struct ActorDefinitionIdentifier const&>(a0), std::forward<class Vec3 const&>(a1), std::forward<bool>(a2));
    }
    inline class std::optional<struct gametest::GameTestError> assertIsWaterlogged(class BlockPos const& a0, bool a1){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(class BlockPos const&, bool);
        *((void**)&rv) = dlsym("?assertIsWaterlogged@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEBVBlockPos@@_N@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0), std::forward<bool>(a1));
    }
    inline class std::optional<struct gametest::GameTestError> assertItemEntityCountIs(class Item const& a0, class BlockPos const& a1, float a2, int a3){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(class Item const&, class BlockPos const&, float, int);
        *((void**)&rv) = dlsym("?assertItemEntityCountIs@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEBVItem@@AEBVBlockPos@@MH@Z");
        return (this->*rv)(std::forward<class Item const&>(a0), std::forward<class BlockPos const&>(a1), std::forward<float>(a2), std::forward<int>(a3));
    }
    inline class std::optional<struct gametest::GameTestError> assertItemEntityPresent(class Item const& a0, class BlockPos const& a1, float a2, bool a3){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(class Item const&, class BlockPos const&, float, bool);
        *((void**)&rv) = dlsym("?assertItemEntityPresent@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEBVItem@@AEBVBlockPos@@M_N@Z");
        return (this->*rv)(std::forward<class Item const&>(a0), std::forward<class BlockPos const&>(a1), std::forward<float>(a2), std::forward<bool>(a3));
    }
    inline class std::optional<struct gametest::GameTestError> assertItemEntityPresent(class Item const& a0, int a1, int a2, int a3, float a4, bool a5){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(class Item const&, int, int, int, float, bool);
        *((void**)&rv) = dlsym("?assertItemEntityPresent@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEBVItem@@HHHM_N@Z");
        return (this->*rv)(std::forward<class Item const&>(a0), std::forward<int>(a1), std::forward<int>(a2), std::forward<int>(a3), std::forward<float>(a4), std::forward<bool>(a5));
    }
    inline class std::optional<struct gametest::GameTestError> assertRedstonePower(class BlockPos const& a0, int a1){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(class BlockPos const&, int);
        *((void**)&rv) = dlsym("?assertRedstonePower@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEBVBlockPos@@H@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0), std::forward<int>(a1));
    }
    inline class std::optional<struct gametest::GameTestError> getBlockSource(class BlockSource*& a0){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(class BlockSource*&);
        *((void**)&rv) = dlsym("?getBlockSource@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEAPEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class BlockSource*&>(a0));
    }
    inline class std::variant<struct gametest::GameTestError, class ScriptGameTestConnectivity> getFenceConnectivity(class BlockPos const& a0){
        class std::variant<struct gametest::GameTestError, class ScriptGameTestConnectivity> (MinecraftGameTestHelper::*rv)(class BlockPos const&);
        *((void**)&rv) = dlsym("?getFenceConnectivity@MinecraftGameTestHelper@@UEAA?AV?$variant@UGameTestError@gametest@@VScriptGameTestConnectivity@@@std@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0));
    }
    inline class std::optional<struct gametest::GameTestError> killAllEntities(){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)();
        *((void**)&rv) = dlsym("?killAllEntities@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@XZ");
        return (this->*rv)();
    }
    inline class std::optional<struct gametest::GameTestError> pressButton(class BlockPos const& a0){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(class BlockPos const&);
        *((void**)&rv) = dlsym("?pressButton@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0));
    }
    inline class std::optional<struct gametest::GameTestError> pressButton(int a0, int a1, int a2){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(int, int, int);
        *((void**)&rv) = dlsym("?pressButton@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@HHH@Z");
        return (this->*rv)(std::forward<int>(a0), std::forward<int>(a1), std::forward<int>(a2));
    }
    inline class std::optional<struct gametest::GameTestError> print(std::string const& a0){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(std::string const&);
        *((void**)&rv) = dlsym("?print@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z");
        return (this->*rv)(std::forward<std::string const&>(a0));
    }
    inline class std::optional<struct gametest::GameTestError> pullLever(class BlockPos const& a0){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(class BlockPos const&);
        *((void**)&rv) = dlsym("?pullLever@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0));
    }
    inline class std::optional<struct gametest::GameTestError> pullLever(int a0, int a1, int a2){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(int, int, int);
        *((void**)&rv) = dlsym("?pullLever@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@HHH@Z");
        return (this->*rv)(std::forward<int>(a0), std::forward<int>(a1), std::forward<int>(a2));
    }
    inline class std::optional<struct gametest::GameTestError> pulseRedstone(class BlockPos const& a0, int a1){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(class BlockPos const&, int);
        *((void**)&rv) = dlsym("?pulseRedstone@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEBVBlockPos@@H@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0), std::forward<int>(a1));
    }
    inline class std::variant<struct gametest::GameTestError, class BlockPos> relativePosition(class BlockPos const& a0) const{
        class std::variant<struct gametest::GameTestError, class BlockPos> (MinecraftGameTestHelper::*rv)(class BlockPos const&) const;
        *((void**)&rv) = dlsym("?relativePosition@MinecraftGameTestHelper@@UEBA?AV?$variant@UGameTestError@gametest@@VBlockPos@@@std@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0));
    }
    inline class std::variant<struct gametest::GameTestError, class Vec3> relativePosition(class Vec3 const& a0) const{
        class std::variant<struct gametest::GameTestError, class Vec3> (MinecraftGameTestHelper::*rv)(class Vec3 const&) const;
        *((void**)&rv) = dlsym("?relativePosition@MinecraftGameTestHelper@@UEBA?AV?$variant@UGameTestError@gametest@@VVec3@@@std@@AEBVVec3@@@Z");
        return (this->*rv)(std::forward<class Vec3 const&>(a0));
    }
    inline void removeSimulatedPlayer(class SimulatedPlayer& a0){
        void (MinecraftGameTestHelper::*rv)(class SimulatedPlayer&);
        *((void**)&rv) = dlsym("?removeSimulatedPlayer@MinecraftGameTestHelper@@UEAAXAEAVSimulatedPlayer@@@Z");
        return (this->*rv)(std::forward<class SimulatedPlayer&>(a0));
    }
    inline class std::optional<struct gametest::GameTestError> setBlock(class BlockPos const& a0, class Block const& a1, int a2){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(class BlockPos const&, class Block const&, int);
        *((void**)&rv) = dlsym("?setBlock@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEBVBlockPos@@AEBVBlock@@H@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0), std::forward<class Block const&>(a1), std::forward<int>(a2));
    }
    inline class std::optional<struct gametest::GameTestError> setBlock(int a0, int a1, int a2, class Block const& a3, int a4){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(int, int, int, class Block const&, int);
        *((void**)&rv) = dlsym("?setBlock@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@HHHAEBVBlock@@H@Z");
        return (this->*rv)(std::forward<int>(a0), std::forward<int>(a1), std::forward<int>(a2), std::forward<class Block const&>(a3), std::forward<int>(a4));
    }
    inline void setDayTime(int a0){
        void (MinecraftGameTestHelper::*rv)(int);
        *((void**)&rv) = dlsym("?setDayTime@MinecraftGameTestHelper@@UEAAXH@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline class std::optional<struct gametest::GameTestError> setFluidContainer(class BlockPos const& a0, int a1){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(class BlockPos const&, int);
        *((void**)&rv) = dlsym("?setFluidContainer@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEBVBlockPos@@H@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0), std::forward<int>(a1));
    }
    inline void setNight(){
        void (MinecraftGameTestHelper::*rv)();
        *((void**)&rv) = dlsym("?setNight@MinecraftGameTestHelper@@UEAAXXZ");
        return (this->*rv)();
    }
    inline class std::optional<struct gametest::GameTestError> setTntFuse(class Actor& a0, int a1){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(class Actor&, int);
        *((void**)&rv) = dlsym("?setTntFuse@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEAVActor@@H@Z");
        return (this->*rv)(std::forward<class Actor&>(a0), std::forward<int>(a1));
    }
    inline class std::variant<struct gametest::GameTestError, class Actor*> spawn(struct ActorDefinitionIdentifier const& a0, class BlockPos const& a1){
        class std::variant<struct gametest::GameTestError, class Actor*> (MinecraftGameTestHelper::*rv)(struct ActorDefinitionIdentifier const&, class BlockPos const&);
        *((void**)&rv) = dlsym("?spawn@MinecraftGameTestHelper@@UEAA?AV?$variant@UGameTestError@gametest@@PEAVActor@@@std@@AEBUActorDefinitionIdentifier@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<struct ActorDefinitionIdentifier const&>(a0), std::forward<class BlockPos const&>(a1));
    }
    inline class std::variant<struct gametest::GameTestError, class Actor*> spawn(struct ActorDefinitionIdentifier const& a0, class Vec3 const& a1){
        class std::variant<struct gametest::GameTestError, class Actor*> (MinecraftGameTestHelper::*rv)(struct ActorDefinitionIdentifier const&, class Vec3 const&);
        *((void**)&rv) = dlsym("?spawn@MinecraftGameTestHelper@@UEAA?AV?$variant@UGameTestError@gametest@@PEAVActor@@@std@@AEBUActorDefinitionIdentifier@@AEBVVec3@@@Z");
        return (this->*rv)(std::forward<struct ActorDefinitionIdentifier const&>(a0), std::forward<class Vec3 const&>(a1));
    }
    inline class std::variant<struct gametest::GameTestError, class Actor*> spawn(struct ActorDefinitionIdentifier const& a0, int a1, int a2, int a3){
        class std::variant<struct gametest::GameTestError, class Actor*> (MinecraftGameTestHelper::*rv)(struct ActorDefinitionIdentifier const&, int, int, int);
        *((void**)&rv) = dlsym("?spawn@MinecraftGameTestHelper@@UEAA?AV?$variant@UGameTestError@gametest@@PEAVActor@@@std@@AEBUActorDefinitionIdentifier@@HHH@Z");
        return (this->*rv)(std::forward<struct ActorDefinitionIdentifier const&>(a0), std::forward<int>(a1), std::forward<int>(a2), std::forward<int>(a3));
    }
    inline class std::variant<struct gametest::GameTestError, class Actor*> spawnItem(class ItemStack const& a0, class Vec3 const& a1){
        class std::variant<struct gametest::GameTestError, class Actor*> (MinecraftGameTestHelper::*rv)(class ItemStack const&, class Vec3 const&);
        *((void**)&rv) = dlsym("?spawnItem@MinecraftGameTestHelper@@UEAA?AV?$variant@UGameTestError@gametest@@PEAVActor@@@std@@AEBVItemStack@@AEBVVec3@@@Z");
        return (this->*rv)(std::forward<class ItemStack const&>(a0), std::forward<class Vec3 const&>(a1));
    }
    inline class std::variant<struct gametest::GameTestError, class SimulatedPlayer*> spawnSimulatedPlayer(std::string const& a0, class BlockPos const& a1){
        class std::variant<struct gametest::GameTestError, class SimulatedPlayer*> (MinecraftGameTestHelper::*rv)(std::string const&, class BlockPos const&);
        *((void**)&rv) = dlsym("?spawnSimulatedPlayer@MinecraftGameTestHelper@@UEAA?AV?$variant@UGameTestError@gametest@@PEAVSimulatedPlayer@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<std::string const&>(a0), std::forward<class BlockPos const&>(a1));
    }
    inline class std::variant<struct gametest::GameTestError, class Actor*> spawnWithoutBehaviors(struct ActorDefinitionIdentifier const& a0, class BlockPos const& a1){
        class std::variant<struct gametest::GameTestError, class Actor*> (MinecraftGameTestHelper::*rv)(struct ActorDefinitionIdentifier const&, class BlockPos const&);
        *((void**)&rv) = dlsym("?spawnWithoutBehaviors@MinecraftGameTestHelper@@UEAA?AV?$variant@UGameTestError@gametest@@PEAVActor@@@std@@AEBUActorDefinitionIdentifier@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<struct ActorDefinitionIdentifier const&>(a0), std::forward<class BlockPos const&>(a1));
    }
    inline class std::variant<struct gametest::GameTestError, class Actor*> spawnWithoutBehaviors(struct ActorDefinitionIdentifier const& a0, class Vec3 const& a1){
        class std::variant<struct gametest::GameTestError, class Actor*> (MinecraftGameTestHelper::*rv)(struct ActorDefinitionIdentifier const&, class Vec3 const&);
        *((void**)&rv) = dlsym("?spawnWithoutBehaviors@MinecraftGameTestHelper@@UEAA?AV?$variant@UGameTestError@gametest@@PEAVActor@@@std@@AEBUActorDefinitionIdentifier@@AEBVVec3@@@Z");
        return (this->*rv)(std::forward<struct ActorDefinitionIdentifier const&>(a0), std::forward<class Vec3 const&>(a1));
    }
    inline class std::optional<struct gametest::GameTestError> spreadFromFaceTowardDirection(class BlockPos const& a0, unsigned char a1, unsigned char a2){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(class BlockPos const&, unsigned char, unsigned char);
        *((void**)&rv) = dlsym("?spreadFromFaceTowardDirection@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEBVBlockPos@@EE@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0), std::forward<unsigned char>(a1), std::forward<unsigned char>(a2));
    }
    inline void succeedWhenBlockPresent(class Block const& a0, class BlockPos const& a1, bool a2){
        void (MinecraftGameTestHelper::*rv)(class Block const&, class BlockPos const&, bool);
        *((void**)&rv) = dlsym("?succeedWhenBlockPresent@MinecraftGameTestHelper@@UEAAXAEBVBlock@@AEBVBlockPos@@_N@Z");
        return (this->*rv)(std::forward<class Block const&>(a0), std::forward<class BlockPos const&>(a1), std::forward<bool>(a2));
    }
    inline void succeedWhenBlockPresent(class Block const& a0, int a1, int a2, int a3, bool a4){
        void (MinecraftGameTestHelper::*rv)(class Block const&, int, int, int, bool);
        *((void**)&rv) = dlsym("?succeedWhenBlockPresent@MinecraftGameTestHelper@@UEAAXAEBVBlock@@HHH_N@Z");
        return (this->*rv)(std::forward<class Block const&>(a0), std::forward<int>(a1), std::forward<int>(a2), std::forward<int>(a3), std::forward<bool>(a4));
    }
    inline void succeedWhenBlockPresent(class BlockLegacy const& a0, class BlockPos const& a1, bool a2){
        void (MinecraftGameTestHelper::*rv)(class BlockLegacy const&, class BlockPos const&, bool);
        *((void**)&rv) = dlsym("?succeedWhenBlockPresent@MinecraftGameTestHelper@@UEAAXAEBVBlockLegacy@@AEBVBlockPos@@_N@Z");
        return (this->*rv)(std::forward<class BlockLegacy const&>(a0), std::forward<class BlockPos const&>(a1), std::forward<bool>(a2));
    }
    inline void succeedWhenEntityData(class BlockPos const& a0, struct ActorDefinitionIdentifier const& a1, class std::function<bool (class Actor&)> a2){
        void (MinecraftGameTestHelper::*rv)(class BlockPos const&, struct ActorDefinitionIdentifier const&, class std::function<bool (class Actor&)>);
        *((void**)&rv) = dlsym("?succeedWhenEntityData@MinecraftGameTestHelper@@UEAAXAEBVBlockPos@@AEBUActorDefinitionIdentifier@@V?$function@$$A6A_NAEAVActor@@@Z@std@@@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0), std::forward<struct ActorDefinitionIdentifier const&>(a1), std::forward<class std::function<bool (class Actor&)>>(a2));
    }
    inline void succeedWhenEntityHasComponent(struct ActorDefinitionIdentifier const& a0, std::string const& a1, class BlockPos const& a2, bool a3){
        void (MinecraftGameTestHelper::*rv)(struct ActorDefinitionIdentifier const&, std::string const&, class BlockPos const&, bool);
        *((void**)&rv) = dlsym("?succeedWhenEntityHasComponent@MinecraftGameTestHelper@@UEAAXAEBUActorDefinitionIdentifier@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBVBlockPos@@_N@Z");
        return (this->*rv)(std::forward<struct ActorDefinitionIdentifier const&>(a0), std::forward<std::string const&>(a1), std::forward<class BlockPos const&>(a2), std::forward<bool>(a3));
    }
    inline void succeedWhenEntityPresent(struct ActorDefinitionIdentifier const& a0, class BlockPos const& a1, bool a2){
        void (MinecraftGameTestHelper::*rv)(struct ActorDefinitionIdentifier const&, class BlockPos const&, bool);
        *((void**)&rv) = dlsym("?succeedWhenEntityPresent@MinecraftGameTestHelper@@UEAAXAEBUActorDefinitionIdentifier@@AEBVBlockPos@@_N@Z");
        return (this->*rv)(std::forward<struct ActorDefinitionIdentifier const&>(a0), std::forward<class BlockPos const&>(a1), std::forward<bool>(a2));
    }
    inline void succeedWhenEntityPresent(struct ActorDefinitionIdentifier const& a0, int a1, int a2, int a3, bool a4){
        void (MinecraftGameTestHelper::*rv)(struct ActorDefinitionIdentifier const&, int, int, int, bool);
        *((void**)&rv) = dlsym("?succeedWhenEntityPresent@MinecraftGameTestHelper@@UEAAXAEBUActorDefinitionIdentifier@@HHH_N@Z");
        return (this->*rv)(std::forward<struct ActorDefinitionIdentifier const&>(a0), std::forward<int>(a1), std::forward<int>(a2), std::forward<int>(a3), std::forward<bool>(a4));
    }
    inline class std::optional<struct gametest::GameTestError> walkTo(class Mob& a0, class BlockPos const& a1, float a2){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(class Mob&, class BlockPos const&, float);
        *((void**)&rv) = dlsym("?walkTo@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEAVMob@@AEBVBlockPos@@M@Z");
        return (this->*rv)(std::forward<class Mob&>(a0), std::forward<class BlockPos const&>(a1), std::forward<float>(a2));
    }
    inline class std::optional<struct gametest::GameTestError> walkTo(class Mob& a0, class Vec3 const& a1, float a2){
        class std::optional<struct gametest::GameTestError> (MinecraftGameTestHelper::*rv)(class Mob&, class Vec3 const&, float);
        *((void**)&rv) = dlsym("?walkTo@MinecraftGameTestHelper@@UEAA?AV?$optional@UGameTestError@gametest@@@std@@AEAVMob@@AEBVVec3@@M@Z");
        return (this->*rv)(std::forward<class Mob&>(a0), std::forward<class Vec3 const&>(a1), std::forward<float>(a2));
    }
    inline class std::variant<struct gametest::GameTestError, class BlockPos> worldPosition(class BlockPos const& a0) const{
        class std::variant<struct gametest::GameTestError, class BlockPos> (MinecraftGameTestHelper::*rv)(class BlockPos const&) const;
        *((void**)&rv) = dlsym("?worldPosition@MinecraftGameTestHelper@@UEBA?AV?$variant@UGameTestError@gametest@@VBlockPos@@@std@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0));
    }
    inline class std::variant<struct gametest::GameTestError, class Vec3> worldPosition(class Vec3 const& a0) const{
        class std::variant<struct gametest::GameTestError, class Vec3> (MinecraftGameTestHelper::*rv)(class Vec3 const&) const;
        *((void**)&rv) = dlsym("?worldPosition@MinecraftGameTestHelper@@UEBA?AV?$variant@UGameTestError@gametest@@VVec3@@@std@@AEBVVec3@@@Z");
        return (this->*rv)(std::forward<class Vec3 const&>(a0));
    }
    */

protected:

private:
    MCAPI class std::optional<struct gametest::GameTestError> _assertEntityPresent(struct ActorDefinitionIdentifier const&, class AABB const&, class BlockPos const&, bool) const;
    MCAPI class Container const* _getContainer(class BlockPos const&);
    MCAPI int _getItemEntityCount(class Item const&, class AABB const&);
    MCAPI class std::optional<struct gametest::GameTestError> _getStructureBlockMissingError() const;
    MCAPI bool _isEntityPresent(struct ActorDefinitionIdentifier const&, class AABB const&) const;
};