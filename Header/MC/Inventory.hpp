// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "FillingContainer.hpp"
#define EXTRA_INCLUDE_PART_INVENTORY
#include "Extra/InventoryAPI.hpp"
#undef EXTRA_INCLUDE_PART_INVENTORY
class Inventory : public FillingContainer {
#include "Extra/InventoryAPI.hpp"
public:
    /*0*/ virtual ~Inventory();
    /*1*/ virtual void init();
    /*2*/ virtual void serverInitItemStackIds(int, int, class std::function<void (int, class ItemStack const&)>);
    /*3*/ virtual void setItem(int, class ItemStack const&);
    /*4*/ virtual void setItemWithForceBalance(int, class ItemStack const&, bool);
    /*5*/ virtual void __unk_vfn_0();
    /*6*/ virtual void startOpen(class Player&);
    /*7*/ virtual void stopOpen(class Player&);
    /*8*/ virtual void __unk_vfn_1();
    /*9*/ virtual void __unk_vfn_2();
    /*10*/ virtual void __unk_vfn_3();
    /*11*/ virtual bool add(class ItemStack&);
    /*12*/ virtual bool canAdd(class ItemStack const&) const;
    /*13*/ virtual int getEmptySlotsCount() const;
    /*14*/ virtual int getFirstEmptySlot() const;
    /*15*/ virtual void setContainerSize(int);
    /*
    inline bool add(class ItemStack& a0){
        bool (Inventory::*rv)(class ItemStack&);
        *((void**)&rv) = dlsym("?add@Inventory@@UEAA_NAEAVItemStack@@@Z");
        return (this->*rv)(std::forward<class ItemStack&>(a0));
    }
    inline bool canAdd(class ItemStack const& a0) const{
        bool (Inventory::*rv)(class ItemStack const&) const;
        *((void**)&rv) = dlsym("?canAdd@Inventory@@UEBA_NAEBVItemStack@@@Z");
        return (this->*rv)(std::forward<class ItemStack const&>(a0));
    }
    inline int getEmptySlotsCount() const{
        int (Inventory::*rv)() const;
        *((void**)&rv) = dlsym("?getEmptySlotsCount@Inventory@@UEBAHXZ");
        return (this->*rv)();
    }
    inline int getFirstEmptySlot() const{
        int (Inventory::*rv)() const;
        *((void**)&rv) = dlsym("?getFirstEmptySlot@Inventory@@UEBAHXZ");
        return (this->*rv)();
    }
    inline void init(){
        void (Inventory::*rv)();
        *((void**)&rv) = dlsym("?init@Inventory@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void setContainerSize(int a0){
        void (Inventory::*rv)(int);
        *((void**)&rv) = dlsym("?setContainerSize@Inventory@@UEAAXH@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline void setItem(int a0, class ItemStack const& a1){
        void (Inventory::*rv)(int, class ItemStack const&);
        *((void**)&rv) = dlsym("?setItem@Inventory@@UEAAXHAEBVItemStack@@@Z");
        return (this->*rv)(std::forward<int>(a0), std::forward<class ItemStack const&>(a1));
    }
    inline void setItemWithForceBalance(int a0, class ItemStack const& a1, bool a2){
        void (Inventory::*rv)(int, class ItemStack const&, bool);
        *((void**)&rv) = dlsym("?setItemWithForceBalance@Inventory@@UEAAXHAEBVItemStack@@_N@Z");
        return (this->*rv)(std::forward<int>(a0), std::forward<class ItemStack const&>(a1), std::forward<bool>(a2));
    }
    */
    MCAPI void dropSlot(int, bool, bool, bool);
    MCAPI void setupDefault();
    MCAPI void tick(int);

protected:

private:
};