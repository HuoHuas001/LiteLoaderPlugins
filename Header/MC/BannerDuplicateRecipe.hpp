// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "Recipe.hpp"
#define EXTRA_INCLUDE_PART_BANNERDUPLICATERECIPE
#include "Extra/BannerDuplicateRecipeAPI.hpp"
#undef EXTRA_INCLUDE_PART_BANNERDUPLICATERECIPE
class BannerDuplicateRecipe : public Recipe {
#include "Extra/BannerDuplicateRecipeAPI.hpp"
public:
    /*0*/ virtual ~BannerDuplicateRecipe();
    /*1*/ virtual std::vector<class ItemInstance> const& assemble(class CraftingContainer&) const;
    /*2*/ virtual int getCraftingSize() const;
    /*3*/ virtual void __unk_vfn_0();
    /*4*/ virtual void __unk_vfn_1();
    /*5*/ virtual void __unk_vfn_2();
    /*6*/ virtual bool matches(class CraftingContainer&, class Level&) const;
    /*7*/ virtual int size() const;
    /*8*/ virtual class mce::UUID const& getId() const;
    /*9*/ virtual void __unk_vfn_3();
    /*10*/ virtual void __unk_vfn_4();
    /*
    inline int getCraftingSize() const{
        int (BannerDuplicateRecipe::*rv)() const;
        *((void**)&rv) = dlsym("?getCraftingSize@BannerDuplicateRecipe@@UEBAHXZ");
        return (this->*rv)();
    }
    inline int size() const{
        int (BannerDuplicateRecipe::*rv)() const;
        *((void**)&rv) = dlsym("?size@BannerDuplicateRecipe@@UEBAHXZ");
        return (this->*rv)();
    }
    inline std::vector<class ItemInstance> const& getResultItem() const{
        std::vector<class ItemInstance> const& (BannerDuplicateRecipe::*rv)() const;
        *((void**)&rv) = dlsym("?getResultItem@BannerDuplicateRecipe@@UEBAAEBV?$vector@VItemInstance@@V?$allocator@VItemInstance@@@std@@@std@@XZ");
        return (this->*rv)();
    }
    inline std::vector<class ItemInstance> const& assemble(class CraftingContainer& a0) const{
        std::vector<class ItemInstance> const& (BannerDuplicateRecipe::*rv)(class CraftingContainer&) const;
        *((void**)&rv) = dlsym("?assemble@BannerDuplicateRecipe@@UEBAAEBV?$vector@VItemInstance@@V?$allocator@VItemInstance@@@std@@@std@@AEAVCraftingContainer@@@Z");
        return (this->*rv)(std::forward<class CraftingContainer&>(a0));
    }
    inline class RecipeIngredient const& getIngredient(int a0, int a1) const{
        class RecipeIngredient const& (BannerDuplicateRecipe::*rv)(int, int) const;
        *((void**)&rv) = dlsym("?getIngredient@BannerDuplicateRecipe@@UEBAAEBVRecipeIngredient@@HH@Z");
        return (this->*rv)(std::forward<int>(a0), std::forward<int>(a1));
    }
    inline bool matches(class CraftingContainer& a0, class Level& a1) const{
        bool (BannerDuplicateRecipe::*rv)(class CraftingContainer&, class Level&) const;
        *((void**)&rv) = dlsym("?matches@BannerDuplicateRecipe@@UEBA_NAEAVCraftingContainer@@AEAVLevel@@@Z");
        return (this->*rv)(std::forward<class CraftingContainer&>(a0), std::forward<class Level&>(a1));
    }
    */
    MCAPI static class mce::UUID const ID;

protected:

private:
};