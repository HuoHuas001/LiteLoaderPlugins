// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_PATHNAVIGATION
#include "Extra/PathNavigationAPI.hpp"
#undef EXTRA_INCLUDE_PART_PATHNAVIGATION
class PathNavigation {
#include "Extra/PathNavigationAPI.hpp"
public:
    /*0*/ virtual ~PathNavigation();
    /*1*/ virtual void initializeInternal(class Mob&, struct NavigationDescription*);
    /*2*/ virtual void tick(class NavigationComponent&, class Mob&);
    /*3*/ virtual class Vec3 getTempMobPos(class Mob const&) const;
    /*4*/ virtual std::unique_ptr<class Path> createPath(class NavigationComponent&, class Mob&, class Vec3 const&);
    /*5*/ virtual std::unique_ptr<class Path> createPath(class NavigationComponent&, class Mob&, class Actor&);
    /*6*/ virtual bool moveTo(class NavigationComponent&, class Mob&, class Vec3 const&, float);
    /*7*/ virtual bool moveTo(class NavigationComponent&, class Mob&, class Actor&, float);
    /*8*/ virtual bool moveTo(class NavigationComponent&, class Mob&, std::unique_ptr<class Path>, float);
    /*9*/ virtual void stop(class NavigationComponent&, class Mob&);
    /*10*/ virtual bool travel(class NavigationComponent&, class Mob&, float&, float&, float&);
    /*11*/ virtual bool canUpdatePath(class Mob const&) const;
    /*12*/ virtual void updatePath(class NavigationComponent&, class Mob&);
    /*
    inline bool travel(class NavigationComponent& a0, class Mob& a1, float& a2, float& a3, float& a4){
        bool (PathNavigation::*rv)(class NavigationComponent&, class Mob&, float&, float&, float&);
        *((void**)&rv) = dlsym("?travel@PathNavigation@@MEAA_NAEAVNavigationComponent@@AEAVMob@@AEAM22@Z");
        return (this->*rv)(std::forward<class NavigationComponent&>(a0), std::forward<class Mob&>(a1), std::forward<float&>(a2), std::forward<float&>(a3), std::forward<float&>(a4));
    }
    inline bool canUpdatePath(class Mob const& a0) const{
        bool (PathNavigation::*rv)(class Mob const&) const;
        *((void**)&rv) = dlsym("?canUpdatePath@PathNavigation@@MEBA_NAEBVMob@@@Z");
        return (this->*rv)(std::forward<class Mob const&>(a0));
    }
    inline std::unique_ptr<class Path> createPath(class NavigationComponent& a0, class Mob& a1, class Actor& a2){
        std::unique_ptr<class Path> (PathNavigation::*rv)(class NavigationComponent&, class Mob&, class Actor&);
        *((void**)&rv) = dlsym("?createPath@PathNavigation@@MEAA?AV?$unique_ptr@VPath@@U?$default_delete@VPath@@@std@@@std@@AEAVNavigationComponent@@AEAVMob@@AEAVActor@@@Z");
        return (this->*rv)(std::forward<class NavigationComponent&>(a0), std::forward<class Mob&>(a1), std::forward<class Actor&>(a2));
    }
    inline std::unique_ptr<class Path> createPath(class NavigationComponent& a0, class Mob& a1, class Vec3 const& a2){
        std::unique_ptr<class Path> (PathNavigation::*rv)(class NavigationComponent&, class Mob&, class Vec3 const&);
        *((void**)&rv) = dlsym("?createPath@PathNavigation@@MEAA?AV?$unique_ptr@VPath@@U?$default_delete@VPath@@@std@@@std@@AEAVNavigationComponent@@AEAVMob@@AEBVVec3@@@Z");
        return (this->*rv)(std::forward<class NavigationComponent&>(a0), std::forward<class Mob&>(a1), std::forward<class Vec3 const&>(a2));
    }
    inline class Vec3 getTempMobPos(class Mob const& a0) const{
        class Vec3 (PathNavigation::*rv)(class Mob const&) const;
        *((void**)&rv) = dlsym("?getTempMobPos@PathNavigation@@MEBA?AVVec3@@AEBVMob@@@Z");
        return (this->*rv)(std::forward<class Mob const&>(a0));
    }
    inline void initializeInternal(class Mob& a0, struct NavigationDescription* a1){
        void (PathNavigation::*rv)(class Mob&, struct NavigationDescription*);
        *((void**)&rv) = dlsym("?initializeInternal@PathNavigation@@UEAAXAEAVMob@@PEAUNavigationDescription@@@Z");
        return (this->*rv)(std::forward<class Mob&>(a0), std::forward<struct NavigationDescription*>(a1));
    }
    inline bool moveTo(class NavigationComponent& a0, class Mob& a1, class Actor& a2, float a3){
        bool (PathNavigation::*rv)(class NavigationComponent&, class Mob&, class Actor&, float);
        *((void**)&rv) = dlsym("?moveTo@PathNavigation@@MEAA_NAEAVNavigationComponent@@AEAVMob@@AEAVActor@@M@Z");
        return (this->*rv)(std::forward<class NavigationComponent&>(a0), std::forward<class Mob&>(a1), std::forward<class Actor&>(a2), std::forward<float>(a3));
    }
    inline bool moveTo(class NavigationComponent& a0, class Mob& a1, class Vec3 const& a2, float a3){
        bool (PathNavigation::*rv)(class NavigationComponent&, class Mob&, class Vec3 const&, float);
        *((void**)&rv) = dlsym("?moveTo@PathNavigation@@MEAA_NAEAVNavigationComponent@@AEAVMob@@AEBVVec3@@M@Z");
        return (this->*rv)(std::forward<class NavigationComponent&>(a0), std::forward<class Mob&>(a1), std::forward<class Vec3 const&>(a2), std::forward<float>(a3));
    }
    inline bool moveTo(class NavigationComponent& a0, class Mob& a1, std::unique_ptr<class Path> a2, float a3){
        bool (PathNavigation::*rv)(class NavigationComponent&, class Mob&, std::unique_ptr<class Path>, float);
        *((void**)&rv) = dlsym("?moveTo@PathNavigation@@MEAA_NAEAVNavigationComponent@@AEAVMob@@V?$unique_ptr@VPath@@U?$default_delete@VPath@@@std@@@std@@M@Z");
        return (this->*rv)(std::forward<class NavigationComponent&>(a0), std::forward<class Mob&>(a1), std::forward<std::unique_ptr<class Path>>(a2), std::forward<float>(a3));
    }
    inline void stop(class NavigationComponent& a0, class Mob& a1){
        void (PathNavigation::*rv)(class NavigationComponent&, class Mob&);
        *((void**)&rv) = dlsym("?stop@PathNavigation@@MEAAXAEAVNavigationComponent@@AEAVMob@@@Z");
        return (this->*rv)(std::forward<class NavigationComponent&>(a0), std::forward<class Mob&>(a1));
    }
    inline void tick(class NavigationComponent& a0, class Mob& a1){
        void (PathNavigation::*rv)(class NavigationComponent&, class Mob&);
        *((void**)&rv) = dlsym("?tick@PathNavigation@@MEAAXAEAVNavigationComponent@@AEAVMob@@@Z");
        return (this->*rv)(std::forward<class NavigationComponent&>(a0), std::forward<class Mob&>(a1));
    }
    inline void updatePath(class NavigationComponent& a0, class Mob& a1){
        void (PathNavigation::*rv)(class NavigationComponent&, class Mob&);
        *((void**)&rv) = dlsym("?updatePath@PathNavigation@@MEAAXAEAVNavigationComponent@@AEAVMob@@@Z");
        return (this->*rv)(std::forward<class NavigationComponent&>(a0), std::forward<class Mob&>(a1));
    }
    */

protected:
    MCAPI float _getHighestBlockHeight(class BlockSource&, class Mob&, class Vec3 const&, class Vec2 const&) const;
    MCAPI bool _isPositionOnlyInAir(class BlockSource const&, class Vec3 const&, class Vec2 const&) const;
    MCAPI enum NodeType isFree(class NavigationComponent&, class Mob&, class BlockPos const&, class BlockPos const&, class BlockPos const&, enum CanJumpIntoNode);

private:
};