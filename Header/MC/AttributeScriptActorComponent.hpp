// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "ScriptActorComponent.hpp"
#include "Scripting.hpp"
#define EXTRA_INCLUDE_PART_ATTRIBUTESCRIPTACTORCOMPONENT
#include "Extra/AttributeScriptActorComponentAPI.hpp"
#undef EXTRA_INCLUDE_PART_ATTRIBUTESCRIPTACTORCOMPONENT
class AttributeScriptActorComponent : public ScriptActorComponent {
#include "Extra/AttributeScriptActorComponentAPI.hpp"
public:
    /*0*/ virtual ~AttributeScriptActorComponent();
    /*1*/ virtual class Scripting::Result<float> getCurrent() const;
    /*2*/ virtual class Scripting::Result<void> setCurrent(float const&) const;
    /*3*/ virtual class Scripting::Result<float> getValue() const;
    /*
    inline class Scripting::Result<float> getCurrent() const{
        class Scripting::Result<float> (AttributeScriptActorComponent::*rv)() const;
        *((void**)&rv) = dlsym("?getCurrent@AttributeScriptActorComponent@@UEBA?AV?$Result@M@Scripting@@XZ");
        return (this->*rv)();
    }
    inline class Scripting::Result<float> getValue() const{
        class Scripting::Result<float> (AttributeScriptActorComponent::*rv)() const;
        *((void**)&rv) = dlsym("?getValue@AttributeScriptActorComponent@@UEBA?AV?$Result@M@Scripting@@XZ");
        return (this->*rv)();
    }
    inline class Scripting::Result<void> setCurrent(float const& a0) const{
        class Scripting::Result<void> (AttributeScriptActorComponent::*rv)(float const&) const;
        *((void**)&rv) = dlsym("?setCurrent@AttributeScriptActorComponent@@UEBA?AV?$Result@X@Scripting@@AEBM@Z");
        return (this->*rv)(std::forward<float const&>(a0));
    }
    */
    MCAPI class Scripting::Result<void> resetToDefaultValue() const;
    MCAPI class Scripting::Result<void> resetToMaxValue() const;
    MCAPI class Scripting::Result<void> resetToMinValue() const;

protected:

private:
};