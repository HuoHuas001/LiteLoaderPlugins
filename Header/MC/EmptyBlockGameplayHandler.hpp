// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_EMPTYBLOCKGAMEPLAYHANDLER
#include "Extra/EmptyBlockGameplayHandlerAPI.hpp"
#undef EXTRA_INCLUDE_PART_EMPTYBLOCKGAMEPLAYHANDLER
class EmptyBlockGameplayHandler {
#include "Extra/EmptyBlockGameplayHandlerAPI.hpp"
public:
    /*0*/ virtual ~EmptyBlockGameplayHandler();
    /*
    inline int \/*enum enum HandlerResult*\/ handleBlockPatternPostEvent(struct BlockPatternEvent const& a0){
        int \/*enum enum HandlerResult*\/ (EmptyBlockGameplayHandler::*rv)(struct BlockPatternEvent const&);
        *((void**)&rv) = dlsym("?handleBlockPatternPostEvent@EmptyBlockGameplayHandler@@UEAA?AW4HandlerResult@@AEBUBlockPatternEvent@@@Z");
        return (this->*rv)(std::forward<struct BlockPatternEvent const&>(a0));
    }
    inline struct GameplayHandlerResult<int \/*enum enum CoordinatorResult*\/> handleActorStandOnBlock(struct ActorStandOnBlockEvent const& a0){
        struct GameplayHandlerResult<int \/*enum enum CoordinatorResult*\/> (EmptyBlockGameplayHandler::*rv)(struct ActorStandOnBlockEvent const&);
        *((void**)&rv) = dlsym("?handleActorStandOnBlock@EmptyBlockGameplayHandler@@UEAA?AU?$GameplayHandlerResult@W4CoordinatorResult@@@@AEBUActorStandOnBlockEvent@@@Z");
        return (this->*rv)(std::forward<struct ActorStandOnBlockEvent const&>(a0));
    }
    inline struct GameplayHandlerResult<int \/*enum enum CoordinatorResult*\/> handleChestBlockTryPaired(struct ChestBlockTryPairEvent const& a0){
        struct GameplayHandlerResult<int \/*enum enum CoordinatorResult*\/> (EmptyBlockGameplayHandler::*rv)(struct ChestBlockTryPairEvent const&);
        *((void**)&rv) = dlsym("?handleChestBlockTryPaired@EmptyBlockGameplayHandler@@UEAA?AU?$GameplayHandlerResult@W4CoordinatorResult@@@@AEBUChestBlockTryPairEvent@@@Z");
        return (this->*rv)(std::forward<struct ChestBlockTryPairEvent const&>(a0));
    }
    inline struct GameplayHandlerResult<int \/*enum enum CoordinatorResult*\/> handleBlockPatternPreEvent(struct BlockPatternEvent const& a0){
        struct GameplayHandlerResult<int \/*enum enum CoordinatorResult*\/> (EmptyBlockGameplayHandler::*rv)(struct BlockPatternEvent const&);
        *((void**)&rv) = dlsym("?handleBlockPatternPreEvent@EmptyBlockGameplayHandler@@UEAA?AU?$GameplayHandlerResult@W4CoordinatorResult@@@@AEBUBlockPatternEvent@@@Z");
        return (this->*rv)(std::forward<struct BlockPatternEvent const&>(a0));
    }
    inline struct GameplayHandlerResult<int \/*enum enum CoordinatorResult*\/> handleExplosionStartedEvent(struct ExplosionStartedEvent& a0){
        struct GameplayHandlerResult<int \/*enum enum CoordinatorResult*\/> (EmptyBlockGameplayHandler::*rv)(struct ExplosionStartedEvent&);
        *((void**)&rv) = dlsym("?handleExplosionStartedEvent@EmptyBlockGameplayHandler@@UEAA?AU?$GameplayHandlerResult@W4CoordinatorResult@@@@AEAUExplosionStartedEvent@@@Z");
        return (this->*rv)(std::forward<struct ExplosionStartedEvent&>(a0));
    }
    inline struct GameplayHandlerResult<int \/*enum enum CoordinatorResult*\/> handleActorInsideBlock(struct ActorInsideBlockEvent const& a0){
        struct GameplayHandlerResult<int \/*enum enum CoordinatorResult*\/> (EmptyBlockGameplayHandler::*rv)(struct ActorInsideBlockEvent const&);
        *((void**)&rv) = dlsym("?handleActorInsideBlock@EmptyBlockGameplayHandler@@UEAA?AU?$GameplayHandlerResult@W4CoordinatorResult@@@@AEBUActorInsideBlockEvent@@@Z");
        return (this->*rv)(std::forward<struct ActorInsideBlockEvent const&>(a0));
    }
    inline struct GameplayHandlerResult<int \/*enum enum CoordinatorResult*\/> handlePistonActionEvent(struct PistonActionEvent const& a0){
        struct GameplayHandlerResult<int \/*enum enum CoordinatorResult*\/> (EmptyBlockGameplayHandler::*rv)(struct PistonActionEvent const&);
        *((void**)&rv) = dlsym("?handlePistonActionEvent@EmptyBlockGameplayHandler@@UEAA?AU?$GameplayHandlerResult@W4CoordinatorResult@@@@AEBUPistonActionEvent@@@Z");
        return (this->*rv)(std::forward<struct PistonActionEvent const&>(a0));
    }
    inline struct GameplayHandlerResult<class std::optional<std::string > > handleCraftUISetResultName(struct CraftUISetResultNameEvent const& a0){
        struct GameplayHandlerResult<class std::optional<std::string > > (EmptyBlockGameplayHandler::*rv)(struct CraftUISetResultNameEvent const&);
        *((void**)&rv) = dlsym("?handleCraftUISetResultName@EmptyBlockGameplayHandler@@UEAA?AU?$GameplayHandlerResult@V?$optional@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@@AEBUCraftUISetResultNameEvent@@@Z");
        return (this->*rv)(std::forward<struct CraftUISetResultNameEvent const&>(a0));
    }
    */

protected:

private:
};