// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_BACKGROUNDWORKER
#include "Extra/BackgroundWorkerAPI.hpp"
#undef EXTRA_INCLUDE_PART_BACKGROUNDWORKER
class BackgroundWorker {
#include "Extra/BackgroundWorkerAPI.hpp"
public:
    /*0*/ virtual ~BackgroundWorker();
    /*1*/ virtual void __unk_vfn_0();
    /*2*/ virtual bool canTaskRunAgain() const;
    /*
    inline bool isAsync() const{
        bool (BackgroundWorker::*rv)() const;
        *((void**)&rv) = dlsym("?isAsync@BackgroundWorker@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool canTaskRunAgain() const{
        bool (BackgroundWorker::*rv)() const;
        *((void**)&rv) = dlsym("?canTaskRunAgain@BackgroundWorker@@UEBA_NXZ");
        return (this->*rv)();
    }
    */
    MCAPI unsigned __int64 getApproximateTaskCount() const;
    MCAPI class std::thread::id getThreadId() const;
    MCAPI bool isIdle() const;
    MCAPI void queue(class std::shared_ptr<class BackgroundTaskBase>);
    MCAPI void requestStop(bool);
    MCAPI void resortPriorityQueue();
    MCAPI void start();
    MCAPI void wake();
    MCAPI static class BackgroundWorker* getLocal();

protected:

private:
    MCAPI bool _processNextTask();
    MCAPI enum BackgroundWorker::RunOneResult _runOneTask();
};