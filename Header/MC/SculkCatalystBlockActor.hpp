// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_SCULKCATALYSTBLOCKACTOR
#include "Extra/SculkCatalystBlockActorAPI.hpp"
#undef EXTRA_INCLUDE_PART_SCULKCATALYSTBLOCKACTOR
class SculkCatalystBlockActor {
#include "Extra/SculkCatalystBlockActorAPI.hpp"
public:    /*
    inline class BlockPos getOwnerPos() const{
        class BlockPos (SculkCatalystBlockActor::*rv)() const;
        *((void**)&rv) = dlsym("?getOwnerPos@SculkCatalystBlockActor@@UEBA?AVBlockPos@@XZ");
        return (this->*rv)();
    }
    inline void handleGameEvent(class GameEvent const& a0, class BlockPos const& a1, class Actor const* a2, class BlockSource& a3){
        void (SculkCatalystBlockActor::*rv)(class GameEvent const&, class BlockPos const&, class Actor const*, class BlockSource&);
        *((void**)&rv) = dlsym("?handleGameEvent@SculkCatalystBlockActor@@UEAAXAEBVGameEvent@@AEBVBlockPos@@PEBVActor@@AEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class GameEvent const&>(a0), std::forward<class BlockPos const&>(a1), std::forward<class Actor const*>(a2), std::forward<class BlockSource&>(a3));
    }
    inline bool isEventInRange(class GameEvent const& a0, class BlockPos const& a1) const{
        bool (SculkCatalystBlockActor::*rv)(class GameEvent const&, class BlockPos const&) const;
        *((void**)&rv) = dlsym("?isEventInRange@SculkCatalystBlockActor@@UEBA_NAEBVGameEvent@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class GameEvent const&>(a0), std::forward<class BlockPos const&>(a1));
    }
    inline void onRemoved(class BlockSource& a0){
        void (SculkCatalystBlockActor::*rv)(class BlockSource&);
        *((void**)&rv) = dlsym("?onRemoved@SculkCatalystBlockActor@@UEAAXAEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0));
    }
    inline void tick(class BlockSource& a0){
        void (SculkCatalystBlockActor::*rv)(class BlockSource&);
        *((void**)&rv) = dlsym("?tick@SculkCatalystBlockActor@@UEAAXAEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0));
    }
    */
    MCAPI static enum BlockActorType const TypeId;
    MCAPI static std::string const TypeString;

protected:

private:
};