// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "Tag.hpp"
#define EXTRA_INCLUDE_PART_COMPOUNDTAG
#include "Extra/CompoundTagAPI.hpp"
#undef EXTRA_INCLUDE_PART_COMPOUNDTAG
class CompoundTag : public Tag {
#include "Extra/CompoundTagAPI.hpp"
public:
    /*0*/ virtual ~CompoundTag();
    /*1*/ virtual void deleteChildren();
    /*2*/ virtual void write(class IDataOutput&) const;
    /*3*/ virtual void load(class IDataInput&);
    /*4*/ virtual std::string toString() const;
    /*5*/ virtual int /*enum Tag::Type*/ getId() const;
    /*6*/ virtual bool equals(class Tag const&) const;
    /*8*/ virtual void print(std::string const&, class PrintStream&) const;
    /*9*/ virtual std::unique_ptr<class Tag> copy() const;
    /*10*/ virtual unsigned __int64 hash() const;

public:
    MCAPI void append(class CompoundTag const&);
    MCAPI class std::_Tree_const_iterator<class std::_Tree_val<struct std::_Tree_simple_types<struct std::pair<std::string const, class CompoundTagVariant>>>> begin() const;
    MCAPI void clear();
    MCAPI class CompoundTag& operator=(class CompoundTag&&);
    MCAPI std::unique_ptr<class CompoundTag> clone() const;
    MCAPI bool contains(class gsl::basic_string_span<char const, -1>) const;
    MCAPI bool contains(class gsl::basic_string_span<char const, -1>, enum Tag::Type) const;
    MCAPI void deepCopy(class CompoundTag const&);
    MCAPI class std::_Tree_const_iterator<class std::_Tree_val<struct std::_Tree_simple_types<struct std::pair<std::string const, class CompoundTagVariant>>>> end() const;
    MCAPI class Tag* get(class gsl::basic_string_span<char const, -1>);
    MCAPI class Tag const* get(class gsl::basic_string_span<char const, -1>) const;
    MCAPI bool getBoolean(class gsl::basic_string_span<char const, -1>) const;
    MCAPI unsigned char getByte(class gsl::basic_string_span<char const, -1>) const;
    MCAPI struct TagMemoryChunk const& getByteArray(class gsl::basic_string_span<char const, -1>) const;
    MCAPI class CompoundTag* getCompound(class gsl::basic_string_span<char const, -1>);
    MCAPI class CompoundTag const* getCompound(class gsl::basic_string_span<char const, -1>) const;
    MCAPI float getFloat(class gsl::basic_string_span<char const, -1>) const;
    MCAPI int getInt(class gsl::basic_string_span<char const, -1>) const;
    MCAPI __int64 getInt64(class gsl::basic_string_span<char const, -1>) const;
    MCAPI class Int64Tag const* getInt64Tag(class gsl::basic_string_span<char const, -1>) const;
    MCAPI class Int64Tag* getInt64Tag(class gsl::basic_string_span<char const, -1>);
    MCAPI class IntTag const* getIntTag(class gsl::basic_string_span<char const, -1>) const;
    MCAPI class ListTag const* getList(class gsl::basic_string_span<char const, -1>) const;
    MCAPI class ListTag* getList(class gsl::basic_string_span<char const, -1>);
    MCAPI short getShort(class gsl::basic_string_span<char const, -1>) const;
    MCAPI std::string const& getString(class gsl::basic_string_span<char const, -1>) const;
    MCAPI bool isEmpty() const;
    MCAPI class Tag& put(std::string, class Tag&&);
    MCAPI class Tag* put(std::string, std::unique_ptr<class Tag>);
    MCAPI void putBoolean(std::string, bool);
    MCAPI unsigned char& putByte(std::string, unsigned char);
    MCAPI struct TagMemoryChunk& putByteArray(std::string, struct TagMemoryChunk);
    MCAPI class CompoundTag& putCompound(std::string, class CompoundTag);
    MCAPI class CompoundTag* putCompound(std::string, std::unique_ptr<class CompoundTag>);
    MCAPI float& putFloat(std::string, float);
    MCAPI int& putInt(std::string, int);
    MCAPI __int64& putInt64(std::string, __int64);
    MCAPI short& putShort(std::string, short);
    MCAPI std::string& putString(std::string, std::string);
    MCAPI class std::map<std::string, class CompoundTagVariant, struct std::less<void>, class std::allocator<struct std::pair<std::string const, class CompoundTagVariant>>> const& rawView() const;
    MCAPI bool remove(class gsl::basic_string_span<char const, -1>);
    MCAPI void rename(class gsl::basic_string_span<char const, -1>, std::string);
};