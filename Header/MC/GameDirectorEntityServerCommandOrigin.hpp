// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "ActorServerCommandOrigin.hpp"
#include "Json.hpp"
#define EXTRA_INCLUDE_PART_GAMEDIRECTORENTITYSERVERCOMMANDORIGIN
#include "Extra/GameDirectorEntityServerCommandOriginAPI.hpp"
#undef EXTRA_INCLUDE_PART_GAMEDIRECTORENTITYSERVERCOMMANDORIGIN
class GameDirectorEntityServerCommandOrigin : public ActorServerCommandOrigin {
#include "Extra/GameDirectorEntityServerCommandOriginAPI.hpp"
public:
    /*0*/ virtual ~GameDirectorEntityServerCommandOrigin();
    /*1*/ virtual std::string const& getRequestId() const;
    /*2*/ virtual class Level* getLevel() const;
    /*3*/ virtual int /*enum enum CommandPermissionLevel*/ getPermissionsLevel() const;
    /*4*/ virtual std::unique_ptr<class CommandOrigin> clone() const;
    /*5*/ virtual class std::optional<class BlockPos> getCursorHitBlockPos() const;
    /*6*/ virtual class std::optional<class Vec3> getCursorHitPos() const;
    /*7*/ virtual bool canUseAbility(int /*enum enum AbilitiesIndex*/) const;
    /*8*/ virtual bool canUseCommandsWithoutCheatsEnabled() const;
    /*9*/ virtual bool isSelectorExpansionAllowed() const;
    /*10*/ virtual unsigned char getSourceSubId() const;
    /*11*/ virtual void __unk_vfn_0();
    /*12*/ virtual void __unk_vfn_1();
    /*13*/ virtual void __unk_vfn_2();
    /*14*/ virtual void handleCommandOutputCallback(class Json::Value&&) const;
    /*15*/ virtual bool isValid() const;
    /*
    inline int \/*enum enum CommandPermissionLevel*\/ getPermissionsLevel() const{
        int \/*enum enum CommandPermissionLevel*\/ (GameDirectorEntityServerCommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?getPermissionsLevel@GameDirectorEntityServerCommandOrigin@@UEBA?AW4CommandPermissionLevel@@XZ");
        return (this->*rv)();
    }
    inline bool canUseCommandsWithoutCheatsEnabled() const{
        bool (GameDirectorEntityServerCommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?canUseCommandsWithoutCheatsEnabled@GameDirectorEntityServerCommandOrigin@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isSelectorExpansionAllowed() const{
        bool (GameDirectorEntityServerCommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?isSelectorExpansionAllowed@GameDirectorEntityServerCommandOrigin@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline int \/*enum enum CommandOriginType*\/ getOriginType() const{
        int \/*enum enum CommandOriginType*\/ (GameDirectorEntityServerCommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?getOriginType@GameDirectorEntityServerCommandOrigin@@UEBA?AW4CommandOriginType@@XZ");
        return (this->*rv)();
    }
    inline std::unique_ptr<class CommandOrigin> clone() const{
        std::unique_ptr<class CommandOrigin> (GameDirectorEntityServerCommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?clone@GameDirectorEntityServerCommandOrigin@@UEBA?AV?$unique_ptr@VCommandOrigin@@U?$default_delete@VCommandOrigin@@@std@@@std@@XZ");
        return (this->*rv)();
    }
    */
    MCAPI static std::unique_ptr<class GameDirectorEntityServerCommandOrigin> load(class CompoundTag const&, class Level&);

protected:

private:
};