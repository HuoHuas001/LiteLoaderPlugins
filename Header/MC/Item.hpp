// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "Json.hpp"
#define EXTRA_INCLUDE_PART_ITEM
#include "Extra/ItemAPI.hpp"
#undef EXTRA_INCLUDE_PART_ITEM
class Item {
#include "Extra/ItemAPI.hpp"
public:
    /*0*/ virtual ~Item();
    /*1*/ virtual bool initServer(class Json::Value&, class SemVersion const&);
    /*2*/ virtual void tearDown();
    /*3*/ virtual int getMaxUseDuration(class ItemStack const*) const;
    /*4*/ virtual void __unk_vfn_0();
    /*5*/ virtual void __unk_vfn_1();
    /*6*/ virtual void executeEvent(class ItemStackBase&, std::string const&, class RenderParams&) const;
    /*7*/ virtual void __unk_vfn_2();
    /*8*/ virtual bool isArmor() const;
    /*9*/ virtual bool isBlockPlanterItem() const;
    /*10*/ virtual void __unk_vfn_3();
    /*11*/ virtual bool isCamera() const;
    /*12*/ virtual void __unk_vfn_4();
    /*13*/ virtual bool isDamageable() const;
    /*14*/ virtual bool isDyeable() const;
    /*15*/ virtual bool isDye() const;
    /*16*/ virtual int /*enum enum ItemColor*/ getItemColor() const;
    /*17*/ virtual bool isFertilizer() const;
    /*18*/ virtual void __unk_vfn_5();
    /*19*/ virtual bool isThrowable() const;
    /*20*/ virtual bool isUseable() const;
    /*21*/ virtual class ItemComponent* getComponent(class HashedString const&) const;
    /*22*/ virtual class ICameraItemComponent* getCamera() const;
    /*23*/ virtual class IFoodItemComponent* getFood() const;
    /*24*/ virtual class FuelItemComponent* getFuel() const;
    /*25*/ virtual class Item& setMaxStackSize(unsigned char);
    /*26*/ virtual class Item& setStackedByData(bool);
    /*27*/ virtual class Item& setMaxDamage(int);
    /*28*/ virtual class Item& setHandEquipped();
    /*29*/ virtual class Item& setUseAnimation(int /*enum enum UseAnimation*/);
    /*30*/ virtual class Item& setMaxUseDuration(int);
    /*31*/ virtual class Item& setRequiresWorldBuilder(bool);
    /*32*/ virtual class Item& setExplodable(bool);
    /*33*/ virtual class Item& setFireResistant(bool);
    /*34*/ virtual class Item& setIsGlint(bool);
    /*35*/ virtual class Item& setShouldDespawn(bool);
    /*36*/ virtual void __unk_vfn_6();
    /*37*/ virtual bool canBeDepleted() const;
    /*38*/ virtual bool canDestroySpecial(class Block const&) const;
    /*39*/ virtual int getLevelDataForAuxValue(int) const;
    /*40*/ virtual bool isStackedByData() const;
    /*41*/ virtual short getMaxDamage() const;
    /*42*/ virtual int getAttackDamage() const;
    /*43*/ virtual bool isHandEquipped() const;
    /*44*/ virtual bool isGlint(class ItemStackBase const&) const;
    /*45*/ virtual void __unk_vfn_7();
    /*46*/ virtual void __unk_vfn_8();
    /*47*/ virtual void __unk_vfn_9();
    /*48*/ virtual bool isWearableThroughLootTable(class CompoundTag const*) const;
    /*49*/ virtual bool canDestroyInCreative() const;
    /*50*/ virtual bool isDestructive(int) const;
    /*51*/ virtual bool isLiquidClipItem(int) const;
    /*52*/ virtual bool shouldInteractionWithBlockBypassLiquid(class Block const&) const;
    /*53*/ virtual bool requiresInteract() const;
    /*54*/ virtual void appendFormattedHovertext(class ItemStackBase const&, class Level&, std::string&, bool) const;
    /*55*/ virtual bool isValidRepairItem(class ItemStackBase const&, class ItemStackBase const&, class BaseGameVersion const&) const;
    /*56*/ virtual int getEnchantSlot() const;
    /*57*/ virtual int getEnchantValue() const;
    /*58*/ virtual int getArmorValue() const;
    /*59*/ virtual void __unk_vfn_10();
    /*60*/ virtual bool isValidAuxValue(int) const;
    /*61*/ virtual int getDamageChance(int) const;
    /*62*/ virtual void __unk_vfn_11();
    /*63*/ virtual void __unk_vfn_12();
    /*64*/ virtual void __unk_vfn_13();
    /*65*/ virtual void __unk_vfn_14();
    /*66*/ virtual class mce::Color getColor(class CompoundTag const*, class ItemDescriptor const&) const;
    /*67*/ virtual bool hasCustomColor(class CompoundTag const*) const;
    /*68*/ virtual void __unk_vfn_15();
    /*69*/ virtual void clearColor(class CompoundTag*) const;
    /*70*/ virtual void __unk_vfn_16();
    /*71*/ virtual void __unk_vfn_17();
    /*72*/ virtual void __unk_vfn_18();
    /*73*/ virtual void __unk_vfn_19();
    /*74*/ virtual struct ActorDefinitionIdentifier getActorIdentifier(class ItemStack const&) const;
    /*75*/ virtual void __unk_vfn_20();
    /*76*/ virtual void __unk_vfn_21();
    /*77*/ virtual int buildIdAux(short, class CompoundTag const*) const;
    /*78*/ virtual bool canUseOnSimTick() const;
    /*79*/ virtual class ItemStack& use(class ItemStack&, class Player&) const;
    /*80*/ virtual bool dispense(class BlockSource&, class Container&, int, class Vec3 const&, unsigned char) const;
    /*81*/ virtual int /*enum enum ItemUseMethod*/ useTimeDepleted(class ItemStack&, class Level*, class Player*) const;
    /*82*/ virtual void releaseUsing(class ItemStack&, class Player*, int) const;
    /*83*/ virtual float getDestroySpeed(class ItemStackBase const&, class Block const&) const;
    /*84*/ virtual void hurtActor(class ItemStack&, class Actor&, class Mob&) const;
    /*85*/ virtual void hitActor(class ItemStack&, class Actor&, class Mob&) const;
    /*86*/ virtual void hitBlock(class ItemStack&, class Block const&, class BlockPos const&, class Mob&) const;
    /*87*/ virtual bool mineBlock(class ItemInstance&, class Block const&, int, int, int, class Actor*) const;
    /*88*/ virtual bool mineBlock(class ItemStack&, class Block const&, int, int, int, class Actor*) const;
    /*89*/ virtual void __unk_vfn_22();
    /*90*/ virtual std::string buildDescriptionId(class ItemDescriptor const&, class CompoundTag const*) const;
    /*91*/ virtual std::string buildEffectDescriptionName(class ItemStackBase const&) const;
    /*92*/ virtual std::string buildCategoryDescriptionName() const;
    /*93*/ virtual void readUserData(class ItemStackBase&, class IDataInput&, class ReadOnlyBinaryStream&) const;
    /*94*/ virtual void writeUserData(class ItemStackBase const&, class IDataOutput&) const;
    /*95*/ virtual unsigned char getMaxStackSize(class ItemDescriptor const&) const;
    /*96*/ virtual bool inventoryTick(class ItemStack&, class Level&, class Actor&, int, bool) const;
    /*97*/ virtual void refreshedInContainer(class ItemStackBase const&, class Level&) const;
    /*98*/ virtual class HashedString const& getCooldownType() const;
    /*99*/ virtual int getCooldownTime() const;
    /*100*/ virtual void fixupCommon(class ItemStackBase&) const;
    /*101*/ virtual void fixupCommon(class ItemStackBase&, class Level&) const;
    /*102*/ virtual short getDamageValue(class CompoundTag const*) const;
    /*103*/ virtual void setDamageValue(class ItemStackBase&, short) const;
    /*104*/ virtual void __unk_vfn_23();
    /*105*/ virtual void __unk_vfn_24();
    /*106*/ virtual bool validFishInteraction(int) const;
    /*107*/ virtual bool isSameItem(class ItemStackBase const&, class ItemStackBase const&) const;
    /*108*/ virtual void initClient(class Json::Value&, class SemVersion const&);
    /*109*/ virtual std::string getInteractText(class Player const&) const;
    /*110*/ virtual int getAnimationFrameFor(class Mob*, bool, class ItemStack const*, bool) const;
    /*111*/ virtual bool isEmissive(int) const;
    /*112*/ virtual struct Brightness getLightEmission(int) const;
    /*113*/ virtual struct TextureUVCoordinateSet const& getIcon(class ItemStackBase const&, int, bool) const;
    /*114*/ virtual int getIconYOffset() const;
    /*115*/ virtual class Item& setIcon(std::string const&, int);
    /*116*/ virtual class Item& setIcon(struct TextureUVCoordinateSet const&);
    /*117*/ virtual class Item& setIconAtlas(std::string const&, int);
    /*118*/ virtual bool canBeCharged() const;
    /*119*/ virtual void playSoundIncrementally(class ItemStack const&, class Mob&) const;
    /*120*/ virtual void __unk_vfn_25();
    /*121*/ virtual float getFurnaceBurnIntervalMultipler(class ItemStackBase const&) const;
    /*122*/ virtual float getFurnaceXPmultiplier(class ItemStackBase const&) const;
    /*123*/ virtual std::string getAuxValuesDescription() const;
    /*124*/ virtual bool _checkUseOnPermissions(class Actor&, class ItemStackBase&, unsigned char const&, class BlockPos const&) const;
    /*125*/ virtual bool _calculatePlacePos(class ItemStackBase&, class Actor&, unsigned char&, class BlockPos&) const;
    /*126*/ virtual bool _useOn(class ItemStack&, class Actor&, class BlockPos, unsigned char, float, float, float) const;
    /*
    inline bool inventoryTick(class ItemStack& a0, class Level& a1, class Actor& a2, int a3, bool a4) const{
        bool (Item::*rv)(class ItemStack&, class Level&, class Actor&, int, bool) const;
        *((void**)&rv) = dlsym("?inventoryTick@Item@@UEBA_NAEAVItemStack@@AEAVLevel@@AEAVActor@@H_N@Z");
        return (this->*rv)(std::forward<class ItemStack&>(a0), std::forward<class Level&>(a1), std::forward<class Actor&>(a2), std::forward<int>(a3), std::forward<bool>(a4));
    }
    inline bool requiresInteract() const{
        bool (Item::*rv)() const;
        *((void**)&rv) = dlsym("?requiresInteract@Item@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isMultiColorTinted(class ItemStack const& a0) const{
        bool (Item::*rv)(class ItemStack const&) const;
        *((void**)&rv) = dlsym("?isMultiColorTinted@Item@@UEBA_NAEBVItemStack@@@Z");
        return (this->*rv)(std::forward<class ItemStack const&>(a0));
    }
    inline bool isBlockPlanterItem() const{
        bool (Item::*rv)() const;
        *((void**)&rv) = dlsym("?isBlockPlanterItem@Item@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isDyeable() const{
        bool (Item::*rv)() const;
        *((void**)&rv) = dlsym("?isDyeable@Item@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isBucket() const{
        bool (Item::*rv)() const;
        *((void**)&rv) = dlsym("?isBucket@Item@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isActorPlacerItem() const{
        bool (Item::*rv)() const;
        *((void**)&rv) = dlsym("?isActorPlacerItem@Item@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isComponentBased() const{
        bool (Item::*rv)() const;
        *((void**)&rv) = dlsym("?isComponentBased@Item@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isUseable() const{
        bool (Item::*rv)() const;
        *((void**)&rv) = dlsym("?isUseable@Item@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isFertilizer() const{
        bool (Item::*rv)() const;
        *((void**)&rv) = dlsym("?isFertilizer@Item@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isDye() const{
        bool (Item::*rv)() const;
        *((void**)&rv) = dlsym("?isDye@Item@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool shouldInteractionWithBlockBypassLiquid(class Block const& a0) const{
        bool (Item::*rv)(class Block const&) const;
        *((void**)&rv) = dlsym("?shouldInteractionWithBlockBypassLiquid@Item@@UEBA_NAEBVBlock@@@Z");
        return (this->*rv)(std::forward<class Block const&>(a0));
    }
    inline bool isThrowable() const{
        bool (Item::*rv)() const;
        *((void**)&rv) = dlsym("?isThrowable@Item@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool hasCustomColor(class ItemStackBase const& a0) const{
        bool (Item::*rv)(class ItemStackBase const&) const;
        *((void**)&rv) = dlsym("?hasCustomColor@Item@@UEBA_NAEBVItemStackBase@@@Z");
        return (this->*rv)(std::forward<class ItemStackBase const&>(a0));
    }
    inline bool canBeCharged() const{
        bool (Item::*rv)() const;
        *((void**)&rv) = dlsym("?canBeCharged@Item@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool uniqueAuxValues() const{
        bool (Item::*rv)() const;
        *((void**)&rv) = dlsym("?uniqueAuxValues@Item@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isArmor() const{
        bool (Item::*rv)() const;
        *((void**)&rv) = dlsym("?isArmor@Item@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool validFishInteraction(int a0) const{
        bool (Item::*rv)(int) const;
        *((void**)&rv) = dlsym("?validFishInteraction@Item@@UEBA_NH@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline bool hasCustomColor(class CompoundTag const* a0) const{
        bool (Item::*rv)(class CompoundTag const*) const;
        *((void**)&rv) = dlsym("?hasCustomColor@Item@@UEBA_NPEBVCompoundTag@@@Z");
        return (this->*rv)(std::forward<class CompoundTag const*>(a0));
    }
    inline bool isComplex() const{
        bool (Item::*rv)() const;
        *((void**)&rv) = dlsym("?isComplex@Item@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isLiquidClipItem(int a0) const{
        bool (Item::*rv)(int) const;
        *((void**)&rv) = dlsym("?isLiquidClipItem@Item@@UEBA_NH@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline bool showsDurabilityInCreative() const{
        bool (Item::*rv)() const;
        *((void**)&rv) = dlsym("?showsDurabilityInCreative@Item@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isCandle() const{
        bool (Item::*rv)() const;
        *((void**)&rv) = dlsym("?isCandle@Item@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isMusicDisk() const{
        bool (Item::*rv)() const;
        *((void**)&rv) = dlsym("?isMusicDisk@Item@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isDestructive(int a0) const{
        bool (Item::*rv)(int) const;
        *((void**)&rv) = dlsym("?isDestructive@Item@@UEBA_NH@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline bool canDestroySpecial(class Block const& a0) const{
        bool (Item::*rv)(class Block const&) const;
        *((void**)&rv) = dlsym("?canDestroySpecial@Item@@UEBA_NAEBVBlock@@@Z");
        return (this->*rv)(std::forward<class Block const&>(a0));
    }
    inline bool isValidRepairItem(class ItemStackBase const& a0, class ItemStackBase const& a1, class BaseGameVersion const& a2) const{
        bool (Item::*rv)(class ItemStackBase const&, class ItemStackBase const&, class BaseGameVersion const&) const;
        *((void**)&rv) = dlsym("?isValidRepairItem@Item@@UEBA_NAEBVItemStackBase@@0AEBVBaseGameVersion@@@Z");
        return (this->*rv)(std::forward<class ItemStackBase const&>(a0), std::forward<class ItemStackBase const&>(a1), std::forward<class BaseGameVersion const&>(a2));
    }
    inline bool isWearableThroughLootTable(class CompoundTag const* a0) const{
        bool (Item::*rv)(class CompoundTag const*) const;
        *((void**)&rv) = dlsym("?isWearableThroughLootTable@Item@@UEBA_NPEBVCompoundTag@@@Z");
        return (this->*rv)(std::forward<class CompoundTag const*>(a0));
    }
    inline bool isPattern() const{
        bool (Item::*rv)() const;
        *((void**)&rv) = dlsym("?isPattern@Item@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline int getArmorValue() const{
        int (Item::*rv)() const;
        *((void**)&rv) = dlsym("?getArmorValue@Item@@UEBAHXZ");
        return (this->*rv)();
    }
    inline int getPatternIndex() const{
        int (Item::*rv)() const;
        *((void**)&rv) = dlsym("?getPatternIndex@Item@@UEBAHXZ");
        return (this->*rv)();
    }
    inline int getEnchantValue() const{
        int (Item::*rv)() const;
        *((void**)&rv) = dlsym("?getEnchantValue@Item@@UEBAHXZ");
        return (this->*rv)();
    }
    inline class FuelItemComponent const* getFuel() const{
        class FuelItemComponent const* (Item::*rv)() const;
        *((void**)&rv) = dlsym("?getFuel@Item@@UEBAPEBVFuelItemComponent@@XZ");
        return (this->*rv)();
    }
    inline int getAnimationFrameFor(class Mob* a0, bool a1, class ItemStack const* a2, bool a3) const{
        int (Item::*rv)(class Mob*, bool, class ItemStack const*, bool) const;
        *((void**)&rv) = dlsym("?getAnimationFrameFor@Item@@UEBAHPEAVMob@@_NPEBVItemStack@@_N@Z");
        return (this->*rv)(std::forward<class Mob*>(a0), std::forward<bool>(a1), std::forward<class ItemStack const*>(a2), std::forward<bool>(a3));
    }
    inline int getLevelDataForAuxValue(int a0) const{
        int (Item::*rv)(int) const;
        *((void**)&rv) = dlsym("?getLevelDataForAuxValue@Item@@UEBAHH@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline class ItemComponent* getComponent(class HashedString const& a0) const{
        class ItemComponent* (Item::*rv)(class HashedString const&) const;
        *((void**)&rv) = dlsym("?getComponent@Item@@UEBAPEAVItemComponent@@AEBVHashedString@@@Z");
        return (this->*rv)(std::forward<class HashedString const&>(a0));
    }
    inline int getEnchantSlot() const{
        int (Item::*rv)() const;
        *((void**)&rv) = dlsym("?getEnchantSlot@Item@@UEBAHXZ");
        return (this->*rv)();
    }
    inline int getAttackDamage() const{
        int (Item::*rv)() const;
        *((void**)&rv) = dlsym("?getAttackDamage@Item@@UEBAHXZ");
        return (this->*rv)();
    }
    inline int getIconYOffset() const{
        int (Item::*rv)() const;
        *((void**)&rv) = dlsym("?getIconYOffset@Item@@UEBAHXZ");
        return (this->*rv)();
    }
    inline void playSoundIncrementally(class ItemStack const& a0, class Mob& a1) const{
        void (Item::*rv)(class ItemStack const&, class Mob&) const;
        *((void**)&rv) = dlsym("?playSoundIncrementally@Item@@UEBAXAEBVItemStack@@AEAVMob@@@Z");
        return (this->*rv)(std::forward<class ItemStack const&>(a0), std::forward<class Mob&>(a1));
    }
    inline void refreshedInContainer(class ItemStackBase const& a0, class Level& a1) const{
        void (Item::*rv)(class ItemStackBase const&, class Level&) const;
        *((void**)&rv) = dlsym("?refreshedInContainer@Item@@UEBAXAEBVItemStackBase@@AEAVLevel@@@Z");
        return (this->*rv)(std::forward<class ItemStackBase const&>(a0), std::forward<class Level&>(a1));
    }
    inline void saveAdditionalData(class ItemStackBase const& a0, class CompoundTag& a1) const{
        void (Item::*rv)(class ItemStackBase const&, class CompoundTag&) const;
        *((void**)&rv) = dlsym("?saveAdditionalData@Item@@UEBAXAEBVItemStackBase@@AEAVCompoundTag@@@Z");
        return (this->*rv)(std::forward<class ItemStackBase const&>(a0), std::forward<class CompoundTag&>(a1));
    }
    inline void playSoundIncrementally(class ItemInstance const& a0, class Mob& a1) const{
        void (Item::*rv)(class ItemInstance const&, class Mob&) const;
        *((void**)&rv) = dlsym("?playSoundIncrementally@Item@@UEBAXAEBVItemInstance@@AEAVMob@@@Z");
        return (this->*rv)(std::forward<class ItemInstance const&>(a0), std::forward<class Mob&>(a1));
    }
    inline void readAdditionalData(class ItemStackBase& a0, class CompoundTag const& a1) const{
        void (Item::*rv)(class ItemStackBase&, class CompoundTag const&) const;
        *((void**)&rv) = dlsym("?readAdditionalData@Item@@UEBAXAEAVItemStackBase@@AEBVCompoundTag@@@Z");
        return (this->*rv)(std::forward<class ItemStackBase&>(a0), std::forward<class CompoundTag const&>(a1));
    }
    inline void executeEvent(class ItemStackBase& a0, std::string const& a1, class RenderParams& a2) const{
        void (Item::*rv)(class ItemStackBase&, std::string const&, class RenderParams&) const;
        *((void**)&rv) = dlsym("?executeEvent@Item@@UEBAXAEAVItemStackBase@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVRenderParams@@@Z");
        return (this->*rv)(std::forward<class ItemStackBase&>(a0), std::forward<std::string const&>(a1), std::forward<class RenderParams&>(a2));
    }
    inline void hitActor(class ItemStack& a0, class Actor& a1, class Mob& a2) const{
        void (Item::*rv)(class ItemStack&, class Actor&, class Mob&) const;
        *((void**)&rv) = dlsym("?hitActor@Item@@UEBAXAEAVItemStack@@AEAVActor@@AEAVMob@@@Z");
        return (this->*rv)(std::forward<class ItemStack&>(a0), std::forward<class Actor&>(a1), std::forward<class Mob&>(a2));
    }
    inline void tearDown(){
        void (Item::*rv)();
        *((void**)&rv) = dlsym("?tearDown@Item@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void hitBlock(class ItemStack& a0, class Block const& a1, class BlockPos const& a2, class Mob& a3) const{
        void (Item::*rv)(class ItemStack&, class Block const&, class BlockPos const&, class Mob&) const;
        *((void**)&rv) = dlsym("?hitBlock@Item@@UEBAXAEAVItemStack@@AEBVBlock@@AEBVBlockPos@@AEAVMob@@@Z");
        return (this->*rv)(std::forward<class ItemStack&>(a0), std::forward<class Block const&>(a1), std::forward<class BlockPos const&>(a2), std::forward<class Mob&>(a3));
    }
    inline void clearColor(class CompoundTag* a0) const{
        void (Item::*rv)(class CompoundTag*) const;
        *((void**)&rv) = dlsym("?clearColor@Item@@UEBAXPEAVCompoundTag@@@Z");
        return (this->*rv)(std::forward<class CompoundTag*>(a0));
    }
    inline void setColor(class ItemStackBase& a0, class mce::Color const& a1) const{
        void (Item::*rv)(class ItemStackBase&, class mce::Color const&) const;
        *((void**)&rv) = dlsym("?setColor@Item@@UEBAXAEAVItemStackBase@@AEBVColor@mce@@@Z");
        return (this->*rv)(std::forward<class ItemStackBase&>(a0), std::forward<class mce::Color const&>(a1));
    }
    inline void clearColor(class ItemStackBase& a0) const{
        void (Item::*rv)(class ItemStackBase&) const;
        *((void**)&rv) = dlsym("?clearColor@Item@@UEBAXAEAVItemStackBase@@@Z");
        return (this->*rv)(std::forward<class ItemStackBase&>(a0));
    }
    inline bool canUseOnSimTick() const{
        bool (Item::*rv)() const;
        *((void**)&rv) = dlsym("?canUseOnSimTick@Item@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool canDestroyInCreative() const{
        bool (Item::*rv)() const;
        *((void**)&rv) = dlsym("?canDestroyInCreative@Item@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool _calculatePlacePos(class ItemStackBase& a0, class Actor& a1, unsigned char& a2, class BlockPos& a3) const{
        bool (Item::*rv)(class ItemStackBase&, class Actor&, unsigned char&, class BlockPos&) const;
        *((void**)&rv) = dlsym("?_calculatePlacePos@Item@@EEBA_NAEAVItemStackBase@@AEAVActor@@AEAEAEAVBlockPos@@@Z");
        return (this->*rv)(std::forward<class ItemStackBase&>(a0), std::forward<class Actor&>(a1), std::forward<unsigned char&>(a2), std::forward<class BlockPos&>(a3));
    }
    inline bool isValidAuxValue(int a0) const{
        bool (Item::*rv)(int) const;
        *((void**)&rv) = dlsym("?isValidAuxValue@Item@@UEBA_NH@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline std::string getAuxValuesDescription() const{
        std::string (Item::*rv)() const;
        *((void**)&rv) = dlsym("?getAuxValuesDescription@Item@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ");
        return (this->*rv)();
    }
    inline float getDestroySpeed(class ItemStackBase const& a0, class Block const& a1) const{
        float (Item::*rv)(class ItemStackBase const&, class Block const&) const;
        *((void**)&rv) = dlsym("?getDestroySpeed@Item@@UEBAMAEBVItemStackBase@@AEBVBlock@@@Z");
        return (this->*rv)(std::forward<class ItemStackBase const&>(a0), std::forward<class Block const&>(a1));
    }
    inline float getViewDamping() const{
        float (Item::*rv)() const;
        *((void**)&rv) = dlsym("?getViewDamping@Item@@UEBAMXZ");
        return (this->*rv)();
    }
    inline int \/*enum enum BlockShape*\/ getBlockShape() const{
        int \/*enum enum BlockShape*\/ (Item::*rv)() const;
        *((void**)&rv) = dlsym("?getBlockShape@Item@@UEBA?AW4BlockShape@@XZ");
        return (this->*rv)();
    }
    inline bool _checkUseOnPermissions(class Actor& a0, class ItemStackBase& a1, unsigned char const& a2, class BlockPos const& a3) const{
        bool (Item::*rv)(class Actor&, class ItemStackBase&, unsigned char const&, class BlockPos const&) const;
        *((void**)&rv) = dlsym("?_checkUseOnPermissions@Item@@EEBA_NAEAVActor@@AEAVItemStackBase@@AEBEAEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class Actor&>(a0), std::forward<class ItemStackBase&>(a1), std::forward<unsigned char const&>(a2), std::forward<class BlockPos const&>(a3));
    }
    inline bool _useOn(class ItemStack& a0, class Actor& a1, class BlockPos a2, unsigned char a3, float a4, float a5, float a6) const{
        bool (Item::*rv)(class ItemStack&, class Actor&, class BlockPos, unsigned char, float, float, float) const;
        *((void**)&rv) = dlsym("?_useOn@Item@@EEBA_NAEAVItemStack@@AEAVActor@@VBlockPos@@EMMM@Z");
        return (this->*rv)(std::forward<class ItemStack&>(a0), std::forward<class Actor&>(a1), std::forward<class BlockPos>(a2), std::forward<unsigned char>(a3), std::forward<float>(a4), std::forward<float>(a5), std::forward<float>(a6));
    }
    inline void appendFormattedHovertext(class ItemStackBase const& a0, class Level& a1, std::string& a2, bool a3) const{
        void (Item::*rv)(class ItemStackBase const&, class Level&, std::string&, bool) const;
        *((void**)&rv) = dlsym("?appendFormattedHovertext@Item@@UEBAXAEBVItemStackBase@@AEAVLevel@@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z");
        return (this->*rv)(std::forward<class ItemStackBase const&>(a0), std::forward<class Level&>(a1), std::forward<std::string&>(a2), std::forward<bool>(a3));
    }
    inline std::string buildCategoryDescriptionName() const{
        std::string (Item::*rv)() const;
        *((void**)&rv) = dlsym("?buildCategoryDescriptionName@Item@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ");
        return (this->*rv)();
    }
    inline std::string buildDescriptionId(class ItemDescriptor const& a0, class CompoundTag const* a1) const{
        std::string (Item::*rv)(class ItemDescriptor const&, class CompoundTag const*) const;
        *((void**)&rv) = dlsym("?buildDescriptionId@Item@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBVItemDescriptor@@PEBVCompoundTag@@@Z");
        return (this->*rv)(std::forward<class ItemDescriptor const&>(a0), std::forward<class CompoundTag const*>(a1));
    }
    inline std::string buildDescriptionName(class ItemStackBase const& a0) const{
        std::string (Item::*rv)(class ItemStackBase const&) const;
        *((void**)&rv) = dlsym("?buildDescriptionName@Item@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBVItemStackBase@@@Z");
        return (this->*rv)(std::forward<class ItemStackBase const&>(a0));
    }
    inline std::string buildEffectDescriptionName(class ItemStackBase const& a0) const{
        std::string (Item::*rv)(class ItemStackBase const&) const;
        *((void**)&rv) = dlsym("?buildEffectDescriptionName@Item@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBVItemStackBase@@@Z");
        return (this->*rv)(std::forward<class ItemStackBase const&>(a0));
    }
    inline int buildIdAux(short a0, class CompoundTag const* a1) const{
        int (Item::*rv)(short, class CompoundTag const*) const;
        *((void**)&rv) = dlsym("?buildIdAux@Item@@UEBAHFPEBVCompoundTag@@@Z");
        return (this->*rv)(std::forward<short>(a0), std::forward<class CompoundTag const*>(a1));
    }
    inline bool canBeDepleted() const{
        bool (Item::*rv)() const;
        *((void**)&rv) = dlsym("?canBeDepleted@Item@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool dispense(class BlockSource& a0, class Container& a1, int a2, class Vec3 const& a3, unsigned char a4) const{
        bool (Item::*rv)(class BlockSource&, class Container&, int, class Vec3 const&, unsigned char) const;
        *((void**)&rv) = dlsym("?dispense@Item@@UEBA_NAEAVBlockSource@@AEAVContainer@@HAEBVVec3@@E@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0), std::forward<class Container&>(a1), std::forward<int>(a2), std::forward<class Vec3 const&>(a3), std::forward<unsigned char>(a4));
    }
    inline void fixupCommon(class ItemStackBase& a0) const{
        void (Item::*rv)(class ItemStackBase&) const;
        *((void**)&rv) = dlsym("?fixupCommon@Item@@UEBAXAEAVItemStackBase@@@Z");
        return (this->*rv)(std::forward<class ItemStackBase&>(a0));
    }
    inline void fixupCommon(class ItemStackBase& a0, class Level& a1) const{
        void (Item::*rv)(class ItemStackBase&, class Level&) const;
        *((void**)&rv) = dlsym("?fixupCommon@Item@@UEBAXAEAVItemStackBase@@AEAVLevel@@@Z");
        return (this->*rv)(std::forward<class ItemStackBase&>(a0), std::forward<class Level&>(a1));
    }
    inline struct ActorDefinitionIdentifier getActorIdentifier(class ItemStack const& a0) const{
        struct ActorDefinitionIdentifier (Item::*rv)(class ItemStack const&) const;
        *((void**)&rv) = dlsym("?getActorIdentifier@Item@@UEBA?AUActorDefinitionIdentifier@@AEBVItemStack@@@Z");
        return (this->*rv)(std::forward<class ItemStack const&>(a0));
    }
    inline class mce::Color getBaseColor(class ItemStack const& a0) const{
        class mce::Color (Item::*rv)(class ItemStack const&) const;
        *((void**)&rv) = dlsym("?getBaseColor@Item@@UEBA?AVColor@mce@@AEBVItemStack@@@Z");
        return (this->*rv)(std::forward<class ItemStack const&>(a0));
    }
    inline class mce::Color getColor(class CompoundTag const* a0, class ItemDescriptor const& a1) const{
        class mce::Color (Item::*rv)(class CompoundTag const*, class ItemDescriptor const&) const;
        *((void**)&rv) = dlsym("?getColor@Item@@UEBA?AVColor@mce@@PEBVCompoundTag@@AEBVItemDescriptor@@@Z");
        return (this->*rv)(std::forward<class CompoundTag const*>(a0), std::forward<class ItemDescriptor const&>(a1));
    }
    inline class mce::Color getSecondaryColor(class ItemStack const& a0) const{
        class mce::Color (Item::*rv)(class ItemStack const&) const;
        *((void**)&rv) = dlsym("?getSecondaryColor@Item@@UEBA?AVColor@mce@@AEBVItemStack@@@Z");
        return (this->*rv)(std::forward<class ItemStack const&>(a0));
    }
    inline class ICameraItemComponent* getCamera() const{
        class ICameraItemComponent* (Item::*rv)() const;
        *((void**)&rv) = dlsym("?getCamera@Item@@UEBAPEAVICameraItemComponent@@XZ");
        return (this->*rv)();
    }
    inline int getCooldownTime() const{
        int (Item::*rv)() const;
        *((void**)&rv) = dlsym("?getCooldownTime@Item@@UEBAHXZ");
        return (this->*rv)();
    }
    inline class HashedString const& getCooldownType() const{
        class HashedString const& (Item::*rv)() const;
        *((void**)&rv) = dlsym("?getCooldownType@Item@@UEBAAEBVHashedString@@XZ");
        return (this->*rv)();
    }
    inline int getDamageChance(int a0) const{
        int (Item::*rv)(int) const;
        *((void**)&rv) = dlsym("?getDamageChance@Item@@UEBAHH@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline short getDamageValue(class CompoundTag const* a0) const{
        short (Item::*rv)(class CompoundTag const*) const;
        *((void**)&rv) = dlsym("?getDamageValue@Item@@UEBAFPEBVCompoundTag@@@Z");
        return (this->*rv)(std::forward<class CompoundTag const*>(a0));
    }
    inline class IFoodItemComponent* getFood() const{
        class IFoodItemComponent* (Item::*rv)() const;
        *((void**)&rv) = dlsym("?getFood@Item@@UEBAPEAVIFoodItemComponent@@XZ");
        return (this->*rv)();
    }
    inline float getFurnaceBurnIntervalMultipler(class ItemStackBase const& a0) const{
        float (Item::*rv)(class ItemStackBase const&) const;
        *((void**)&rv) = dlsym("?getFurnaceBurnIntervalMultipler@Item@@UEBAMAEBVItemStackBase@@@Z");
        return (this->*rv)(std::forward<class ItemStackBase const&>(a0));
    }
    inline float getFurnaceXPmultiplier(class ItemStackBase const& a0) const{
        float (Item::*rv)(class ItemStackBase const&) const;
        *((void**)&rv) = dlsym("?getFurnaceXPmultiplier@Item@@UEBAMAEBVItemStackBase@@@Z");
        return (this->*rv)(std::forward<class ItemStackBase const&>(a0));
    }
    inline struct TextureUVCoordinateSet const& getIcon(class ItemStackBase const& a0, int a1, bool a2) const{
        struct TextureUVCoordinateSet const& (Item::*rv)(class ItemStackBase const&, int, bool) const;
        *((void**)&rv) = dlsym("?getIcon@Item@@UEBAAEBUTextureUVCoordinateSet@@AEBVItemStackBase@@H_N@Z");
        return (this->*rv)(std::forward<class ItemStackBase const&>(a0), std::forward<int>(a1), std::forward<bool>(a2));
    }
    inline int \/*enum enum InHandUpdateType*\/ getInHandUpdateType(class Player const& a0, class ItemStack const& a1, class ItemStack const& a2, bool a3, bool a4) const{
        int \/*enum enum InHandUpdateType*\/ (Item::*rv)(class Player const&, class ItemStack const&, class ItemStack const&, bool, bool) const;
        *((void**)&rv) = dlsym("?getInHandUpdateType@Item@@UEBA?AW4InHandUpdateType@@AEBVPlayer@@AEBVItemStack@@1_N2@Z");
        return (this->*rv)(std::forward<class Player const&>(a0), std::forward<class ItemStack const&>(a1), std::forward<class ItemStack const&>(a2), std::forward<bool>(a3), std::forward<bool>(a4));
    }
    inline int \/*enum enum InHandUpdateType*\/ getInHandUpdateType(class Player const& a0, class ItemInstance const& a1, class ItemInstance const& a2, bool a3, bool a4) const{
        int \/*enum enum InHandUpdateType*\/ (Item::*rv)(class Player const&, class ItemInstance const&, class ItemInstance const&, bool, bool) const;
        *((void**)&rv) = dlsym("?getInHandUpdateType@Item@@UEBA?AW4InHandUpdateType@@AEBVPlayer@@AEBVItemInstance@@1_N2@Z");
        return (this->*rv)(std::forward<class Player const&>(a0), std::forward<class ItemInstance const&>(a1), std::forward<class ItemInstance const&>(a2), std::forward<bool>(a3), std::forward<bool>(a4));
    }
    inline std::string getInteractText(class Player const& a0) const{
        std::string (Item::*rv)(class Player const&) const;
        *((void**)&rv) = dlsym("?getInteractText@Item@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBVPlayer@@@Z");
        return (this->*rv)(std::forward<class Player const&>(a0));
    }
    inline int \/*enum enum ItemColor*\/ getItemColor() const{
        int \/*enum enum ItemColor*\/ (Item::*rv)() const;
        *((void**)&rv) = dlsym("?getItemColor@Item@@UEBA?AW4ItemColor@@XZ");
        return (this->*rv)();
    }
    inline struct Brightness getLightEmission(int a0) const{
        struct Brightness (Item::*rv)(int) const;
        *((void**)&rv) = dlsym("?getLightEmission@Item@@UEBA?AUBrightness@@H@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline short getMaxDamage() const{
        short (Item::*rv)() const;
        *((void**)&rv) = dlsym("?getMaxDamage@Item@@UEBAFXZ");
        return (this->*rv)();
    }
    inline unsigned char getMaxStackSize(class ItemDescriptor const& a0) const{
        unsigned char (Item::*rv)(class ItemDescriptor const&) const;
        *((void**)&rv) = dlsym("?getMaxStackSize@Item@@UEBAEAEBVItemDescriptor@@@Z");
        return (this->*rv)(std::forward<class ItemDescriptor const&>(a0));
    }
    inline int getMaxUseDuration(class ItemInstance const* a0) const{
        int (Item::*rv)(class ItemInstance const*) const;
        *((void**)&rv) = dlsym("?getMaxUseDuration@Item@@UEBAHPEBVItemInstance@@@Z");
        return (this->*rv)(std::forward<class ItemInstance const*>(a0));
    }
    inline int getMaxUseDuration(class ItemStack const* a0) const{
        int (Item::*rv)(class ItemStack const*) const;
        *((void**)&rv) = dlsym("?getMaxUseDuration@Item@@UEBAHPEBVItemStack@@@Z");
        return (this->*rv)(std::forward<class ItemStack const*>(a0));
    }
    inline void hurtActor(class ItemStack& a0, class Actor& a1, class Mob& a2) const{
        void (Item::*rv)(class ItemStack&, class Actor&, class Mob&) const;
        *((void**)&rv) = dlsym("?hurtActor@Item@@UEBAXAEAVItemStack@@AEAVActor@@AEAVMob@@@Z");
        return (this->*rv)(std::forward<class ItemStack&>(a0), std::forward<class Actor&>(a1), std::forward<class Mob&>(a2));
    }
    inline void initClient(class Json::Value& a0, class SemVersion const& a1){
        void (Item::*rv)(class Json::Value&, class SemVersion const&);
        *((void**)&rv) = dlsym("?initClient@Item@@UEAAXAEAVValue@Json@@AEBVSemVersion@@@Z");
        return (this->*rv)(std::forward<class Json::Value&>(a0), std::forward<class SemVersion const&>(a1));
    }
    inline bool initServer(class Json::Value& a0, class SemVersion const& a1){
        bool (Item::*rv)(class Json::Value&, class SemVersion const&);
        *((void**)&rv) = dlsym("?initServer@Item@@UEAA_NAEAVValue@Json@@AEBVSemVersion@@@Z");
        return (this->*rv)(std::forward<class Json::Value&>(a0), std::forward<class SemVersion const&>(a1));
    }
    inline bool isCamera() const{
        bool (Item::*rv)() const;
        *((void**)&rv) = dlsym("?isCamera@Item@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isDamageable() const{
        bool (Item::*rv)() const;
        *((void**)&rv) = dlsym("?isDamageable@Item@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isEmissive(int a0) const{
        bool (Item::*rv)(int) const;
        *((void**)&rv) = dlsym("?isEmissive@Item@@UEBA_NH@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline bool isFood() const{
        bool (Item::*rv)() const;
        *((void**)&rv) = dlsym("?isFood@Item@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isGlint(class ItemStackBase const& a0) const{
        bool (Item::*rv)(class ItemStackBase const&) const;
        *((void**)&rv) = dlsym("?isGlint@Item@@UEBA_NAEBVItemStackBase@@@Z");
        return (this->*rv)(std::forward<class ItemStackBase const&>(a0));
    }
    inline bool isHandEquipped() const{
        bool (Item::*rv)() const;
        *((void**)&rv) = dlsym("?isHandEquipped@Item@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isSameItem(class ItemStackBase const& a0, class ItemStackBase const& a1) const{
        bool (Item::*rv)(class ItemStackBase const&, class ItemStackBase const&) const;
        *((void**)&rv) = dlsym("?isSameItem@Item@@UEBA_NAEBVItemStackBase@@0@Z");
        return (this->*rv)(std::forward<class ItemStackBase const&>(a0), std::forward<class ItemStackBase const&>(a1));
    }
    inline bool isStackedByData() const{
        bool (Item::*rv)() const;
        *((void**)&rv) = dlsym("?isStackedByData@Item@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool mineBlock(class ItemInstance& a0, class Block const& a1, int a2, int a3, int a4, class Actor* a5) const{
        bool (Item::*rv)(class ItemInstance&, class Block const&, int, int, int, class Actor*) const;
        *((void**)&rv) = dlsym("?mineBlock@Item@@UEBA_NAEAVItemInstance@@AEBVBlock@@HHHPEAVActor@@@Z");
        return (this->*rv)(std::forward<class ItemInstance&>(a0), std::forward<class Block const&>(a1), std::forward<int>(a2), std::forward<int>(a3), std::forward<int>(a4), std::forward<class Actor*>(a5));
    }
    inline bool mineBlock(class ItemStack& a0, class Block const& a1, int a2, int a3, int a4, class Actor* a5) const{
        bool (Item::*rv)(class ItemStack&, class Block const&, int, int, int, class Actor*) const;
        *((void**)&rv) = dlsym("?mineBlock@Item@@UEBA_NAEAVItemStack@@AEBVBlock@@HHHPEAVActor@@@Z");
        return (this->*rv)(std::forward<class ItemStack&>(a0), std::forward<class Block const&>(a1), std::forward<int>(a2), std::forward<int>(a3), std::forward<int>(a4), std::forward<class Actor*>(a5));
    }
    inline void readUserData(class ItemStackBase& a0, class IDataInput& a1, class ReadOnlyBinaryStream& a2) const{
        void (Item::*rv)(class ItemStackBase&, class IDataInput&, class ReadOnlyBinaryStream&) const;
        *((void**)&rv) = dlsym("?readUserData@Item@@UEBAXAEAVItemStackBase@@AEAVIDataInput@@AEAVReadOnlyBinaryStream@@@Z");
        return (this->*rv)(std::forward<class ItemStackBase&>(a0), std::forward<class IDataInput&>(a1), std::forward<class ReadOnlyBinaryStream&>(a2));
    }
    inline void releaseUsing(class ItemStack& a0, class Player* a1, int a2) const{
        void (Item::*rv)(class ItemStack&, class Player*, int) const;
        *((void**)&rv) = dlsym("?releaseUsing@Item@@UEBAXAEAVItemStack@@PEAVPlayer@@H@Z");
        return (this->*rv)(std::forward<class ItemStack&>(a0), std::forward<class Player*>(a1), std::forward<int>(a2));
    }
    inline void setDamageValue(class ItemStackBase& a0, short a1) const{
        void (Item::*rv)(class ItemStackBase&, short) const;
        *((void**)&rv) = dlsym("?setDamageValue@Item@@UEBAXAEAVItemStackBase@@F@Z");
        return (this->*rv)(std::forward<class ItemStackBase&>(a0), std::forward<short>(a1));
    }
    inline class Item& setExplodable(bool a0){
        class Item& (Item::*rv)(bool);
        *((void**)&rv) = dlsym("?setExplodable@Item@@UEAAAEAV1@_N@Z");
        return (this->*rv)(std::forward<bool>(a0));
    }
    inline class Item& setFireResistant(bool a0){
        class Item& (Item::*rv)(bool);
        *((void**)&rv) = dlsym("?setFireResistant@Item@@UEAAAEAV1@_N@Z");
        return (this->*rv)(std::forward<bool>(a0));
    }
    inline class Item& setHandEquipped(){
        class Item& (Item::*rv)();
        *((void**)&rv) = dlsym("?setHandEquipped@Item@@UEAAAEAV1@XZ");
        return (this->*rv)();
    }
    inline class Item& setIcon(struct TextureUVCoordinateSet const& a0){
        class Item& (Item::*rv)(struct TextureUVCoordinateSet const&);
        *((void**)&rv) = dlsym("?setIcon@Item@@UEAAAEAV1@AEBUTextureUVCoordinateSet@@@Z");
        return (this->*rv)(std::forward<struct TextureUVCoordinateSet const&>(a0));
    }
    inline class Item& setIcon(std::string const& a0, int a1){
        class Item& (Item::*rv)(std::string const&, int);
        *((void**)&rv) = dlsym("?setIcon@Item@@UEAAAEAV1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z");
        return (this->*rv)(std::forward<std::string const&>(a0), std::forward<int>(a1));
    }
    inline class Item& setIconAtlas(std::string const& a0, int a1){
        class Item& (Item::*rv)(std::string const&, int);
        *((void**)&rv) = dlsym("?setIconAtlas@Item@@UEAAAEAV1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z");
        return (this->*rv)(std::forward<std::string const&>(a0), std::forward<int>(a1));
    }
    inline class Item& setIsGlint(bool a0){
        class Item& (Item::*rv)(bool);
        *((void**)&rv) = dlsym("?setIsGlint@Item@@UEAAAEAV1@_N@Z");
        return (this->*rv)(std::forward<bool>(a0));
    }
    inline class Item& setMaxDamage(int a0){
        class Item& (Item::*rv)(int);
        *((void**)&rv) = dlsym("?setMaxDamage@Item@@UEAAAEAV1@H@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline class Item& setMaxStackSize(unsigned char a0){
        class Item& (Item::*rv)(unsigned char);
        *((void**)&rv) = dlsym("?setMaxStackSize@Item@@UEAAAEAV1@E@Z");
        return (this->*rv)(std::forward<unsigned char>(a0));
    }
    inline class Item& setMaxUseDuration(int a0){
        class Item& (Item::*rv)(int);
        *((void**)&rv) = dlsym("?setMaxUseDuration@Item@@UEAAAEAV1@H@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline class Item& setRequiresWorldBuilder(bool a0){
        class Item& (Item::*rv)(bool);
        *((void**)&rv) = dlsym("?setRequiresWorldBuilder@Item@@UEAAAEAV1@_N@Z");
        return (this->*rv)(std::forward<bool>(a0));
    }
    inline class Item& setShouldDespawn(bool a0){
        class Item& (Item::*rv)(bool);
        *((void**)&rv) = dlsym("?setShouldDespawn@Item@@UEAAAEAV1@_N@Z");
        return (this->*rv)(std::forward<bool>(a0));
    }
    inline class Item& setStackedByData(bool a0){
        class Item& (Item::*rv)(bool);
        *((void**)&rv) = dlsym("?setStackedByData@Item@@UEAAAEAV1@_N@Z");
        return (this->*rv)(std::forward<bool>(a0));
    }
    inline class Item& setUseAnimation(int \/*enum enum UseAnimation*\/ a0){
        class Item& (Item::*rv)(int \/*enum enum UseAnimation*\/);
        *((void**)&rv) = dlsym("?setUseAnimation@Item@@UEAAAEAV1@W4UseAnimation@@@Z");
        return (this->*rv)(std::forward<int \/*enum enum UseAnimation*\/>(a0));
    }
    inline class ItemStack& use(class ItemStack& a0, class Player& a1) const{
        class ItemStack& (Item::*rv)(class ItemStack&, class Player&) const;
        *((void**)&rv) = dlsym("?use@Item@@UEBAAEAVItemStack@@AEAV2@AEAVPlayer@@@Z");
        return (this->*rv)(std::forward<class ItemStack&>(a0), std::forward<class Player&>(a1));
    }
    inline int \/*enum enum ItemUseMethod*\/ useTimeDepleted(class ItemStack& a0, class Level* a1, class Player* a2) const{
        int \/*enum enum ItemUseMethod*\/ (Item::*rv)(class ItemStack&, class Level*, class Player*) const;
        *((void**)&rv) = dlsym("?useTimeDepleted@Item@@UEBA?AW4ItemUseMethod@@AEAVItemStack@@PEAVLevel@@PEAVPlayer@@@Z");
        return (this->*rv)(std::forward<class ItemStack&>(a0), std::forward<class Level*>(a1), std::forward<class Player*>(a2));
    }
    inline void writeUserData(class ItemStackBase const& a0, class IDataOutput& a1) const{
        void (Item::*rv)(class ItemStackBase const&, class IDataOutput&) const;
        *((void**)&rv) = dlsym("?writeUserData@Item@@UEBAXAEBVItemStackBase@@AEAVIDataOutput@@@Z");
        return (this->*rv)(std::forward<class ItemStackBase const&>(a0), std::forward<class IDataOutput&>(a1));
    }
    */
    MCAPI void addOnResetBAIcallback(class std::function<void (void)> const&);
    MCAPI class Item& addTag(class HashedString const&);
    MCAPI bool allowOffhand() const;
    MCAPI class ItemDescriptor buildDescriptor(short, class CompoundTag const*) const;
    MCAPI float destroySpeedBonus(class ItemStackBase const&) const;
    MCAPI void fixupOnLoad(class ItemStackBase&) const;
    MCAPI void fixupOnLoad(class ItemStackBase&, class Level&) const;
    MCAPI std::vector<struct CommandName> getCommandNames() const;
    MCAPI enum CreativeItemCategory getCreativeCategory() const;
    MCAPI std::string const& getCreativeGroup() const;
    MCAPI std::string const& getDescriptionId() const;
    MCAPI int getFrameCount() const;
    MCAPI std::string const& getFullItemName() const;
    MCAPI class HashedString const& getFullNameHash() const;
    MCAPI short getId() const;
    MCAPI class WeakPtr<class BlockLegacy> const& getLegacyBlock() const;
    MCAPI std::string const& getNamespace() const;
    MCAPI class HashedString const& getRawNameHash() const;
    MCAPI std::string const& getRawNameId() const;
    MCAPI class BaseGameVersion const& getRequiredBaseGameVersion() const;
    MCAPI std::string getSerializedName() const;
    MCAPI enum UseAnimation getUseAnimation() const;
    MCAPI bool hasTag(class HashedString const&) const;
    MCAPI bool hasTag(unsigned __int64 const&) const;
    MCAPI bool isElytra() const;
    MCAPI bool isExplodable() const;
    MCAPI bool isFireResistant() const;
    MCAPI bool isNameTag() const;
    MCAPI bool isSeed() const;
    MCAPI class Item& setAllowOffhand(bool);
    MCAPI class Item& setCategory(enum CreativeItemCategory);
    MCAPI class Item& setCreativeGroup(std::string const&);
    MCAPI class Item& setDescriptionId(std::string const&);
    MCAPI class Item& setFurnaceBurnIntervalMultiplier(float);
    MCAPI class Item& setFurnaceXPmultiplier(float);
    MCAPI class Item& setIsMirroredArt(bool);
    MCAPI class Item& setMinRequiredBaseGameVersion(class BaseGameVersion const&);
    MCAPI bool shouldDespawn() const;
    MCAPI bool updateCustomBlockEntityTag(class BlockSource&, class ItemStackBase&, class BlockPos const&) const;
    MCAPI bool useOn(class ItemStack&, class Actor&, int, int, int, unsigned char, float, float, float) const;
    MCAPI static std::string const ICON_DESCRIPTION_PREFIX;
    MCAPI static std::string const TAG_DAMAGE;
    MCAPI static void addCreativeItem(class Block const&);
    MCAPI static void addCreativeItem(class ItemInstance const&);
    MCAPI static void addCreativeItem(class ItemStack const&);
    MCAPI static void addLooseCreativeItems(bool, class BaseGameVersion const&);
    MCAPI static void beginCreativeGroup(std::string const&, class ItemInstance const&);
    MCAPI static void beginCreativeGroup(std::string const&, short, short, class CompoundTag const*);
    MCAPI static void beginCreativeGroup(std::string const&, class Block const*, class CompoundTag const*);
    MCAPI static void endCreativeGroup();
    MCAPI static void endCreativeItemDefinitions(bool);
    MCAPI static struct TextureUVCoordinateSet const& getIconTextureUVSet(class TextureAtlasItem const&, int, int);
    MCAPI static class TextureAtlasItem const& getTextureItem(std::string const&);
    MCAPI static struct TextureUVCoordinateSet getTextureUVCoordinateSet(std::string const&, int);
    MCAPI static bool isElytra(class ItemDescriptor const&);
    MCAPI static bool isElytraBroken(int);
    MCAPI static bool isFlyEnabled(class ItemInstance const&);
    MCAPI static bool isSameTypeAndItem(class ItemStackBase const&, class ItemStackBase const&);
    MCAPI static bool const mGenerateDenyParticleEffect;
    MCAPI static struct TextureUVCoordinateSet mInvalidTextureUVCoordinateSet;
    MCAPI static class std::weak_ptr<class AtlasItemManager> mItemTextureItems;
    MCAPI static void setAtlasItemManager(class std::shared_ptr<class AtlasItemManager>);
    MCAPI static void startCreativeItemDefinitions(bool, class CreativeItemRegistry*);
    MCAPI static struct NewBlockID toBlockId(short);

protected:
    MCAPI void _helpChangeInventoryItemInPlace(class Actor&, class ItemStack&, class ItemStack&, enum ItemAcquisitionMethod) const;

private:
    MCAPI static void _addLooseCreativeItemsClient();
    MCAPI static std::unique_ptr<class std::set<short, struct std::less<short>, class std::allocator<short> >> mServerItemsUsedInCreativeItems;
};