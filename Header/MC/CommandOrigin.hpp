// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "Json.hpp"
#include "Bedrock.hpp"
#define EXTRA_INCLUDE_PART_COMMANDORIGIN
#include "Extra/CommandOriginAPI.hpp"
#undef EXTRA_INCLUDE_PART_COMMANDORIGIN
class CommandOrigin {
#include "Extra/CommandOriginAPI.hpp"
public:
    /*0*/ virtual ~CommandOrigin();
    /*1*/ virtual std::string const& getRequestId() const = 0;
    /*2*/ virtual std::string getName() const = 0;
    /*3*/ virtual class BlockPos getBlockPosition() const = 0;
    /*4*/ virtual class Vec3 getWorldPosition() const = 0;
    /*5*/ virtual class Level* getLevel() const = 0;
    /*6*/ virtual class Dimension* getDimension() const = 0;
    /*7*/ virtual class Actor* getEntity() const = 0;
    /*8*/ virtual int /*enum enum CommandPermissionLevel*/ getPermissionsLevel() const = 0;
    /*9*/ virtual std::unique_ptr<class CommandOrigin> clone() const = 0;
    /*10*/ virtual class std::optional<class BlockPos> getCursorHitBlockPos() const;
    /*11*/ virtual class std::optional<class Vec3> getCursorHitPos() const;
    /*12*/ virtual bool hasChatPerms() const;
    /*13*/ virtual bool hasTellPerms() const;
    /*14*/ virtual bool canUseAbility(int /*enum enum AbilitiesIndex*/) const;
    /*15*/ virtual bool isWorldBuilder() const;
    /*16*/ virtual bool canUseCommandsWithoutCheatsEnabled() const;
    /*17*/ virtual bool isSelectorExpansionAllowed() const;
    /*18*/ virtual class NetworkIdentifier const& getSourceId() const;
    /*19*/ virtual unsigned char getSourceSubId() const;
    /*20*/ virtual void __unk_vfn_0();
    /*21*/ virtual struct CommandOriginIdentity getIdentity() const;
    /*22*/ virtual void __unk_vfn_1() = 0;
    /*23*/ virtual struct CommandOriginData toCommandOriginData() const;
    /*24*/ virtual void __unk_vfn_2();
    /*25*/ virtual void handleCommandOutputCallback(class Json::Value&&) const;
    /*26*/ virtual class CompoundTag serialize() const;
    /*27*/ virtual bool isValid() const = 0;
    /*28*/ virtual void _setUUID(class mce::UUID const&);
    /*
    inline unsigned char getSourceSubId() const{
        unsigned char (CommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?getSourceSubId@CommandOrigin@@UEBAEXZ");
        return (this->*rv)();
    }
    inline bool canUseCommandsWithoutCheatsEnabled() const{
        bool (CommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?canUseCommandsWithoutCheatsEnabled@CommandOrigin@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline void handleCommandOutputCallback(class Json::Value&& a0) const{
        void (CommandOrigin::*rv)(class Json::Value&&) const;
        *((void**)&rv) = dlsym("?handleCommandOutputCallback@CommandOrigin@@UEBAX$$QEAVValue@Json@@@Z");
        return (this->*rv)(std::forward<class Json::Value&&>(a0));
    }
    inline class mce::UUID const& getUUID() const{
        class mce::UUID const& (CommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?getUUID@CommandOrigin@@UEBAAEBVUUID@mce@@XZ");
        return (this->*rv)();
    }
    inline class CommandOrigin const& getOutputReceiver() const{
        class CommandOrigin const& (CommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?getOutputReceiver@CommandOrigin@@UEBAAEBV1@XZ");
        return (this->*rv)();
    }
    inline bool canUseAbility(int \/*enum enum AbilitiesIndex*\/ a0) const{
        bool (CommandOrigin::*rv)(int \/*enum enum AbilitiesIndex*\/) const;
        *((void**)&rv) = dlsym("?canUseAbility@CommandOrigin@@UEBA_NW4AbilitiesIndex@@@Z");
        return (this->*rv)(std::forward<int \/*enum enum AbilitiesIndex*\/>(a0));
    }
    inline class std::optional<class BlockPos> getCursorHitBlockPos() const{
        class std::optional<class BlockPos> (CommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?getCursorHitBlockPos@CommandOrigin@@UEBA?AV?$optional@VBlockPos@@@std@@XZ");
        return (this->*rv)();
    }
    inline class std::optional<class Vec3> getCursorHitPos() const{
        class std::optional<class Vec3> (CommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?getCursorHitPos@CommandOrigin@@UEBA?AV?$optional@VVec3@@@std@@XZ");
        return (this->*rv)();
    }
    inline void _setUUID(class mce::UUID const& a0){
        void (CommandOrigin::*rv)(class mce::UUID const&);
        *((void**)&rv) = dlsym("?_setUUID@CommandOrigin@@MEAAXAEBVUUID@mce@@@Z");
        return (this->*rv)(std::forward<class mce::UUID const&>(a0));
    }
    inline struct CommandOriginIdentity getIdentity() const{
        struct CommandOriginIdentity (CommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?getIdentity@CommandOrigin@@UEBA?AUCommandOriginIdentity@@XZ");
        return (this->*rv)();
    }
    inline class NetworkIdentifier const& getSourceId() const{
        class NetworkIdentifier const& (CommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?getSourceId@CommandOrigin@@UEBAAEBVNetworkIdentifier@@XZ");
        return (this->*rv)();
    }
    inline bool hasChatPerms() const{
        bool (CommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?hasChatPerms@CommandOrigin@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool hasTellPerms() const{
        bool (CommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?hasTellPerms@CommandOrigin@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isSelectorExpansionAllowed() const{
        bool (CommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?isSelectorExpansionAllowed@CommandOrigin@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isWorldBuilder() const{
        bool (CommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?isWorldBuilder@CommandOrigin@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline class CompoundTag serialize() const{
        class CompoundTag (CommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?serialize@CommandOrigin@@UEBA?AVCompoundTag@@XZ");
        return (this->*rv)();
    }
    inline struct CommandOriginData toCommandOriginData() const{
        struct CommandOriginData (CommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?toCommandOriginData@CommandOrigin@@UEBA?AUCommandOriginData@@XZ");
        return (this->*rv)();
    }
    */
    MCAPI std::unique_ptr<class CommandArea> getAreaAt(class BlockPos const&, class BlockPos const&, bool) const;
    MCAPI std::unique_ptr<class CommandArea> getAreaAt(class BlockPos const&) const;
    MCAPI std::unique_ptr<class CommandArea> getAreaAtWithBuffer(class BlockPos const&, class BlockPos const&, bool) const;
    MCAPI std::unique_ptr<class CommandArea> getAreaAtWithBuffer(class BlockPos const&) const;
    MCAPI static std::unique_ptr<class CommandOrigin> fromCommandOriginData(struct CommandOriginData const&, class Bedrock::NonOwnerPointer<class ILevel> const&, class NetworkIdentifier const&, unsigned char);

protected:
    MCAPI static class NetworkIdentifier sUnknownSource;

private:
};