// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "Core.hpp"
#include "Bedrock.hpp"
#define EXTRA_INCLUDE_PART_SERVERINSTANCE
#include "Extra/ServerInstanceAPI.hpp"
#undef EXTRA_INCLUDE_PART_SERVERINSTANCE
class ServerInstance {
#include "Extra/ServerInstanceAPI.hpp"

public:
    MCAPI void disconnectAllClientsWithMessage(std::string);
    MCAPI bool enableItemStackNetManager() const;
    MCAPI bool initializeServer(class IMinecraftApp&, class AllowList&, class PermissionsFile*, class gsl::not_null<class Bedrock::NonOwnerPointer<class Core::FilePathManager>> const&, class std::chrono::duration<__int64, struct std::ratio<1, 1>>, std::string, std::string, std::string, class LevelSettings, int, bool, struct ConnectionDefinition, bool, std::vector<std::string> const&, std::string, class mce::UUID const&, class IMinecraftEventing&, class IResourcePackRepository&, class IContentTierManager const&, class ResourcePackManager&, class std::function<std::unique_ptr<class LevelStorage>(class Scheduler&)>, std::unique_ptr<class LevelLooseFileStorage>, std::string const&, class LevelData*, std::string, std::string, std::unique_ptr<class EducationOptions>, class ResourcePackManager*, class std::function<void(void)>, class std::function<void(void)>, class ServerMetrics*, class DebugEndPoint*, bool, class std::shared_ptr<class Core::FileStorageArea>, unsigned short, bool, bool, class std::optional<struct PlayerMovementSettings>, class std::optional<struct ScriptSettings>, class Experiments const&, enum TransportLayer, float);
    MCAPI void leaveGameSync();
    MCAPI void queueForServerThread(class std::function<void(void)>);
    MCAPI void setWakeupFrequency(int);
    MCAPI void startServerThread();

    MCAPI static class std::chrono::duration<__int64, struct std::ratio<1, 1000000000>> const SERVER_MAX_DELAY_BEFORE_SLOWDOWN;

private:
    MCAPI void _threadSafeExecute(class std::function<void(void)>);
    MCAPI void _update();
};