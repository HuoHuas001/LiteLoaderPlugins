// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "FilterTest.hpp"
#include "Json.hpp"
#define EXTRA_INCLUDE_PART_FILTERTESTDIMENSIONWEATHER
#include "Extra/FilterTestDimensionWeatherAPI.hpp"
#undef EXTRA_INCLUDE_PART_FILTERTESTDIMENSIONWEATHER
class FilterTestDimensionWeather : public FilterTest {
#include "Extra/FilterTestDimensionWeatherAPI.hpp"
public:
    /*0*/ virtual ~FilterTestDimensionWeather();
    /*1*/ virtual bool setup(struct FilterTest::Definition const&, struct FilterInputs const&);
    /*2*/ virtual bool evaluate(struct FilterContext const&) const;
    /*3*/ virtual void finalizeParsedValue(class IWorldRegistriesProvider&);
    /*4*/ virtual class gsl::basic_string_span<char const, -1> getName() const;
    /*5*/ virtual class Json::Value _serializeValue() const;
    /*
    inline class Json::Value _serializeValue() const{
        class Json::Value (FilterTestDimensionWeather::*rv)() const;
        *((void**)&rv) = dlsym("?_serializeValue@FilterTestDimensionWeather@@MEBA?AVValue@Json@@XZ");
        return (this->*rv)();
    }
    inline bool evaluate(struct FilterContext const& a0) const{
        bool (FilterTestDimensionWeather::*rv)(struct FilterContext const&) const;
        *((void**)&rv) = dlsym("?evaluate@FilterTestDimensionWeather@@UEBA_NAEBUFilterContext@@@Z");
        return (this->*rv)(std::forward<struct FilterContext const&>(a0));
    }
    inline class gsl::basic_string_span<char const, -1> getName() const{
        class gsl::basic_string_span<char const, -1> (FilterTestDimensionWeather::*rv)() const;
        *((void**)&rv) = dlsym("?getName@FilterTestDimensionWeather@@UEBA?AV?$basic_string_span@$$CBD$0?0@gsl@@XZ");
        return (this->*rv)();
    }
    inline bool setup(struct FilterTest::Definition const& a0, struct FilterInputs const& a1){
        bool (FilterTestDimensionWeather::*rv)(struct FilterTest::Definition const&, struct FilterInputs const&);
        *((void**)&rv) = dlsym("?setup@FilterTestDimensionWeather@@UEAA_NAEBUDefinition@FilterTest@@AEBUFilterInputs@@@Z");
        return (this->*rv)(std::forward<struct FilterTest::Definition const&>(a0), std::forward<struct FilterInputs const&>(a1));
    }
    */

protected:

private:
};