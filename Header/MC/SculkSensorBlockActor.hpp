// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "BlockActor.hpp"
#define EXTRA_INCLUDE_PART_SCULKSENSORBLOCKACTOR
#include "Extra/SculkSensorBlockActorAPI.hpp"
#undef EXTRA_INCLUDE_PART_SCULKSENSORBLOCKACTOR
class SculkSensorBlockActor : public BlockActor {
#include "Extra/SculkSensorBlockActorAPI.hpp"
public:
    /*0*/ virtual ~SculkSensorBlockActor();
    /*1*/ virtual void saveBlockData(class CompoundTag&, class BlockSource&) const;
    /*2*/ virtual void loadBlockData(class CompoundTag const&, class BlockSource&, class DataLoadHelper&);
    /*3*/ virtual void onCustomTagLoadDone(class BlockSource&);
    /*4*/ virtual void tick(class BlockSource&);
    /*5*/ virtual void onChanged(class BlockSource&);
    /*6*/ virtual void onPlace(class BlockSource&);
    /*7*/ virtual void __unk_vfn_0();
    /*8*/ virtual void onRemoved(class BlockSource&);
    /*9*/ virtual void triggerEvent(int, int);
    /*10*/ virtual void __unk_vfn_1();
    /*11*/ virtual void __unk_vfn_2();
    /*12*/ virtual void __unk_vfn_3();
    /*13*/ virtual void __unk_vfn_4();
    /*14*/ virtual class BlockActor* getCrackEntity(class BlockSource&, class BlockPos const&);
    /*15*/ virtual void __unk_vfn_5();
    /*16*/ virtual std::string getName() const;
    /*17*/ virtual std::string getImmersiveReaderText(class BlockSource&);
    /*18*/ virtual void __unk_vfn_6();
    /*19*/ virtual class PistonBlockActor* getOwningPiston(class BlockSource&);
    /*20*/ virtual void __unk_vfn_7();
    /*21*/ virtual void __unk_vfn_8();
    /*22*/ virtual void __unk_vfn_9();
    /*23*/ virtual void __unk_vfn_10();
    /*24*/ virtual void __unk_vfn_11();
    /*25*/ virtual void __unk_vfn_12();
    /*26*/ virtual std::unique_ptr<class BlockActorDataPacket> _getUpdatePacket(class BlockSource&);
    /*27*/ virtual void _onUpdatePacket(class CompoundTag const&, class BlockSource&);
    /*28*/ virtual bool _playerCanUpdate(class Player const&) const;
    /*
    inline void onRemoved(class BlockSource& a0){
        void (SculkSensorBlockActor::*rv)(class BlockSource&);
        *((void**)&rv) = dlsym("?onRemoved@SculkSensorBlockActor@@UEAAXAEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0));
    }
    inline void tick(class BlockSource& a0){
        void (SculkSensorBlockActor::*rv)(class BlockSource&);
        *((void**)&rv) = dlsym("?tick@SculkSensorBlockActor@@UEAAXAEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0));
    }
    */
    MCAPI int getLatestGameEventFrequency() const;
    MCAPI static enum BlockActorType const TypeId;
    MCAPI static std::string const TypeString;

protected:

private:
    MCAPI void _tryTriggerRedstoneSignal(class BlockSource&);
    MCAPI static class Block const& _getPoweredBlock();
};