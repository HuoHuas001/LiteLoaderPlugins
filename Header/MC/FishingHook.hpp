// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "Actor.hpp"
#define EXTRA_INCLUDE_PART_FISHINGHOOK
#include "Extra/FishingHookAPI.hpp"
#undef EXTRA_INCLUDE_PART_FISHINGHOOK
class FishingHook : public Actor {
#include "Extra/FishingHookAPI.hpp"
public:
    /*0*/ virtual void reloadHardcoded(int /*enum enum Actor::InitializationMethod*/, class VariantParameterList const&);
    /*1*/ virtual ~FishingHook();
    /*2*/ virtual bool isRuntimePredictedMovementEnabled() const;
    /*3*/ virtual void __unk_vfn_0();
    /*4*/ virtual float getInterpolatedHeadRot(float) const;
    /*5*/ virtual float getInterpolatedBodyYaw(float) const;
    /*6*/ virtual class Vec3 getInterpolatedRidingOffset(float) const;
    /*7*/ virtual void __unk_vfn_1();
    /*8*/ virtual void normalTick();
    /*9*/ virtual float getRidingHeight();
    /*10*/ virtual void __unk_vfn_2();
    /*11*/ virtual void __unk_vfn_3();
    /*12*/ virtual float getCameraOffset() const;
    /*13*/ virtual float getShadowRadius() const;
    /*14*/ virtual void __unk_vfn_4();
    /*15*/ virtual void __unk_vfn_5();
    /*16*/ virtual void playerTouch(class Player&);
    /*17*/ virtual bool isPickable();
    /*18*/ virtual void __unk_vfn_6();
    /*19*/ virtual bool isSleeping() const;
    /*20*/ virtual void setSleeping(bool);
    /*21*/ virtual void __unk_vfn_7();
    /*22*/ virtual bool isBlocking() const;
    /*23*/ virtual bool isDamageBlocked(class ActorDamageSource const&) const;
    /*24*/ virtual void __unk_vfn_8();
    /*25*/ virtual bool isSurfaceMob() const;
    /*26*/ virtual void __unk_vfn_9();
    /*27*/ virtual void __unk_vfn_10();
    /*28*/ virtual void __unk_vfn_11();
    /*29*/ virtual class Actor* findAttackTarget();
    /*30*/ virtual bool isValidTarget(class Actor*) const;
    /*31*/ virtual void adjustDamageAmount(int&) const;
    /*32*/ virtual void onTame();
    /*33*/ virtual void onFailedTame();
    /*34*/ virtual bool isJumping() const;
    /*35*/ virtual void vehicleLanded(class Vec3 const&, class Vec3 const&);
    /*36*/ virtual void animateHurt();
    /*37*/ virtual void onBounceStarted(class BlockPos const&, class Block const&);
    /*38*/ virtual void handleEntityEvent(int /*enum enum ActorEvent*/, int);
    /*39*/ virtual void __unk_vfn_12();
    /*40*/ virtual void awardKillScore(class Actor&, int);
    /*41*/ virtual int /*enum enum ArmorMaterialType*/ getArmorMaterialTypeInSlot(int /*enum enum ArmorSlot*/) const;
    /*42*/ virtual int /*enum enum ArmorTextureType*/ getArmorMaterialTextureTypeInSlot(int /*enum enum ArmorSlot*/) const;
    /*43*/ virtual float getArmorColorInSlot(int /*enum enum ArmorSlot*/, int) const;
    /*44*/ virtual void setEquippedSlot(int /*enum enum EquipmentSlot*/, class ItemStack const&);
    /*45*/ virtual bool save(class CompoundTag&);
    /*46*/ virtual class HashedString const& queryEntityRenderer() const;
    /*47*/ virtual struct ActorUniqueID getSourceUniqueID() const;
    /*48*/ virtual bool canFreeze() const;
    /*49*/ virtual int getPortalWaitTime() const;
    /*50*/ virtual bool canChangeDimensions() const;
    /*51*/ virtual void __unk_vfn_13();
    /*52*/ virtual struct ActorUniqueID getControllingPlayer() const;
    /*53*/ virtual bool canPickupItem(class ItemStack const&) const;
    /*54*/ virtual bool canBePulledIntoVehicle() const;
    /*55*/ virtual bool inCaravan() const;
    /*56*/ virtual void __unk_vfn_14();
    /*57*/ virtual bool canSynchronizeNewEntity() const;
    /*58*/ virtual void buildDebugInfo(std::string&) const;
    /*59*/ virtual int getDeathTime() const;
    /*60*/ virtual void swing();
    /*61*/ virtual void __unk_vfn_15();
    /*62*/ virtual void __unk_vfn_16();
    /*63*/ virtual float getYHeadRot() const;
    /*64*/ virtual bool isWorldBuilder() const;
    /*65*/ virtual void __unk_vfn_17();
    /*66*/ virtual bool isAdventure() const;
    /*67*/ virtual bool canDestroyBlock(class Block const&) const;
    /*68*/ virtual void setAuxValue(int);
    /*69*/ virtual void stopSpinAttack();
    /*70*/ virtual void __unk_vfn_18();
    /*71*/ virtual void __unk_vfn_19();
    /*72*/ virtual void updateEntitySpecificMolangVariables(class RenderParams&);
    /*73*/ virtual void __unk_vfn_20();
    /*74*/ virtual void __unk_vfn_21();
    /*75*/ virtual void _onSizeUpdated();
    /*
    inline bool save(class CompoundTag& a0){
        bool (FishingHook::*rv)(class CompoundTag&);
        *((void**)&rv) = dlsym("?save@FishingHook@@UEAA_NAEAVCompoundTag@@@Z");
        return (this->*rv)(std::forward<class CompoundTag&>(a0));
    }
    inline float getShadowRadius() const{
        float (FishingHook::*rv)() const;
        *((void**)&rv) = dlsym("?getShadowRadius@FishingHook@@UEBAMXZ");
        return (this->*rv)();
    }
    inline struct ActorUniqueID getSourceUniqueID() const{
        struct ActorUniqueID (FishingHook::*rv)() const;
        *((void**)&rv) = dlsym("?getSourceUniqueID@FishingHook@@UEBA?AUActorUniqueID@@XZ");
        return (this->*rv)();
    }
    inline void handleEntityEvent(int \/*enum enum ActorEvent*\/ a0, int a1){
        void (FishingHook::*rv)(int \/*enum enum ActorEvent*\/, int);
        *((void**)&rv) = dlsym("?handleEntityEvent@FishingHook@@UEAAXW4ActorEvent@@H@Z");
        return (this->*rv)(std::forward<int \/*enum enum ActorEvent*\/>(a0), std::forward<int>(a1));
    }
    inline void normalTick(){
        void (FishingHook::*rv)();
        *((void**)&rv) = dlsym("?normalTick@FishingHook@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void reloadHardcoded(int \/*enum enum Actor::InitializationMethod*\/ a0, class VariantParameterList const& a1){
        void (FishingHook::*rv)(int \/*enum enum Actor::InitializationMethod*\/, class VariantParameterList const&);
        *((void**)&rv) = dlsym("?reloadHardcoded@FishingHook@@MEAAXW4InitializationMethod@Actor@@AEBVVariantParameterList@@@Z");
        return (this->*rv)(std::forward<int \/*enum enum Actor::InitializationMethod*\/>(a0), std::forward<class VariantParameterList const&>(a1));
    }
    */
    MCAPI class Actor* getOwner();
    MCAPI int retrieve();
    MCAPI static float const BOBBER_SIZE;

protected:
    MCAPI void _fishPosEvent();
    MCAPI void _fishTeaseEvent();
    MCAPI void _fishhookEvent();
    MCAPI float _getWaterPercentage();
    MCAPI class HitResult _hitCheck();
    MCAPI void _pullCloser(class Actor&, float);
    MCAPI bool _serverHooked();
    MCAPI bool _serverLured();
    MCAPI void _updateGravity();
    MCAPI void _updateServer();

private:
};