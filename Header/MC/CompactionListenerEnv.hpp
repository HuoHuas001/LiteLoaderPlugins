// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_COMPACTIONLISTENERENV
#include "Extra/CompactionListenerEnvAPI.hpp"
#undef EXTRA_INCLUDE_PART_COMPACTIONLISTENERENV
class CompactionListenerEnv {
#include "Extra/CompactionListenerEnvAPI.hpp"
public:
    /*0*/ virtual ~CompactionListenerEnv();
    /*1*/ virtual void __unk_vfn_0();
    /*2*/ virtual void __unk_vfn_1();
    /*3*/ virtual void __unk_vfn_2();
    /*4*/ virtual void __unk_vfn_3();
    /*5*/ virtual void __unk_vfn_4();
    /*6*/ virtual void __unk_vfn_5();
    /*7*/ virtual void __unk_vfn_6();
    /*8*/ virtual void __unk_vfn_7();
    /*9*/ virtual void __unk_vfn_8();
    /*10*/ virtual void __unk_vfn_9();
    /*11*/ virtual void __unk_vfn_10();
    /*12*/ virtual void __unk_vfn_11();
    /*13*/ virtual void __unk_vfn_12();
    /*14*/ virtual void Schedule(void (*)(void*), void*);
    /*
    inline void Schedule(void (*a0)(void*), void* a1){
        void (CompactionListenerEnv::*rv)(void (*)(void*), void*);
        *((void**)&rv) = dlsym("?Schedule@CompactionListenerEnv@@UEAAXP6AXPEAX@Z0@Z");
        return (this->*rv)(std::forward<void (*)(void*)>(a0), std::forward<void*>(a1));
    }
    */

protected:

private:
};