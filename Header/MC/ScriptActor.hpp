// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "Scripting.hpp"
#include "ScriptObject.hpp"
#define EXTRA_INCLUDE_PART_SCRIPTACTOR
#include "Extra/ScriptActorAPI.hpp"
#undef EXTRA_INCLUDE_PART_SCRIPTACTOR
class ScriptActor : public ScriptObject {
#include "Extra/ScriptActorAPI.hpp"
public:
    /*0*/ virtual ~ScriptActor();
    /*4*/ virtual class Scripting::Result<std::string> getNameTag() const;
    /*5*/ virtual class Scripting::Result<void> setNameTag(std::string const&) const;
    /*6*/ virtual class Scripting::Result<bool> getSneaking() const;
    /*7*/ virtual class Scripting::Result<void> setSneaking(bool) const;

public:
    MCAPI class Scripting::Result<void> addEffect(class ScriptEffectType const&, int, int);
    MCAPI class Scripting::WeakTypedObjectHandle<class ScriptActorComponent> getComponent(class Scripting::WeakLifetimeScope, class std::unordered_map<std::string, std::unique_ptr<class IComponentFactory>, struct std::hash<std::string>, struct std::equal_to<std::string>, class std::allocator<struct std::pair<std::string const, std::unique_ptr<class IComponentFactory>>>> const&, std::string const&);
    MCAPI std::vector<class Scripting::WeakTypedObjectHandle<class ScriptActorComponent>> getComponents(class Scripting::WeakLifetimeScope, class std::unordered_map<std::string, std::unique_ptr<class IComponentFactory>, struct std::hash<std::string>, struct std::equal_to<std::string>, class std::allocator<struct std::pair<std::string const, std::unique_ptr<class IComponentFactory>>>> const&);
    MCAPI class Scripting::Result<class Scripting::StrongTypedObjectHandle<class ScriptMobEffectInstance>> getEffect(class ScriptEffectType const&);
    MCAPI class Scripting::Result<std::string> getId() const;
    MCAPI class Scripting::Result<class Vec3> getLocation() const;
    MCAPI class Scripting::Result<class Vec3> getVelocity() const;
    MCAPI class WeakRefT<struct EntityRefTraits> getWeakEntity() const;
    MCAPI bool hasComponent(class Scripting::WeakLifetimeScope, class std::unordered_map<std::string, std::unique_ptr<class IComponentFactory>, struct std::hash<std::string>, struct std::equal_to<std::string>, class std::allocator<struct std::pair<std::string const, std::unique_ptr<class IComponentFactory>>>> const&, std::string const&);
    MCAPI class Scripting::Result<void> kill() const;
    MCAPI class ScriptActor& operator=(class ScriptActor&&);
    MCAPI class Scripting::Result<void> triggerEvent(std::string const&) const;
    MCAPI class Actor* tryGetActor() const;

    MCAPI static void destroyHandle(struct ActorUniqueID const&, class Scripting::WeakLifetimeScope const&);
    MCAPI static class Scripting::StrongTypedObjectHandle<class ScriptActor> getHandle(class WeakEntityRef const&, class Scripting::WeakLifetimeScope const&);
    MCAPI static class Scripting::StrongTypedObjectHandle<class ScriptActor> getHandle(class Actor const*, class Scripting::WeakLifetimeScope const&);
};