// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "TreeHelper.hpp"
#define EXTRA_INCLUDE_PART_FANCYTREECANOPY
#include "Extra/FancyTreeCanopyAPI.hpp"
#undef EXTRA_INCLUDE_PART_FANCYTREECANOPY
class FancyTreeCanopy {
#include "Extra/FancyTreeCanopyAPI.hpp"
public:
    /*0*/ virtual ~FancyTreeCanopy();
    /*1*/ virtual class std::optional<class BlockPos> placeCanopy(class IBlockWorldGenAPI&, class BlockPos const&, class Random&, class RenderParams&, struct TreeHelper::TreeParams const&, std::vector<class BlockPos> const&) const;
    /*
    inline class std::optional<class BlockPos> placeCanopy(class IBlockWorldGenAPI& a0, class BlockPos const& a1, class Random& a2, class RenderParams& a3, struct TreeHelper::TreeParams const& a4, std::vector<class BlockPos> const& a5) const{
        class std::optional<class BlockPos> (FancyTreeCanopy::*rv)(class IBlockWorldGenAPI&, class BlockPos const&, class Random&, class RenderParams&, struct TreeHelper::TreeParams const&, std::vector<class BlockPos> const&) const;
        *((void**)&rv) = dlsym("?placeCanopy@FancyTreeCanopy@@UEBA?AV?$optional@VBlockPos@@@std@@AEAVIBlockWorldGenAPI@@AEBVBlockPos@@AEAVRandom@@AEAVRenderParams@@AEBUTreeParams@TreeHelper@@AEBV?$vector@VBlockPos@@V?$allocator@VBlockPos@@@std@@@3@@Z");
        return (this->*rv)(std::forward<class IBlockWorldGenAPI&>(a0), std::forward<class BlockPos const&>(a1), std::forward<class Random&>(a2), std::forward<class RenderParams&>(a3), std::forward<struct TreeHelper::TreeParams const&>(a4), std::forward<std::vector<class BlockPos> const&>(a5));
    }
    */

protected:

private:
    MCAPI class std::optional<class BlockPos> _fillLayer(class IBlockWorldGenAPI&, class BlockPos const&, class Block const*, int, struct TreeHelper::TreeParams const&) const;
};