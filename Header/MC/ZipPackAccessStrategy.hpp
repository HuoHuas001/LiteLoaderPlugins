// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "PackAccessStrategy.hpp"
#include "Core.hpp"
#define EXTRA_INCLUDE_PART_ZIPPACKACCESSSTRATEGY
#include "Extra/ZipPackAccessStrategyAPI.hpp"
#undef EXTRA_INCLUDE_PART_ZIPPACKACCESSSTRATEGY
class ZipPackAccessStrategy : public PackAccessStrategy {
#include "Extra/ZipPackAccessStrategyAPI.hpp"
public:
    /*0*/ virtual ~ZipPackAccessStrategy();
    /*1*/ virtual unsigned __int64 getPackSize() const;
    /*2*/ virtual void __unk_vfn_0();
    /*3*/ virtual void __unk_vfn_1();
    /*4*/ virtual bool isWritable() const;
    /*5*/ virtual void setIsTrusted(bool);
    /*6*/ virtual bool isTrusted() const;
    /*7*/ virtual bool hasAsset(class Core::Path const&, bool) const;
    /*8*/ virtual bool hasFolder(class Core::Path const&) const;
    /*9*/ virtual bool getAsset(class Core::Path const&, std::string&, bool) const;
    /*10*/ virtual bool deleteAsset(class Core::PathBuffer<std::string > const&);
    /*11*/ virtual bool writeAsset(class Core::Path const&, std::string const&);
    /*12*/ virtual void forEachIn(class Core::Path const&, class std::function<void (class Core::Path const&)>, bool) const;
    /*13*/ virtual void forEachInAssetSet(class Core::Path const&, class std::function<void (class Core::Path const&)>) const;
    /*14*/ virtual void __unk_vfn_2();
    /*15*/ virtual class Core::PathBuffer<std::string > const& getSubPath() const;
    /*16*/ virtual std::unique_ptr<class PackAccessStrategy> createSubPack(class Core::Path const&) const;
    /*17*/ virtual void __unk_vfn_3();
    /*18*/ virtual void unload();
    /*19*/ virtual class ContentIdentity readContentIdentity() const;
    /*
    inline int \/*enum enum PackAccessStrategyType*\/ getStrategyType() const{
        int \/*enum enum PackAccessStrategyType*\/ (ZipPackAccessStrategy::*rv)() const;
        *((void**)&rv) = dlsym("?getStrategyType@ZipPackAccessStrategy@@UEBA?AW4PackAccessStrategyType@@XZ");
        return (this->*rv)();
    }
    inline class ResourceLocation const& getPackLocation() const{
        class ResourceLocation const& (ZipPackAccessStrategy::*rv)() const;
        *((void**)&rv) = dlsym("?getPackLocation@ZipPackAccessStrategy@@UEBAAEBVResourceLocation@@XZ");
        return (this->*rv)();
    }
    inline std::string const& getPackName() const{
        std::string const& (ZipPackAccessStrategy::*rv)() const;
        *((void**)&rv) = dlsym("?getPackName@ZipPackAccessStrategy@@UEBAAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ");
        return (this->*rv)();
    }
    inline std::unique_ptr<class PackAccessStrategy> createSubPack(class Core::Path const& a0) const{
        std::unique_ptr<class PackAccessStrategy> (ZipPackAccessStrategy::*rv)(class Core::Path const&) const;
        *((void**)&rv) = dlsym("?createSubPack@ZipPackAccessStrategy@@UEBA?AV?$unique_ptr@VPackAccessStrategy@@U?$default_delete@VPackAccessStrategy@@@std@@@std@@AEBVPath@Core@@@Z");
        return (this->*rv)(std::forward<class Core::Path const&>(a0));
    }
    inline bool deleteAsset(class Core::PathBuffer<std::string > const& a0){
        bool (ZipPackAccessStrategy::*rv)(class Core::PathBuffer<std::string > const&);
        *((void**)&rv) = dlsym("?deleteAsset@ZipPackAccessStrategy@@UEAA_NAEBV?$PathBuffer@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Core@@@Z");
        return (this->*rv)(std::forward<class Core::PathBuffer<std::string > const&>(a0));
    }
    inline void forEachIn(class Core::Path const& a0, class std::function<void (class Core::Path const&)> a1, bool a2) const{
        void (ZipPackAccessStrategy::*rv)(class Core::Path const&, class std::function<void (class Core::Path const&)>, bool) const;
        *((void**)&rv) = dlsym("?forEachIn@ZipPackAccessStrategy@@UEBAXAEBVPath@Core@@V?$function@$$A6AXAEBVPath@Core@@@Z@std@@_N@Z");
        return (this->*rv)(std::forward<class Core::Path const&>(a0), std::forward<class std::function<void (class Core::Path const&)>>(a1), std::forward<bool>(a2));
    }
    inline bool getAsset(class Core::Path const& a0, std::string& a1, bool a2) const{
        bool (ZipPackAccessStrategy::*rv)(class Core::Path const&, std::string&, bool) const;
        *((void**)&rv) = dlsym("?getAsset@ZipPackAccessStrategy@@UEBA_NAEBVPath@Core@@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z");
        return (this->*rv)(std::forward<class Core::Path const&>(a0), std::forward<std::string&>(a1), std::forward<bool>(a2));
    }
    inline class Core::PathBuffer<std::string > const& getSubPath() const{
        class Core::PathBuffer<std::string > const& (ZipPackAccessStrategy::*rv)() const;
        *((void**)&rv) = dlsym("?getSubPath@ZipPackAccessStrategy@@UEBAAEBV?$PathBuffer@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Core@@XZ");
        return (this->*rv)();
    }
    inline unsigned __int64 getPackSize() const{
        unsigned __int64 (ZipPackAccessStrategy::*rv)() const;
        *((void**)&rv) = dlsym("?getPackSize@ZipPackAccessStrategy@@UEBA_KXZ");
        return (this->*rv)();
    }
    inline bool hasAsset(class Core::Path const& a0, bool a1) const{
        bool (ZipPackAccessStrategy::*rv)(class Core::Path const&, bool) const;
        *((void**)&rv) = dlsym("?hasAsset@ZipPackAccessStrategy@@UEBA_NAEBVPath@Core@@_N@Z");
        return (this->*rv)(std::forward<class Core::Path const&>(a0), std::forward<bool>(a1));
    }
    inline bool hasFolder(class Core::Path const& a0) const{
        bool (ZipPackAccessStrategy::*rv)(class Core::Path const&) const;
        *((void**)&rv) = dlsym("?hasFolder@ZipPackAccessStrategy@@UEBA_NAEBVPath@Core@@@Z");
        return (this->*rv)(std::forward<class Core::Path const&>(a0));
    }
    inline bool isTrusted() const{
        bool (ZipPackAccessStrategy::*rv)() const;
        *((void**)&rv) = dlsym("?isTrusted@ZipPackAccessStrategy@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isWritable() const{
        bool (ZipPackAccessStrategy::*rv)() const;
        *((void**)&rv) = dlsym("?isWritable@ZipPackAccessStrategy@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline class ContentIdentity readContentIdentity() const{
        class ContentIdentity (ZipPackAccessStrategy::*rv)() const;
        *((void**)&rv) = dlsym("?readContentIdentity@ZipPackAccessStrategy@@UEBA?AVContentIdentity@@XZ");
        return (this->*rv)();
    }
    inline void setIsTrusted(bool a0){
        void (ZipPackAccessStrategy::*rv)(bool);
        *((void**)&rv) = dlsym("?setIsTrusted@ZipPackAccessStrategy@@UEAAX_N@Z");
        return (this->*rv)(std::forward<bool>(a0));
    }
    inline void unload(){
        void (ZipPackAccessStrategy::*rv)();
        *((void**)&rv) = dlsym("?unload@ZipPackAccessStrategy@@UEAAXXZ");
        return (this->*rv)();
    }
    inline bool writeAsset(class Core::Path const& a0, std::string const& a1){
        bool (ZipPackAccessStrategy::*rv)(class Core::Path const&, std::string const&);
        *((void**)&rv) = dlsym("?writeAsset@ZipPackAccessStrategy@@UEAA_NAEBVPath@Core@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z");
        return (this->*rv)(std::forward<class Core::Path const&>(a0), std::forward<std::string const&>(a1));
    }
    */

protected:

private:
    MCAPI bool _tryReadFromPendingQueue(class Core::Path const&, std::string&) const;
};