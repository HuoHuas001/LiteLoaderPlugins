// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_MOVECONTROL
#include "Extra/MoveControlAPI.hpp"
#undef EXTRA_INCLUDE_PART_MOVECONTROL
class MoveControl {
#include "Extra/MoveControlAPI.hpp"
public:
    /*0*/ virtual ~MoveControl();
    /*1*/ virtual void initializeInternal(class Mob&, struct MoveControlDescription*);
    /*2*/ virtual void tick(class MoveControlComponent&, class Mob&);
    /*3*/ virtual void setWantedPosition(class MoveControlComponent&, class Mob&, class Vec3 const&, float);
    /*
    inline void initializeInternal(class Mob& a0, struct MoveControlDescription* a1){
        void (MoveControl::*rv)(class Mob&, struct MoveControlDescription*);
        *((void**)&rv) = dlsym("?initializeInternal@MoveControl@@UEAAXAEAVMob@@PEAUMoveControlDescription@@@Z");
        return (this->*rv)(std::forward<class Mob&>(a0), std::forward<struct MoveControlDescription*>(a1));
    }
    inline void setWantedPosition(class MoveControlComponent& a0, class Mob& a1, class Vec3 const& a2, float a3){
        void (MoveControl::*rv)(class MoveControlComponent&, class Mob&, class Vec3 const&, float);
        *((void**)&rv) = dlsym("?setWantedPosition@MoveControl@@MEAAXAEAVMoveControlComponent@@AEAVMob@@AEBVVec3@@M@Z");
        return (this->*rv)(std::forward<class MoveControlComponent&>(a0), std::forward<class Mob&>(a1), std::forward<class Vec3 const&>(a2), std::forward<float>(a3));
    }
    inline void tick(class MoveControlComponent& a0, class Mob& a1){
        void (MoveControl::*rv)(class MoveControlComponent&, class Mob&);
        *((void**)&rv) = dlsym("?tick@MoveControl@@MEAAXAEAVMoveControlComponent@@AEAVMob@@@Z");
        return (this->*rv)(std::forward<class MoveControlComponent&>(a0), std::forward<class Mob&>(a1));
    }
    */
    MCAPI static float const MIN_DELTA_TO_JUMP;
    MCAPI static float const MIN_DELTA_TO_JUMP_UNDERWATER;
    MCAPI static float const MIN_DELTA_TO_MOVE;
    MCAPI static float const MIN_SPEED;
    MCAPI static float const MIN_SPEED_SQR;

protected:
    MCAPI float calculateMoveSpeed(class MoveControlComponent const&, class Mob&, class Vec3 const&, float);
    MCAPI float calculateYRotation(class MoveControlComponent const&, class Mob const&, class Vec3 const&, float);

private:
};