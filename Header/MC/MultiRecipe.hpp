// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "Recipe.hpp"
#define EXTRA_INCLUDE_PART_MULTIRECIPE
#include "Extra/MultiRecipeAPI.hpp"
#undef EXTRA_INCLUDE_PART_MULTIRECIPE
class MultiRecipe : public Recipe {
#include "Extra/MultiRecipeAPI.hpp"
public:
    /*0*/ virtual ~MultiRecipe();
    /*1*/ virtual std::vector<class ItemInstance> const& assemble(class CraftingContainer&) const = 0;
    /*2*/ virtual int getCraftingSize() const = 0;
    /*3*/ virtual void __unk_vfn_0();
    /*4*/ virtual void __unk_vfn_1() = 0;
    /*5*/ virtual void __unk_vfn_2() = 0;
    /*6*/ virtual bool matches(class CraftingContainer&, class Level&) const = 0;
    /*7*/ virtual int size() const = 0;
    /*8*/ virtual class mce::UUID const& getId() const;
    /*9*/ virtual void __unk_vfn_3();
    /*10*/ virtual void __unk_vfn_4();
    /*
    inline bool isShapeless() const{
        bool (MultiRecipe::*rv)() const;
        *((void**)&rv) = dlsym("?isShapeless@MultiRecipe@@EEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isMultiRecipe() const{
        bool (MultiRecipe::*rv)() const;
        *((void**)&rv) = dlsym("?isMultiRecipe@MultiRecipe@@EEBA_NXZ");
        return (this->*rv)();
    }
    */

protected:

private:
};