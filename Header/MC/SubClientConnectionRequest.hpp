// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_SUBCLIENTCONNECTIONREQUEST
#include "Extra/SubClientConnectionRequestAPI.hpp"
#undef EXTRA_INCLUDE_PART_SUBCLIENTCONNECTIONREQUEST
class SubClientConnectionRequest {
#include "Extra/SubClientConnectionRequestAPI.hpp"
public:
    MCAPI std::vector<class AnimatedImageData> getAnimatedImageData() const;
    MCAPI std::string getArmSize() const;
    MCAPI std::vector<unsigned char> getCapeData() const;
    MCAPI std::string getCapeId() const;
    MCAPI unsigned short getCapeImageHeight() const;
    MCAPI unsigned short getCapeImageWidth() const;
    MCAPI unsigned __int64 getClientRandomId() const;
    MCAPI std::string getDeviceId() const;
    MCAPI std::vector<class SerializedPersonaPieceHandle> getPersonaPieces() const;
    MCAPI std::string getPlatformId() const;
    MCAPI std::string getPlatformOfflineId() const;
    MCAPI std::string getPlatformOnlineId() const;
    MCAPI std::string getPlayFabId() const;
    MCAPI std::string getSelfSignedId() const;
    MCAPI std::string getSkinAnimationData() const;
    MCAPI class mce::Color getSkinColor() const;
    MCAPI std::vector<unsigned char> getSkinData() const;
    MCAPI std::string getSkinGeometry() const;
    MCAPI class SemVersion getSkinGeometryEngineVersion() const;
    MCAPI std::string getSkinId() const;
    MCAPI unsigned short getSkinImageHeight() const;
    MCAPI unsigned short getSkinImageWidth() const;
    MCAPI std::string getSkinResourcePatch() const;
    MCAPI std::string getThirdPartyName() const;
    MCAPI bool isCapeOnClassicSkin() const;
    MCAPI bool isPersonaSkin() const;
    MCAPI bool isPremiumSkin() const;
    MCAPI bool isPrimaryUser() const;
    MCAPI std::string toString();
    MCAPI bool verify(std::vector<std::string> const&, __int64);
    MCAPI bool verifySelfSigned();
    MCAPI static class SubClientConnectionRequest fromString(std::string const&);

protected:

private:
    MCAPI std::unique_ptr<class Certificate> validate(std::unique_ptr<class Certificate>, __int64) const;
};