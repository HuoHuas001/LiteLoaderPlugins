// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "Container.hpp"
#define EXTRA_INCLUDE_PART_FILLINGCONTAINER
#include "Extra/FillingContainerAPI.hpp"
#undef EXTRA_INCLUDE_PART_FILLINGCONTAINER
class FillingContainer : public Container {
#include "Extra/FillingContainerAPI.hpp"
public:
    /*0*/ virtual ~FillingContainer();
    /*1*/ virtual void init();
    /*2*/ virtual void serverInitItemStackIds(int, int, class std::function<void (int, class ItemStack const&)>);
    /*3*/ virtual class ItemStack const& getItem(int) const;
    /*4*/ virtual void setItem(int, class ItemStack const&);
    /*5*/ virtual void setItemWithForceBalance(int, class ItemStack const&, bool);
    /*6*/ virtual void removeItem(int, int);
    /*7*/ virtual void __unk_vfn_0();
    /*8*/ virtual int getMaxStackSize() const;
    /*9*/ virtual void startOpen(class Player&);
    /*10*/ virtual void stopOpen(class Player&);
    /*11*/ virtual void __unk_vfn_1();
    /*12*/ virtual void __unk_vfn_2();
    /*13*/ virtual void __unk_vfn_3();
    /*14*/ virtual bool add(class ItemStack&);
    /*15*/ virtual bool canAdd(class ItemStack const&) const;
    /*16*/ virtual void clearSlot(int);
    /*17*/ virtual int clearInventory(int);
    /*18*/ virtual void load(class ListTag const&, class SemVersion const&, class Level&);
    /*19*/ virtual int getEmptySlotsCount() const;
    /*
    inline void startOpen(class Player& a0){
        void (FillingContainer::*rv)(class Player&);
        *((void**)&rv) = dlsym("?startOpen@FillingContainer@@UEAAXAEAVPlayer@@@Z");
        return (this->*rv)(std::forward<class Player&>(a0));
    }
    inline void stopOpen(class Player& a0){
        void (FillingContainer::*rv)(class Player&);
        *((void**)&rv) = dlsym("?stopOpen@FillingContainer@@UEAAXAEAVPlayer@@@Z");
        return (this->*rv)(std::forward<class Player&>(a0));
    }
    inline void setItem(int a0, class ItemStack const& a1){
        void (FillingContainer::*rv)(int, class ItemStack const&);
        *((void**)&rv) = dlsym("?setItem@FillingContainer@@UEAAXHAEBVItemStack@@@Z");
        return (this->*rv)(std::forward<int>(a0), std::forward<class ItemStack const&>(a1));
    }
    inline bool add(class ItemStack& a0){
        bool (FillingContainer::*rv)(class ItemStack&);
        *((void**)&rv) = dlsym("?add@FillingContainer@@UEAA_NAEAVItemStack@@@Z");
        return (this->*rv)(std::forward<class ItemStack&>(a0));
    }
    inline bool canAdd(class ItemStack const& a0) const{
        bool (FillingContainer::*rv)(class ItemStack const&) const;
        *((void**)&rv) = dlsym("?canAdd@FillingContainer@@UEBA_NAEBVItemStack@@@Z");
        return (this->*rv)(std::forward<class ItemStack const&>(a0));
    }
    inline int clearInventory(int a0){
        int (FillingContainer::*rv)(int);
        *((void**)&rv) = dlsym("?clearInventory@FillingContainer@@UEAAHH@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline void clearSlot(int a0){
        void (FillingContainer::*rv)(int);
        *((void**)&rv) = dlsym("?clearSlot@FillingContainer@@UEAAXH@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline int getContainerSize() const{
        int (FillingContainer::*rv)() const;
        *((void**)&rv) = dlsym("?getContainerSize@FillingContainer@@UEBAHXZ");
        return (this->*rv)();
    }
    inline int getEmptySlotsCount() const{
        int (FillingContainer::*rv)() const;
        *((void**)&rv) = dlsym("?getEmptySlotsCount@FillingContainer@@UEBAHXZ");
        return (this->*rv)();
    }
    inline class ItemStack const& getItem(int a0) const{
        class ItemStack const& (FillingContainer::*rv)(int) const;
        *((void**)&rv) = dlsym("?getItem@FillingContainer@@UEBAAEBVItemStack@@H@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline int getMaxStackSize() const{
        int (FillingContainer::*rv)() const;
        *((void**)&rv) = dlsym("?getMaxStackSize@FillingContainer@@UEBAHXZ");
        return (this->*rv)();
    }
    inline void load(class ListTag const& a0, class SemVersion const& a1, class Level& a2){
        void (FillingContainer::*rv)(class ListTag const&, class SemVersion const&, class Level&);
        *((void**)&rv) = dlsym("?load@FillingContainer@@UEAAXAEBVListTag@@AEBVSemVersion@@AEAVLevel@@@Z");
        return (this->*rv)(std::forward<class ListTag const&>(a0), std::forward<class SemVersion const&>(a1), std::forward<class Level&>(a2));
    }
    inline void removeItem(int a0, int a1){
        void (FillingContainer::*rv)(int, int);
        *((void**)&rv) = dlsym("?removeItem@FillingContainer@@UEAAXHH@Z");
        return (this->*rv)(std::forward<int>(a0), std::forward<int>(a1));
    }
    inline void serverInitItemStackIds(int a0, int a1, class std::function<void (int, class ItemStack const&)> a2){
        void (FillingContainer::*rv)(int, int, class std::function<void (int, class ItemStack const&)>);
        *((void**)&rv) = dlsym("?serverInitItemStackIds@FillingContainer@@UEAAXHHV?$function@$$A6AXHAEBVItemStack@@@Z@std@@@Z");
        return (this->*rv)(std::forward<int>(a0), std::forward<int>(a1), std::forward<class std::function<void (int, class ItemStack const&)>>(a2));
    }
    inline void setItemWithForceBalance(int a0, class ItemStack const& a1, bool a2){
        void (FillingContainer::*rv)(int, class ItemStack const&, bool);
        *((void**)&rv) = dlsym("?setItemWithForceBalance@FillingContainer@@UEAAXHAEBVItemStack@@_N@Z");
        return (this->*rv)(std::forward<int>(a0), std::forward<class ItemStack const&>(a1), std::forward<bool>(a2));
    }
    */
    MCAPI int getHotbarSize() const;
    MCAPI int getSlotWithItem(class ItemStack const&, bool, bool) const;
    MCAPI bool hasResource(int);
    MCAPI int removeResource(class ItemStack const&, bool, bool, int);
    MCAPI bool removeResource(int);
    MCAPI std::unique_ptr<class ListTag> save();
    MCAPI void swapSlots(int, int);

protected:
    MCAPI int _addResource(class ItemStack const&);
    MCAPI void _doDrop(class ItemStack&, bool);
    MCAPI void _fixBackwardCompabilityItem(class ItemStack&);
    MCAPI int _getEmptySlotsCount(int, int) const;
    MCAPI int _getFreeSlot() const;
    MCAPI int _getSlot(int) const;
    MCAPI int _getSlotWithRemainingSpace(class ItemStack const&) const;
    MCAPI bool _isCreative() const;
    MCAPI void _release(int);

private:
};