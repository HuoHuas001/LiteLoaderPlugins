// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "Json.hpp"
#define EXTRA_INCLUDE_PART_CAMERAITEMCOMPONENTLEGACY
#include "Extra/CameraItemComponentLegacyAPI.hpp"
#undef EXTRA_INCLUDE_PART_CAMERAITEMCOMPONENTLEGACY
class CameraItemComponentLegacy {
#include "Extra/CameraItemComponentLegacyAPI.hpp"
public:
    /*0*/ virtual ~CameraItemComponentLegacy();
    /*1*/ virtual void __unk_vfn_0();
    /*2*/ virtual void __unk_vfn_1();
    /*3*/ virtual void __unk_vfn_2();
    /*4*/ virtual void __unk_vfn_3();
    /*5*/ virtual void __unk_vfn_4();
    /*6*/ virtual void __unk_vfn_5();
    /*7*/ virtual bool canPlace(class ItemStack const&, class Actor&, class BlockPos const&, unsigned char) const;
    /*8*/ virtual void takePictureNow(class Player&, class Actor*, class Actor*);
    /*9*/ virtual void __unk_vfn_6();
    /*10*/ virtual void use(class ItemStack&, class Player&);
    /*11*/ virtual void releaseUsing(class ItemStack&, class Player&, int);
    /*12*/ virtual bool useOn(class ItemStack&, class Actor&, class BlockPos const&, unsigned char, class Vec3 const&);
    /*
    inline float blackBarsDuration() const{
        float (CameraItemComponentLegacy::*rv)() const;
        *((void**)&rv) = dlsym("?blackBarsDuration@CameraItemComponentLegacy@@UEBAMXZ");
        return (this->*rv)();
    }
    inline float blackBarsScreenRatio() const{
        float (CameraItemComponentLegacy::*rv)() const;
        *((void**)&rv) = dlsym("?blackBarsScreenRatio@CameraItemComponentLegacy@@UEBAMXZ");
        return (this->*rv)();
    }
    inline float pictureDuration() const{
        float (CameraItemComponentLegacy::*rv)() const;
        *((void**)&rv) = dlsym("?pictureDuration@CameraItemComponentLegacy@@UEBAMXZ");
        return (this->*rv)();
    }
    inline float shutterDuration() const{
        float (CameraItemComponentLegacy::*rv)() const;
        *((void**)&rv) = dlsym("?shutterDuration@CameraItemComponentLegacy@@UEBAMXZ");
        return (this->*rv)();
    }
    inline float slideAwayDuration() const{
        float (CameraItemComponentLegacy::*rv)() const;
        *((void**)&rv) = dlsym("?slideAwayDuration@CameraItemComponentLegacy@@UEBAMXZ");
        return (this->*rv)();
    }
    inline bool canPlace(class ItemStack const& a0, class Actor& a1, class BlockPos const& a2, unsigned char a3) const{
        bool (CameraItemComponentLegacy::*rv)(class ItemStack const&, class Actor&, class BlockPos const&, unsigned char) const;
        *((void**)&rv) = dlsym("?canPlace@CameraItemComponentLegacy@@UEBA_NAEBVItemStack@@AEAVActor@@AEBVBlockPos@@E@Z");
        return (this->*rv)(std::forward<class ItemStack const&>(a0), std::forward<class Actor&>(a1), std::forward<class BlockPos const&>(a2), std::forward<unsigned char>(a3));
    }
    inline void registerCallbacks(class CameraCallbacks* a0){
        void (CameraItemComponentLegacy::*rv)(class CameraCallbacks*);
        *((void**)&rv) = dlsym("?registerCallbacks@CameraItemComponentLegacy@@UEAAXPEAVCameraCallbacks@@@Z");
        return (this->*rv)(std::forward<class CameraCallbacks*>(a0));
    }
    inline void releaseUsing(class ItemStack& a0, class Player& a1, int a2){
        void (CameraItemComponentLegacy::*rv)(class ItemStack&, class Player&, int);
        *((void**)&rv) = dlsym("?releaseUsing@CameraItemComponentLegacy@@UEAAXAEAVItemStack@@AEAVPlayer@@H@Z");
        return (this->*rv)(std::forward<class ItemStack&>(a0), std::forward<class Player&>(a1), std::forward<int>(a2));
    }
    inline float shutterScreenRatio() const{
        float (CameraItemComponentLegacy::*rv)() const;
        *((void**)&rv) = dlsym("?shutterScreenRatio@CameraItemComponentLegacy@@UEBAMXZ");
        return (this->*rv)();
    }
    inline void takePictureNow(class Player& a0, class Actor* a1, class Actor* a2){
        void (CameraItemComponentLegacy::*rv)(class Player&, class Actor*, class Actor*);
        *((void**)&rv) = dlsym("?takePictureNow@CameraItemComponentLegacy@@UEAAXAEAVPlayer@@PEAVActor@@1@Z");
        return (this->*rv)(std::forward<class Player&>(a0), std::forward<class Actor*>(a1), std::forward<class Actor*>(a2));
    }
    inline void use(class ItemStack& a0, class Player& a1){
        void (CameraItemComponentLegacy::*rv)(class ItemStack&, class Player&);
        *((void**)&rv) = dlsym("?use@CameraItemComponentLegacy@@UEAAXAEAVItemStack@@AEAVPlayer@@@Z");
        return (this->*rv)(std::forward<class ItemStack&>(a0), std::forward<class Player&>(a1));
    }
    inline bool useOn(class ItemStack& a0, class Actor& a1, class BlockPos const& a2, unsigned char a3, class Vec3 const& a4){
        bool (CameraItemComponentLegacy::*rv)(class ItemStack&, class Actor&, class BlockPos const&, unsigned char, class Vec3 const&);
        *((void**)&rv) = dlsym("?useOn@CameraItemComponentLegacy@@UEAA_NAEAVItemStack@@AEAVActor@@AEBVBlockPos@@EAEBVVec3@@@Z");
        return (this->*rv)(std::forward<class ItemStack&>(a0), std::forward<class Actor&>(a1), std::forward<class BlockPos const&>(a2), std::forward<unsigned char>(a3), std::forward<class Vec3 const&>(a4));
    }
    */
    MCAPI bool init(class Json::Value&, class SemVersion const&);

protected:

private:
    MCAPI enum CameraItemComponentLegacy::UseAction _tryPlace(class ItemStack const&, class Actor&, class BlockPos const&, unsigned char, class Vec3&) const;
};