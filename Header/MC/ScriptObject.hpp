// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "Scripting.hpp"
#define EXTRA_INCLUDE_PART_SCRIPTOBJECT
#include "Extra/ScriptObjectAPI.hpp"
#undef EXTRA_INCLUDE_PART_SCRIPTOBJECT
class ScriptObject {
#include "Extra/ScriptObjectAPI.hpp"
public:
    /*0*/ virtual ~ScriptObject();
    /*1*/ virtual struct Scripting::Error _functionError(std::string const&) const;
    /*2*/ virtual struct Scripting::Error _getPropertyError(std::string const&) const;
    /*3*/ virtual struct Scripting::Error _setPropertyError(std::string const&) const;
    /*
    inline struct Scripting::Error _functionError(std::string const& a0) const{
        struct Scripting::Error (ScriptObject::*rv)(std::string const&) const;
        *((void**)&rv) = dlsym("?_functionError@ScriptObject@@MEBA?AUError@Scripting@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z");
        return (this->*rv)(std::forward<std::string const&>(a0));
    }
    inline struct Scripting::Error _getPropertyError(std::string const& a0) const{
        struct Scripting::Error (ScriptObject::*rv)(std::string const&) const;
        *((void**)&rv) = dlsym("?_getPropertyError@ScriptObject@@MEBA?AUError@Scripting@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z");
        return (this->*rv)(std::forward<std::string const&>(a0));
    }
    inline struct Scripting::Error _setPropertyError(std::string const& a0) const{
        struct Scripting::Error (ScriptObject::*rv)(std::string const&) const;
        *((void**)&rv) = dlsym("?_setPropertyError@ScriptObject@@MEBA?AUError@Scripting@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z");
        return (this->*rv)(std::forward<std::string const&>(a0));
    }
    */

protected:

private:
};