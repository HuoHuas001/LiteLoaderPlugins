// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_TAG
#include "Extra/TagAPI.hpp"
#undef EXTRA_INCLUDE_PART_TAG
class Tag {
#include "Extra/TagAPI.hpp"
public:
    /*0*/ virtual ~Tag();
    /*1*/ virtual void deleteChildren();
    /*2*/ virtual void write(class IDataOutput&) const = 0;
    /*3*/ virtual void load(class IDataInput&) = 0;
    /*4*/ virtual std::string toString() const = 0;
    /*5*/ virtual void __unk_vfn_0() = 0;
    /*6*/ virtual bool equals(class Tag const&) const;
    /*7*/ virtual void print(class PrintStream&) const;
    /*8*/ virtual void print(std::string const&, class PrintStream&) const;
    /*9*/ virtual std::unique_ptr<class Tag> copy() const = 0;
    /*10*/ virtual unsigned __int64 hash() const = 0;
    /*
    inline void deleteChildren(){
        void (Tag::*rv)();
        *((void**)&rv) = dlsym("?deleteChildren@Tag@@UEAAXXZ");
        return (this->*rv)();
    }
    inline bool equals(class Tag const& a0) const{
        bool (Tag::*rv)(class Tag const&) const;
        *((void**)&rv) = dlsym("?equals@Tag@@UEBA_NAEBV1@@Z");
        return (this->*rv)(std::forward<class Tag const&>(a0));
    }
    inline void print(class PrintStream& a0) const{
        void (Tag::*rv)(class PrintStream&) const;
        *((void**)&rv) = dlsym("?print@Tag@@UEBAXAEAVPrintStream@@@Z");
        return (this->*rv)(std::forward<class PrintStream&>(a0));
    }
    inline void print(std::string const& a0, class PrintStream& a1) const{
        void (Tag::*rv)(std::string const&, class PrintStream&) const;
        *((void**)&rv) = dlsym("?print@Tag@@UEBAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVPrintStream@@@Z");
        return (this->*rv)(std::forward<std::string const&>(a0), std::forward<class PrintStream&>(a1));
    }
    */
    MCAPI static std::string const NullString;
    MCAPI static std::string getTagName(enum Tag::Type);
    MCAPI static std::unique_ptr<class Tag> newTag(enum Tag::Type);
    MCAPI static std::unique_ptr<class Tag> readNamedTag(class IDataInput&, std::string&);
    MCAPI static void writeNamedTag(std::string const&, class Tag const&, class IDataOutput&);

protected:

private:
};