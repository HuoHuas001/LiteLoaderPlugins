// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "Bedrock.hpp"
#define EXTRA_INCLUDE_PART_MINECRAFT
#include "Extra/MinecraftAPI.hpp"
#undef EXTRA_INCLUDE_PART_MINECRAFT
class Minecraft {
#include "Extra/MinecraftAPI.hpp"
public:
    /*0*/ virtual ~Minecraft();
    /*1*/ virtual class OwnerPtrT<struct EntityRegistryRefTraits>& getEntityRegistry();
    /*2*/ virtual void setSimTimePause(bool);
    /*3*/ virtual void setSimTimeScale(float);
    /*4*/ virtual bool getSimPaused() const;
    /*5*/ virtual bool isOnlineClient() const;

public:
    MCAPI void activateAllowList();
    MCAPI void configureGameTest(class Level&, class Experiments const&);
    MCAPI void disconnectClient(class NetworkIdentifier const&, std::string const&);
    MCAPI class MinecraftCommands& getCommands();
    MCAPI class GameModuleServer& getGameModuleServer();
    MCAPI class optional_ref<class MinecraftGameTest> getGameTest();
    MCAPI double getLastTimestep();
    MCAPI class Level* getLevel() const;
    MCAPI class NetEventCallback* getNetEventCallback();
    MCAPI class NetworkHandler& getNetworkHandler();
    MCAPI class ResourcePackManager& getResourceLoader();
    MCAPI class ServerNetworkHandler* getServerNetworkHandler();
    MCAPI class gsl::not_null<class Bedrock::NonOwnerPointer<class StructureManager>> getStructureManager();
    MCAPI bool hostMultiplayer(std::string const&, struct std::pair<std::unique_ptr<class Level>, class OwnerPtrT<struct EntityRefTraits>>, class Player*, class mce::UUID const&, std::unique_ptr<class NetEventCallback>, int, bool, bool, std::vector<std::string> const&, std::string, struct ConnectionDefinition const&, class std::unordered_map<struct PackIdVersion, std::string, struct std::hash<struct PackIdVersion>, struct std::equal_to<struct PackIdVersion>, class std::allocator<struct std::pair<struct PackIdVersion const, std::string>>> const&, class Scheduler&, class TextFilteringProcessor*);
    MCAPI void init();
    MCAPI void initAsDedicatedServer();
    MCAPI bool isLeaveGameDone() const;
    MCAPI void startLeaveGame(bool);
    MCAPI bool update();

private:
    MCAPI void _tryCatchupMovementTicks();
};