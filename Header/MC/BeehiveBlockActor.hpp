// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "BlockActor.hpp"
#define EXTRA_INCLUDE_PART_BEEHIVEBLOCKACTOR
#include "Extra/BeehiveBlockActorAPI.hpp"
#undef EXTRA_INCLUDE_PART_BEEHIVEBLOCKACTOR
class BeehiveBlockActor : public BlockActor {
#include "Extra/BeehiveBlockActorAPI.hpp"
public:
    /*0*/ virtual ~BeehiveBlockActor();
    /*1*/ virtual void load(class Level&, class CompoundTag const&, class DataLoadHelper&);
    /*2*/ virtual bool save(class CompoundTag&) const;
    /*3*/ virtual void saveBlockData(class CompoundTag&, class BlockSource&) const;
    /*4*/ virtual void loadBlockData(class CompoundTag const&, class BlockSource&, class DataLoadHelper&);
    /*5*/ virtual void onCustomTagLoadDone(class BlockSource&);
    /*6*/ virtual void tick(class BlockSource&);
    /*7*/ virtual void onChanged(class BlockSource&);
    /*8*/ virtual void onPlace(class BlockSource&);
    /*9*/ virtual void __unk_vfn_0();
    /*10*/ virtual void onRemoved(class BlockSource&);
    /*11*/ virtual void triggerEvent(int, int);
    /*12*/ virtual void __unk_vfn_1();
    /*13*/ virtual void __unk_vfn_2();
    /*14*/ virtual void __unk_vfn_3();
    /*15*/ virtual void __unk_vfn_4();
    /*16*/ virtual class BlockActor* getCrackEntity(class BlockSource&, class BlockPos const&);
    /*17*/ virtual void __unk_vfn_5();
    /*18*/ virtual std::string getName() const;
    /*19*/ virtual std::string getImmersiveReaderText(class BlockSource&);
    /*20*/ virtual void __unk_vfn_6();
    /*21*/ virtual class PistonBlockActor* getOwningPiston(class BlockSource&);
    /*22*/ virtual void __unk_vfn_7();
    /*23*/ virtual void __unk_vfn_8();
    /*24*/ virtual void __unk_vfn_9();
    /*25*/ virtual void __unk_vfn_10();
    /*26*/ virtual void __unk_vfn_11();
    /*27*/ virtual void __unk_vfn_12();
    /*28*/ virtual std::unique_ptr<class BlockActorDataPacket> _getUpdatePacket(class BlockSource&);
    /*29*/ virtual void _onUpdatePacket(class CompoundTag const&, class BlockSource&);
    /*30*/ virtual bool _playerCanUpdate(class Player const&) const;
    /*
    inline void load(class Level& a0, class CompoundTag const& a1, class DataLoadHelper& a2){
        void (BeehiveBlockActor::*rv)(class Level&, class CompoundTag const&, class DataLoadHelper&);
        *((void**)&rv) = dlsym("?load@BeehiveBlockActor@@UEAAXAEAVLevel@@AEBVCompoundTag@@AEAVDataLoadHelper@@@Z");
        return (this->*rv)(std::forward<class Level&>(a0), std::forward<class CompoundTag const&>(a1), std::forward<class DataLoadHelper&>(a2));
    }
    inline bool save(class CompoundTag& a0) const{
        bool (BeehiveBlockActor::*rv)(class CompoundTag&) const;
        *((void**)&rv) = dlsym("?save@BeehiveBlockActor@@UEBA_NAEAVCompoundTag@@@Z");
        return (this->*rv)(std::forward<class CompoundTag&>(a0));
    }
    inline void tick(class BlockSource& a0){
        void (BeehiveBlockActor::*rv)(class BlockSource&);
        *((void**)&rv) = dlsym("?tick@BeehiveBlockActor@@UEAAXAEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0));
    }
    */
    MCAPI void disableBeeSpawn();
    MCAPI void evictAll(class BlockSource&, bool);
    MCAPI void saveUserData(class CompoundTag&) const;
    MCAPI bool tryAdmit(class Actor&);
    MCAPI static unsigned int const MAX_OCCUPANCY;
    MCAPI static enum BlockActorType const TypeId;
    MCAPI static std::string const TypeString;

protected:

private:
    MCAPI class Actor* _revive(class BlockSource&, struct BeehiveBlockActor::Occupant const&, unsigned char);
    MCAPI bool _tickOccupant(class BlockSource&, struct BeehiveBlockActor::Occupant&);
    MCAPI void _trySpawnBees(class BlockSource&);
    MCAPI static bool _validSpawnDirection(class BlockSource&, class BlockPos const&, unsigned char);
};