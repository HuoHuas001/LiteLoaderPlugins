// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_COMPLEXINVENTORYTRANSACTION
#include "Extra/ComplexInventoryTransactionAPI.hpp"
#undef EXTRA_INCLUDE_PART_COMPLEXINVENTORYTRANSACTION
class ComplexInventoryTransaction {
#include "Extra/ComplexInventoryTransactionAPI.hpp"
public:
    /*0*/ virtual ~ComplexInventoryTransaction();
    /*1*/ virtual void __unk_vfn_0();
    /*2*/ virtual void __unk_vfn_1();
    /*3*/ virtual void postLoadItems(class BlockPalette&, bool);
    /*4*/ virtual int /*enum enum InventoryTransactionError*/ handle(class Player&, bool) const;
    /*
    inline void write(class BinaryStream& a0) const{
        void (ComplexInventoryTransaction::*rv)(class BinaryStream&) const;
        *((void**)&rv) = dlsym("?write@ComplexInventoryTransaction@@UEBAXAEAVBinaryStream@@@Z");
        return (this->*rv)(std::forward<class BinaryStream&>(a0));
    }
    inline void read(class ReadOnlyBinaryStream& a0){
        void (ComplexInventoryTransaction::*rv)(class ReadOnlyBinaryStream&);
        *((void**)&rv) = dlsym("?read@ComplexInventoryTransaction@@UEAAXAEAVReadOnlyBinaryStream@@@Z");
        return (this->*rv)(std::forward<class ReadOnlyBinaryStream&>(a0));
    }
    inline void postLoadItems(class BlockPalette& a0, bool a1){
        void (ComplexInventoryTransaction::*rv)(class BlockPalette&, bool);
        *((void**)&rv) = dlsym("?postLoadItems@ComplexInventoryTransaction@@UEAAXAEAVBlockPalette@@_N@Z");
        return (this->*rv)(std::forward<class BlockPalette&>(a0), std::forward<bool>(a1));
    }
    inline void onTransactionError(class Player& a0, int \/*enum enum InventoryTransactionError*\/ a1) const{
        void (ComplexInventoryTransaction::*rv)(class Player&, int \/*enum enum InventoryTransactionError*\/) const;
        *((void**)&rv) = dlsym("?onTransactionError@ComplexInventoryTransaction@@UEBAXAEAVPlayer@@W4InventoryTransactionError@@@Z");
        return (this->*rv)(std::forward<class Player&>(a0), std::forward<int \/*enum enum InventoryTransactionError*\/>(a1));
    }
    inline int \/*enum enum InventoryTransactionError*\/ handle(class Player& a0, bool a1) const{
        int \/*enum enum InventoryTransactionError*\/ (ComplexInventoryTransaction::*rv)(class Player&, bool) const;
        *((void**)&rv) = dlsym("?handle@ComplexInventoryTransaction@@UEBA?AW4InventoryTransactionError@@AEAVPlayer@@_N@Z");
        return (this->*rv)(std::forward<class Player&>(a0), std::forward<bool>(a1));
    }
    */
    MCAPI static std::unique_ptr<class ComplexInventoryTransaction> fromType(enum ComplexInventoryTransaction::Type);
    MCAPI static std::unique_ptr<class ComplexInventoryTransaction> fromType(enum ComplexInventoryTransaction::Type, class InventoryTransaction const&);
    MCAPI static std::string const getTransactionTypeName(enum ComplexInventoryTransaction::Type);

protected:

private:
    MCAPI static class BidirectionalUnorderedMap<enum ComplexInventoryTransaction::Type, std::string > const transactionTypeMap;
};