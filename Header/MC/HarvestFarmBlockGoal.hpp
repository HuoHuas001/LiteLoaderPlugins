// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "BaseMoveToBlockGoal.hpp"
#define EXTRA_INCLUDE_PART_HARVESTFARMBLOCKGOAL
#include "Extra/HarvestFarmBlockGoalAPI.hpp"
#undef EXTRA_INCLUDE_PART_HARVESTFARMBLOCKGOAL
class HarvestFarmBlockGoal : public BaseMoveToBlockGoal {
#include "Extra/HarvestFarmBlockGoalAPI.hpp"
public:
    /*0*/ virtual ~HarvestFarmBlockGoal();
    /*1*/ virtual bool canUse();
    /*2*/ virtual bool canContinueToUse();
    /*3*/ virtual void __unk_vfn_0();
    /*4*/ virtual void start();
    /*5*/ virtual void stop();
    /*6*/ virtual void tick();
    /*7*/ virtual void appendDebugInfo(std::string&) const;
    /*8*/ virtual void __unk_vfn_1();
    /*9*/ virtual void __unk_vfn_2();
    /*10*/ virtual bool isValidTarget(class BlockSource&, class BlockPos const&);
    /*11*/ virtual void __unk_vfn_3();
    /*
    inline void stop(){
        void (HarvestFarmBlockGoal::*rv)();
        *((void**)&rv) = dlsym("?stop@HarvestFarmBlockGoal@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void appendDebugInfo(std::string& a0) const{
        void (HarvestFarmBlockGoal::*rv)(std::string&) const;
        *((void**)&rv) = dlsym("?appendDebugInfo@HarvestFarmBlockGoal@@UEBAXAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z");
        return (this->*rv)(std::forward<std::string&>(a0));
    }
    inline bool canContinueToUse(){
        bool (HarvestFarmBlockGoal::*rv)();
        *((void**)&rv) = dlsym("?canContinueToUse@HarvestFarmBlockGoal@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline bool canUse(){
        bool (HarvestFarmBlockGoal::*rv)();
        *((void**)&rv) = dlsym("?canUse@HarvestFarmBlockGoal@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline bool isValidTarget(class BlockSource& a0, class BlockPos const& a1){
        bool (HarvestFarmBlockGoal::*rv)(class BlockSource&, class BlockPos const&);
        *((void**)&rv) = dlsym("?isValidTarget@HarvestFarmBlockGoal@@MEAA_NAEAVBlockSource@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0), std::forward<class BlockPos const&>(a1));
    }
    inline void start(){
        void (HarvestFarmBlockGoal::*rv)();
        *((void**)&rv) = dlsym("?start@HarvestFarmBlockGoal@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void tick(){
        void (HarvestFarmBlockGoal::*rv)();
        *((void**)&rv) = dlsym("?tick@HarvestFarmBlockGoal@@UEAAXXZ");
        return (this->*rv)();
    }
    */

protected:
    MCAPI bool trySowCrop(class BlockSource&, class BlockPos const&);

private:
};