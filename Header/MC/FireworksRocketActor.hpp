// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "PredictableProjectile.hpp"
#include "Actor.hpp"
#define EXTRA_INCLUDE_PART_FIREWORKSROCKETACTOR
#include "Extra/FireworksRocketActorAPI.hpp"
#undef EXTRA_INCLUDE_PART_FIREWORKSROCKETACTOR
class FireworksRocketActor : public PredictableProjectile {
#include "Extra/FireworksRocketActorAPI.hpp"
public:
    /*0*/ virtual void reloadHardcoded(int /*enum enum Actor::InitializationMethod*/, class VariantParameterList const&);
    /*1*/ virtual ~FireworksRocketActor();
    /*2*/ virtual bool isRuntimePredictedMovementEnabled() const;
    /*3*/ virtual void __unk_vfn_0();
    /*4*/ virtual float getInterpolatedHeadRot(float) const;
    /*5*/ virtual float getInterpolatedBodyYaw(float) const;
    /*6*/ virtual class Vec3 getInterpolatedRidingOffset(float) const;
    /*7*/ virtual void __unk_vfn_1();
    /*8*/ virtual void lerpMotion(class Vec3 const&);
    /*9*/ virtual void normalTick();
    /*10*/ virtual float getRidingHeight();
    /*11*/ virtual void __unk_vfn_2();
    /*12*/ virtual void __unk_vfn_3();
    /*13*/ virtual float getCameraOffset() const;
    /*14*/ virtual float getShadowRadius() const;
    /*15*/ virtual void __unk_vfn_4();
    /*16*/ virtual void __unk_vfn_5();
    /*17*/ virtual void playerTouch(class Player&);
    /*18*/ virtual bool isPickable();
    /*19*/ virtual void __unk_vfn_6();
    /*20*/ virtual bool isSleeping() const;
    /*21*/ virtual void setSleeping(bool);
    /*22*/ virtual void __unk_vfn_7();
    /*23*/ virtual bool isBlocking() const;
    /*24*/ virtual bool isDamageBlocked(class ActorDamageSource const&) const;
    /*25*/ virtual void __unk_vfn_8();
    /*26*/ virtual bool isSurfaceMob() const;
    /*27*/ virtual void __unk_vfn_9();
    /*28*/ virtual void __unk_vfn_10();
    /*29*/ virtual void __unk_vfn_11();
    /*30*/ virtual class Actor* findAttackTarget();
    /*31*/ virtual bool isValidTarget(class Actor*) const;
    /*32*/ virtual void adjustDamageAmount(int&) const;
    /*33*/ virtual void onTame();
    /*34*/ virtual void onFailedTame();
    /*35*/ virtual bool isJumping() const;
    /*36*/ virtual void vehicleLanded(class Vec3 const&, class Vec3 const&);
    /*37*/ virtual void animateHurt();
    /*38*/ virtual void onBounceStarted(class BlockPos const&, class Block const&);
    /*39*/ virtual void handleEntityEvent(int /*enum enum ActorEvent*/, int);
    /*40*/ virtual void __unk_vfn_12();
    /*41*/ virtual void awardKillScore(class Actor&, int);
    /*42*/ virtual int /*enum enum ArmorMaterialType*/ getArmorMaterialTypeInSlot(int /*enum enum ArmorSlot*/) const;
    /*43*/ virtual int /*enum enum ArmorTextureType*/ getArmorMaterialTextureTypeInSlot(int /*enum enum ArmorSlot*/) const;
    /*44*/ virtual float getArmorColorInSlot(int /*enum enum ArmorSlot*/, int) const;
    /*45*/ virtual void setEquippedSlot(int /*enum enum EquipmentSlot*/, class ItemStack const&);
    /*46*/ virtual class HashedString const& queryEntityRenderer() const;
    /*47*/ virtual struct ActorUniqueID getSourceUniqueID() const;
    /*48*/ virtual bool canFreeze() const;
    /*49*/ virtual int getPortalWaitTime() const;
    /*50*/ virtual bool canChangeDimensions() const;
    /*51*/ virtual void __unk_vfn_13();
    /*52*/ virtual struct ActorUniqueID getControllingPlayer() const;
    /*53*/ virtual void onSynchedDataUpdate(int);
    /*54*/ virtual bool canPickupItem(class ItemStack const&) const;
    /*55*/ virtual bool canBePulledIntoVehicle() const;
    /*56*/ virtual bool inCaravan() const;
    /*57*/ virtual void __unk_vfn_14();
    /*58*/ virtual bool canSynchronizeNewEntity() const;
    /*59*/ virtual void buildDebugInfo(std::string&) const;
    /*60*/ virtual int getDeathTime() const;
    /*61*/ virtual void swing();
    /*62*/ virtual void __unk_vfn_15();
    /*63*/ virtual void __unk_vfn_16();
    /*64*/ virtual float getYHeadRot() const;
    /*65*/ virtual bool isWorldBuilder() const;
    /*66*/ virtual void __unk_vfn_17();
    /*67*/ virtual bool isAdventure() const;
    /*68*/ virtual bool canDestroyBlock(class Block const&) const;
    /*69*/ virtual void setAuxValue(int);
    /*70*/ virtual void stopSpinAttack();
    /*71*/ virtual void __unk_vfn_18();
    /*72*/ virtual void __unk_vfn_19();
    /*73*/ virtual void updateEntitySpecificMolangVariables(class RenderParams&);
    /*74*/ virtual void __unk_vfn_20();
    /*75*/ virtual void readAdditionalSaveData(class CompoundTag const&, class DataLoadHelper&);
    /*76*/ virtual void addAdditionalSaveData(class CompoundTag&);
    /*77*/ virtual void __unk_vfn_21();
    /*78*/ virtual void _onSizeUpdated();
    /*
    inline float getShadowRadius() const{
        float (FireworksRocketActor::*rv)() const;
        *((void**)&rv) = dlsym("?getShadowRadius@FireworksRocketActor@@UEBAMXZ");
        return (this->*rv)();
    }
    inline void addAdditionalSaveData(class CompoundTag& a0){
        void (FireworksRocketActor::*rv)(class CompoundTag&);
        *((void**)&rv) = dlsym("?addAdditionalSaveData@FireworksRocketActor@@MEAAXAEAVCompoundTag@@@Z");
        return (this->*rv)(std::forward<class CompoundTag&>(a0));
    }
    inline void handleEntityEvent(int \/*enum enum ActorEvent*\/ a0, int a1){
        void (FireworksRocketActor::*rv)(int \/*enum enum ActorEvent*\/, int);
        *((void**)&rv) = dlsym("?handleEntityEvent@FireworksRocketActor@@UEAAXW4ActorEvent@@H@Z");
        return (this->*rv)(std::forward<int \/*enum enum ActorEvent*\/>(a0), std::forward<int>(a1));
    }
    inline void lerpMotion(class Vec3 const& a0){
        void (FireworksRocketActor::*rv)(class Vec3 const&);
        *((void**)&rv) = dlsym("?lerpMotion@FireworksRocketActor@@UEAAXAEBVVec3@@@Z");
        return (this->*rv)(std::forward<class Vec3 const&>(a0));
    }
    inline void normalTick(){
        void (FireworksRocketActor::*rv)();
        *((void**)&rv) = dlsym("?normalTick@FireworksRocketActor@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void onSynchedDataUpdate(int a0){
        void (FireworksRocketActor::*rv)(int);
        *((void**)&rv) = dlsym("?onSynchedDataUpdate@FireworksRocketActor@@UEAAXH@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline void readAdditionalSaveData(class CompoundTag const& a0, class DataLoadHelper& a1){
        void (FireworksRocketActor::*rv)(class CompoundTag const&, class DataLoadHelper&);
        *((void**)&rv) = dlsym("?readAdditionalSaveData@FireworksRocketActor@@MEAAXAEBVCompoundTag@@AEAVDataLoadHelper@@@Z");
        return (this->*rv)(std::forward<class CompoundTag const&>(a0), std::forward<class DataLoadHelper&>(a1));
    }
    */
    MCAPI void init(class Level&, class Vec3 const&, class CompoundTag const&, class Vec3 const&, struct ActorUniqueID, bool);
    MCAPI bool isAttachedToEntity() const;
    MCAPI void setDispensed(bool);

protected:

private:
    MCAPI void checkAchievement() const;
    MCAPI void dealExplosionDamage();
    MCAPI void initTagData(class Random&);
};