// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_MERCHANTRECIPELIST
#include "Extra/MerchantRecipeListAPI.hpp"
#undef EXTRA_INCLUDE_PART_MERCHANTRECIPELIST
class MerchantRecipeList {
#include "Extra/MerchantRecipeListAPI.hpp"
public:
    /*0*/ virtual ~MerchantRecipeList();
    /*1*/ virtual class MerchantRecipe* getRecipeFor(class ItemInstance const&, class ItemInstance const&, int);
    /*2*/ virtual void addIfNewOrBetter(class MerchantRecipe*);
    /*3*/ virtual class MerchantRecipe* getMatchingRecipeFor(class ItemInstance const&, class ItemInstance const&, class ItemInstance const&);
    /*4*/ virtual class MerchantRecipe* getMatchingRecipeFor(class MerchantRecipe const&);
    /*5*/ virtual void load(class CompoundTag const&);
    /*6*/ virtual std::unique_ptr<class CompoundTag> createTag(bool) const;
    /*
    inline void addIfNewOrBetter(class MerchantRecipe* a0){
        void (MerchantRecipeList::*rv)(class MerchantRecipe*);
        *((void**)&rv) = dlsym("?addIfNewOrBetter@MerchantRecipeList@@UEAAXPEAVMerchantRecipe@@@Z");
        return (this->*rv)(std::forward<class MerchantRecipe*>(a0));
    }
    inline std::unique_ptr<class CompoundTag> createTag(bool a0) const{
        std::unique_ptr<class CompoundTag> (MerchantRecipeList::*rv)(bool) const;
        *((void**)&rv) = dlsym("?createTag@MerchantRecipeList@@UEBA?AV?$unique_ptr@VCompoundTag@@U?$default_delete@VCompoundTag@@@std@@@std@@_N@Z");
        return (this->*rv)(std::forward<bool>(a0));
    }
    inline class MerchantRecipe* getMatchingRecipeFor(class MerchantRecipe const& a0){
        class MerchantRecipe* (MerchantRecipeList::*rv)(class MerchantRecipe const&);
        *((void**)&rv) = dlsym("?getMatchingRecipeFor@MerchantRecipeList@@UEAAPEAVMerchantRecipe@@AEBV2@@Z");
        return (this->*rv)(std::forward<class MerchantRecipe const&>(a0));
    }
    inline class MerchantRecipe* getMatchingRecipeFor(class ItemInstance const& a0, class ItemInstance const& a1, class ItemInstance const& a2){
        class MerchantRecipe* (MerchantRecipeList::*rv)(class ItemInstance const&, class ItemInstance const&, class ItemInstance const&);
        *((void**)&rv) = dlsym("?getMatchingRecipeFor@MerchantRecipeList@@UEAAPEAVMerchantRecipe@@AEBVItemInstance@@00@Z");
        return (this->*rv)(std::forward<class ItemInstance const&>(a0), std::forward<class ItemInstance const&>(a1), std::forward<class ItemInstance const&>(a2));
    }
    inline class MerchantRecipe* getRecipeFor(class ItemInstance const& a0, class ItemInstance const& a1, int a2){
        class MerchantRecipe* (MerchantRecipeList::*rv)(class ItemInstance const&, class ItemInstance const&, int);
        *((void**)&rv) = dlsym("?getRecipeFor@MerchantRecipeList@@UEAAPEAVMerchantRecipe@@AEBVItemInstance@@0H@Z");
        return (this->*rv)(std::forward<class ItemInstance const&>(a0), std::forward<class ItemInstance const&>(a1), std::forward<int>(a2));
    }
    inline void load(class CompoundTag const& a0){
        void (MerchantRecipeList::*rv)(class CompoundTag const&);
        *((void**)&rv) = dlsym("?load@MerchantRecipeList@@UEAAXAEBVCompoundTag@@@Z");
        return (this->*rv)(std::forward<class CompoundTag const&>(a0));
    }
    */
    MCAPI void assignNetIds();
    MCAPI bool isRequiredItem(class ItemInstance const&, class ItemInstance const&);

protected:

private:
};