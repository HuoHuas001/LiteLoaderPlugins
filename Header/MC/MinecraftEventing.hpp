// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "Bedrock.hpp"
#include "Social.hpp"
#define EXTRA_INCLUDE_PART_MINECRAFTEVENTING
#include "Extra/MinecraftEventingAPI.hpp"
#undef EXTRA_INCLUDE_PART_MINECRAFTEVENTING
class MinecraftEventing {
#include "Extra/MinecraftEventingAPI.hpp"

public:
    MCAPI void init(class Bedrock::NonOwnerPointer<class AppPlatform> const&);

    MCAPI static void fireEventAwardAchievement(class Player*, enum MinecraftEventing::AchievementIds);
    MCAPI static void fireEventBehaviorErrored(class Player*, std::string);
    MCAPI static void fireEventBehaviorFailed(class Player*, std::string);
    MCAPI static void fireEventBellBlockUsed(class Player*, std::string const&);
    MCAPI static void fireEventBlockBroken(class Player*, class Block const&, enum MinecraftEventing::BlockPlacementMethod, int);
    MCAPI static void fireEventBlockFound(class Player*, class BlockPos const&);
    MCAPI static void fireEventCampfireBlockUsed(class Player*, std::string const&, enum MinecraftEventing::POIBlockInteractionType);
    MCAPI static void fireEventCaravanChanged(class Mob&, int);
    MCAPI static void fireEventItemUsed(class Player*, class ItemDescriptor const&, enum ItemUseMethod);
    MCAPI static void fireEventJukeboxUsed(class Player*, class ItemDescriptor const&, std::string const&);
    MCAPI static void fireEventLecternBlockUsed(class Player*, std::string const&, enum MinecraftEventing::POIBlockInteractionType);
    MCAPI static void fireEventMobEffectChanged(class Mob&, class MobEffectInstance const&, enum MinecraftEventing::ChangeType);
    MCAPI static void fireEventPlayerTeleported(class Player*, float, enum MinecraftEventing::TeleportationCause, int);
    MCAPI static void fireEventPlayerTransform(class Player&);
    MCAPI static void fireEventSlashCommandExecuted(class Player*, std::string const&, int, int, std::string const&);

private:
    MCAPI void _fireStructureBlockAction(enum IMinecraftEventing::StructureBlockActionType, class StructureEditorData const&, bool, class StructureTelemetryClientData const*);
    MCAPI void _generateWorldSessionId();
    MCAPI void fireEventPlayerMessage(std::string const&, std::string const&, std::string const&, std::string const&);

    MCAPI static std::unique_ptr<class Social::Events::AchievementEventing> mAchievementEventing;
    MCAPI static class std::mutex sMutex;
};