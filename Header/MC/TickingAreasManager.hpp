// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#define EXTRA_INCLUDE_PART_TICKINGAREASMANAGER
#include "Extra/TickingAreasManagerAPI.hpp"
#undef EXTRA_INCLUDE_PART_TICKINGAREASMANAGER
class TickingAreasManager {
#include "Extra/TickingAreasManagerAPI.hpp"

public:
    MCAPI void _requeueEntityArea(class Dimension&, struct ActorUniqueID const&, struct Bounds const&, bool, float);
    MCAPI enum AddTickingAreaStatus addArea(class Dimension&, std::string const&, class BlockPos const&, class BlockPos const&, bool, bool);
    MCAPI enum AddTickingAreaStatus addArea(class Dimension&, std::string const&, class BlockPos const&, int, bool, bool);
    MCAPI void addEntityArea(class Dimension&, class Actor const&);
    MCAPI unsigned int countActiveStandaloneTickingAreas() const;
    MCAPI unsigned int countStandaloneTickingAreas() const;
    MCAPI std::vector<struct TickingAreaDescription> getPendingAreaDescriptions(class AutomaticID<class Dimension, int>) const;
    MCAPI bool hasActiveAreas() const;
    MCAPI void loadArea(std::string const&, class CompoundTag*);
    MCAPI bool removePendingAreaByName(class Dimension&, std::string const&);
    MCAPI bool removePendingAreaByPosition(class Dimension&, class BlockPos const&);
    MCAPI void tick(struct Tick const&);
    MCAPI void update(class Level&);

private:
    MCAPI enum AddTickingAreaStatus _addArea(class Dimension&, std::string const&, struct Bounds const&, bool, bool, bool);
    MCAPI void _deletePendingArea(class LevelStorage&, struct PendingArea const&);
    MCAPI std::string _findUsableDefaultName(class TickingAreaList const&, std::vector<struct PendingArea> const&) const;
    MCAPI bool _hasPendingTickingAreaNamed(std::string const&, std::vector<struct PendingArea> const&) const;
    MCAPI void _processAdds(class Level&);
    MCAPI void _savePendingArea(class LevelStorage&, class AutomaticID<class Dimension, int>, struct PendingArea const&);
};