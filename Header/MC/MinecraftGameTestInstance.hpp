// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_MINECRAFTGAMETESTINSTANCE
#include "Extra/MinecraftGameTestInstanceAPI.hpp"
#undef EXTRA_INCLUDE_PART_MINECRAFTGAMETESTINSTANCE
class MinecraftGameTestInstance {
#include "Extra/MinecraftGameTestInstanceAPI.hpp"
public:
    /*0*/ virtual ~MinecraftGameTestInstance();
    /*1*/ virtual void initialize();
    /*2*/ virtual bool hasStructureBlock() const;
    /*3*/ virtual void clearStructure();
    /*4*/ virtual void spawnStructure();
    /*5*/ virtual class std::optional<class AABB> getStructureBounds() const;
    /*6*/ virtual class std::optional<class Vec3> getStructureBlockPivot() const;
    /*7*/ virtual class std::optional<class Vec3> getStructureBlockPosPivot() const;
    /*8*/ virtual class BoundingBox getStructureBoundingBox() const;
    /*9*/ virtual class AutomaticID<class Dimension, int> getStructureDimension() const;
    /*10*/ virtual int _getLevelTick() const;
    /*11*/ virtual bool _isTestReady();
    /*12*/ virtual void __unk_vfn_0();
    /*13*/ virtual void __unk_vfn_1();
    /*14*/ virtual void __unk_vfn_2();
    /*15*/ virtual class BlockSource& getBlockSource() const;
    /*
    inline int _getLevelTick() const{
        int (MinecraftGameTestInstance::*rv)() const;
        *((void**)&rv) = dlsym("?_getLevelTick@MinecraftGameTestInstance@@MEBAHXZ");
        return (this->*rv)();
    }
    inline bool _isTestReady(){
        bool (MinecraftGameTestInstance::*rv)();
        *((void**)&rv) = dlsym("?_isTestReady@MinecraftGameTestInstance@@MEAA_NXZ");
        return (this->*rv)();
    }
    inline void clearStructure(){
        void (MinecraftGameTestInstance::*rv)();
        *((void**)&rv) = dlsym("?clearStructure@MinecraftGameTestInstance@@UEAAXXZ");
        return (this->*rv)();
    }
    inline class BlockSource& getBlockSource() const{
        class BlockSource& (MinecraftGameTestInstance::*rv)() const;
        *((void**)&rv) = dlsym("?getBlockSource@MinecraftGameTestInstance@@UEBAAEAVBlockSource@@XZ");
        return (this->*rv)();
    }
    inline class std::optional<class Vec3> getStructureBlockPivot() const{
        class std::optional<class Vec3> (MinecraftGameTestInstance::*rv)() const;
        *((void**)&rv) = dlsym("?getStructureBlockPivot@MinecraftGameTestInstance@@UEBA?AV?$optional@VVec3@@@std@@XZ");
        return (this->*rv)();
    }
    inline class std::optional<class Vec3> getStructureBlockPosPivot() const{
        class std::optional<class Vec3> (MinecraftGameTestInstance::*rv)() const;
        *((void**)&rv) = dlsym("?getStructureBlockPosPivot@MinecraftGameTestInstance@@UEBA?AV?$optional@VVec3@@@std@@XZ");
        return (this->*rv)();
    }
    inline class BoundingBox getStructureBoundingBox() const{
        class BoundingBox (MinecraftGameTestInstance::*rv)() const;
        *((void**)&rv) = dlsym("?getStructureBoundingBox@MinecraftGameTestInstance@@UEBA?AVBoundingBox@@XZ");
        return (this->*rv)();
    }
    inline class std::optional<class AABB> getStructureBounds() const{
        class std::optional<class AABB> (MinecraftGameTestInstance::*rv)() const;
        *((void**)&rv) = dlsym("?getStructureBounds@MinecraftGameTestInstance@@UEBA?AV?$optional@VAABB@@@std@@XZ");
        return (this->*rv)();
    }
    inline class AutomaticID<class Dimension, int> getStructureDimension() const{
        class AutomaticID<class Dimension, int> (MinecraftGameTestInstance::*rv)() const;
        *((void**)&rv) = dlsym("?getStructureDimension@MinecraftGameTestInstance@@UEBA?AV?$AutomaticID@VDimension@@H@@XZ");
        return (this->*rv)();
    }
    inline bool hasStructureBlock() const{
        bool (MinecraftGameTestInstance::*rv)() const;
        *((void**)&rv) = dlsym("?hasStructureBlock@MinecraftGameTestInstance@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline void initialize(){
        void (MinecraftGameTestInstance::*rv)();
        *((void**)&rv) = dlsym("?initialize@MinecraftGameTestInstance@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void spawnStructure(){
        void (MinecraftGameTestInstance::*rv)();
        *((void**)&rv) = dlsym("?spawnStructure@MinecraftGameTestInstance@@UEAAXXZ");
        return (this->*rv)();
    }
    */

protected:

private:
};