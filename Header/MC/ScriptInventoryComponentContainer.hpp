// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "ScriptContainer.hpp"
#include "Scripting.hpp"
#define EXTRA_INCLUDE_PART_SCRIPTINVENTORYCOMPONENTCONTAINER
#include "Extra/ScriptInventoryComponentContainerAPI.hpp"
#undef EXTRA_INCLUDE_PART_SCRIPTINVENTORYCOMPONENTCONTAINER
class ScriptInventoryComponentContainer : public ScriptContainer {
#include "Extra/ScriptInventoryComponentContainerAPI.hpp"
public:
    /*0*/ virtual ~ScriptInventoryComponentContainer();
    /*1*/ virtual class Scripting::Result<int> getEmptySlotsCount() const;
    /*2*/ virtual class Container* _tryGetContainer() const;
    /*3*/ virtual void _balanceTransaction(class ItemStack const&) const;
    /*
    inline class Container* _tryGetContainer() const{
        class Container* (ScriptInventoryComponentContainer::*rv)() const;
        *((void**)&rv) = dlsym("?_tryGetContainer@ScriptInventoryComponentContainer@@MEBAPEAVContainer@@XZ");
        return (this->*rv)();
    }
    inline class Scripting::Result<int> getEmptySlotsCount() const{
        class Scripting::Result<int> (ScriptInventoryComponentContainer::*rv)() const;
        *((void**)&rv) = dlsym("?getEmptySlotsCount@ScriptInventoryComponentContainer@@UEBA?AV?$Result@H@Scripting@@XZ");
        return (this->*rv)();
    }
    */
    MCAPI class ScriptInventoryComponentContainer& operator=(class ScriptInventoryComponentContainer const&);
    MCAPI static class Scripting::ClassBindingBuilder<class ScriptInventoryComponentContainer> bind(struct Scripting::Version);

protected:

private:
};