// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "RakNet.hpp"
#define EXTRA_INCLUDE_PART_RAKNETSERVERLOCATOR
#include "Extra/RakNetServerLocatorAPI.hpp"
#undef EXTRA_INCLUDE_PART_RAKNETSERVERLOCATOR
class RakNetServerLocator {
#include "Extra/RakNetServerLocatorAPI.hpp"
public:
    /*0*/ virtual ~RakNetServerLocator();
    /*1*/ virtual void _onDisable();
    /*2*/ virtual void _onEnable();
    /*3*/ virtual void startAnnouncingServer(std::string const&, std::string const&, int /*enum enum GameType*/, int, int, bool);
    /*4*/ virtual void stopAnnouncingServer();
    /*5*/ virtual void startServerDiscovery(struct PortPair);
    /*6*/ virtual void stopServerDiscovery();
    /*7*/ virtual void addCustomServer(class AsynchronousIPResolver const&, int);
    /*8*/ virtual void addCustomServer(std::string const&, int);
    /*9*/ virtual std::vector<struct PingedCompatibleServer> getServerList() const;
    /*10*/ virtual void clearServerList();
    /*11*/ virtual void update();
    /*12*/ virtual bool isIPv4Supported() const;
    /*13*/ virtual bool isIPv6Supported() const;
    /*14*/ virtual void setHostGUID(class std::function<struct RakNet::RakNetGUID (void)>);
    /*15*/ virtual float getPingTimeForGUID(std::string const&);
    /*16*/ virtual void checkCanConnectToCustomServerAsync(std::string, int, class std::function<void (bool)>);
    /*
    inline void _onDisable(){
        void (RakNetServerLocator::*rv)();
        *((void**)&rv) = dlsym("?_onDisable@RakNetServerLocator@@EEAAXXZ");
        return (this->*rv)();
    }
    inline void _onEnable(){
        void (RakNetServerLocator::*rv)();
        *((void**)&rv) = dlsym("?_onEnable@RakNetServerLocator@@EEAAXXZ");
        return (this->*rv)();
    }
    inline void addCustomServer(std::string const& a0, int a1){
        void (RakNetServerLocator::*rv)(std::string const&, int);
        *((void**)&rv) = dlsym("?addCustomServer@RakNetServerLocator@@UEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z");
        return (this->*rv)(std::forward<std::string const&>(a0), std::forward<int>(a1));
    }
    inline void addCustomServer(class AsynchronousIPResolver const& a0, int a1){
        void (RakNetServerLocator::*rv)(class AsynchronousIPResolver const&, int);
        *((void**)&rv) = dlsym("?addCustomServer@RakNetServerLocator@@UEAAXAEBVAsynchronousIPResolver@@H@Z");
        return (this->*rv)(std::forward<class AsynchronousIPResolver const&>(a0), std::forward<int>(a1));
    }
    inline void checkCanConnectToCustomServerAsync(std::string a0, int a1, class std::function<void (bool)> a2){
        void (RakNetServerLocator::*rv)(std::string, int, class std::function<void (bool)>);
        *((void**)&rv) = dlsym("?checkCanConnectToCustomServerAsync@RakNetServerLocator@@UEAAXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV?$function@$$A6AX_N@Z@3@@Z");
        return (this->*rv)(std::forward<std::string>(a0), std::forward<int>(a1), std::forward<class std::function<void (bool)>>(a2));
    }
    inline void clearServerList(){
        void (RakNetServerLocator::*rv)();
        *((void**)&rv) = dlsym("?clearServerList@RakNetServerLocator@@UEAAXXZ");
        return (this->*rv)();
    }
    inline float getPingTimeForGUID(std::string const& a0){
        float (RakNetServerLocator::*rv)(std::string const&);
        *((void**)&rv) = dlsym("?getPingTimeForGUID@RakNetServerLocator@@UEAAMAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z");
        return (this->*rv)(std::forward<std::string const&>(a0));
    }
    inline std::vector<struct PingedCompatibleServer> getServerList() const{
        std::vector<struct PingedCompatibleServer> (RakNetServerLocator::*rv)() const;
        *((void**)&rv) = dlsym("?getServerList@RakNetServerLocator@@UEBA?AV?$vector@UPingedCompatibleServer@@V?$allocator@UPingedCompatibleServer@@@std@@@std@@XZ");
        return (this->*rv)();
    }
    inline bool isIPv4Supported() const{
        bool (RakNetServerLocator::*rv)() const;
        *((void**)&rv) = dlsym("?isIPv4Supported@RakNetServerLocator@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isIPv6Supported() const{
        bool (RakNetServerLocator::*rv)() const;
        *((void**)&rv) = dlsym("?isIPv6Supported@RakNetServerLocator@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline void setHostGUID(class std::function<struct RakNet::RakNetGUID (void)> a0){
        void (RakNetServerLocator::*rv)(class std::function<struct RakNet::RakNetGUID (void)>);
        *((void**)&rv) = dlsym("?setHostGUID@RakNetServerLocator@@UEAAXV?$function@$$A6A?AURakNetGUID@RakNet@@XZ@std@@@Z");
        return (this->*rv)(std::forward<class std::function<struct RakNet::RakNetGUID (void)>>(a0));
    }
    inline void startAnnouncingServer(std::string const& a0, std::string const& a1, int \/*enum enum GameType*\/ a2, int a3, int a4, bool a5){
        void (RakNetServerLocator::*rv)(std::string const&, std::string const&, int \/*enum enum GameType*\/, int, int, bool);
        *((void**)&rv) = dlsym("?startAnnouncingServer@RakNetServerLocator@@UEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0W4GameType@@HH_N@Z");
        return (this->*rv)(std::forward<std::string const&>(a0), std::forward<std::string const&>(a1), std::forward<int \/*enum enum GameType*\/>(a2), std::forward<int>(a3), std::forward<int>(a4), std::forward<bool>(a5));
    }
    inline void startServerDiscovery(struct PortPair a0){
        void (RakNetServerLocator::*rv)(struct PortPair);
        *((void**)&rv) = dlsym("?startServerDiscovery@RakNetServerLocator@@UEAAXUPortPair@@@Z");
        return (this->*rv)(std::forward<struct PortPair>(a0));
    }
    inline void stopAnnouncingServer(){
        void (RakNetServerLocator::*rv)();
        *((void**)&rv) = dlsym("?stopAnnouncingServer@RakNetServerLocator@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void stopServerDiscovery(){
        void (RakNetServerLocator::*rv)();
        *((void**)&rv) = dlsym("?stopServerDiscovery@RakNetServerLocator@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void update(){
        void (RakNetServerLocator::*rv)();
        *((void**)&rv) = dlsym("?update@RakNetServerLocator@@UEAAXXZ");
        return (this->*rv)();
    }
    */
    MCAPI static bool parseUnconnectedPongPacketData(std::string const&, std::vector<std::string>&);

protected:

private:
    MCAPI void _activate();
    MCAPI void _addCustomServerFromIpResolver(class AsynchronousIPResolver const&, int);
    MCAPI bool _addCustomServerV4(class AsynchronousIPResolver const&, int);
    MCAPI bool _addCustomServerV6(class AsynchronousIPResolver const&, int);
    MCAPI void _announceServer(struct RakNetServerLocator::AnnounceServerData const&);
    MCAPI void _enqueueStateChangeRequest(enum LocatorStateChangeRequest, struct RakNetServerLocator::AnnounceServerData, struct PortPair);
    MCAPI std::string _getHostGuid(std::string const&, int);
    MCAPI void _getServerOriginalAddress(std::string&, std::string const&);
    MCAPI bool _handleUnconnectedPong(std::string const&, struct RakNet::Packet const*, bool, unsigned __int64);
    MCAPI void _initializeBroadcastAddresses();
    MCAPI bool _onPongReceive(float&, struct RakNet::RakNetGUID const&, unsigned int const&, int);
    MCAPI void _punchHoles();
    MCAPI void _startAnnouncingServer(struct RakNetServerLocator::AnnounceServerData const&);
    MCAPI void _startServerDiscovery(struct PortPair const&);
    MCAPI void _stopAnnouncingServer();
    MCAPI void _stopServerDiscovery();
    MCAPI void _updateNetwork();
    MCAPI bool _updateQueuedPings();
};