// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_ITEMDESCRIPTOR
#include "Extra/ItemDescriptorAPI.hpp"
#undef EXTRA_INCLUDE_PART_ITEMDESCRIPTOR
class ItemDescriptor {
#include "Extra/ItemDescriptorAPI.hpp"
public:
    MCAPI bool deserialize(class BasicLoader&, struct SerializerTraits const&, class BedrockLoadContext const&);
    MCAPI short getAuxValue() const;
    MCAPI class Block const* getBlock() const;
    MCAPI std::string const& getFullName() const;
    MCAPI short getId() const;
    MCAPI int getIdAux() const;
    MCAPI class Item const* getItem() const;
    MCAPI class WeakPtr<class BlockLegacy> const& getLegacyBlock() const;
    MCAPI std::string getRawNameId() const;
    MCAPI std::string getSerializedNameAndAux() const;
    MCAPI std::string const& getTagExpression() const;
    MCAPI bool hasTags() const;
    MCAPI bool isDefinedAsItemName() const;
    MCAPI bool isNull() const;
    MCAPI bool isValid() const;
    MCAPI void operator=(class ItemDescriptor&&);
    MCAPI void operator=(class ItemDescriptor const&);
    MCAPI bool operator==(class ItemDescriptor const&);
    MCAPI bool sameItemAndAux(class ItemDescriptor const&) const;
    MCAPI bool sameItemAndAux(class ItemStack const&) const;
    MCAPI class std::optional<class CompoundTag> save() const;
    MCAPI bool serialize(class BasicSaver&, struct SerializerTraits const&) const;
    MCAPI static void bindType();
    MCAPI static class std::optional<class ItemDescriptor> fromTag(class CompoundTag const*);
    MCAPI static class ItemDescriptor fromTagExpression(std::string const&, enum MolangVersion);

protected:

private:
    MCAPI bool _hasTagOfItem(class Item const*) const;
    MCAPI void _initFromBlockLegacy(class BlockLegacy const&, class WeakPtr<class Item>) const;
    MCAPI void _initFromItem(class WeakPtr<class Item>, short) const;
    MCAPI void _resolveImpl() const;
};