// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "BaseCircuitComponent.hpp"
#define EXTRA_INCLUDE_PART_POWEREDBLOCKCOMPONENT
#include "Extra/PoweredBlockComponentAPI.hpp"
#undef EXTRA_INCLUDE_PART_POWEREDBLOCKCOMPONENT
class PoweredBlockComponent : public BaseCircuitComponent {
#include "Extra/PoweredBlockComponentAPI.hpp"
public:
    /*0*/ virtual ~PoweredBlockComponent();
    /*1*/ virtual int getStrength() const;
    /*2*/ virtual void __unk_vfn_0();
    /*3*/ virtual void setStrength(int);
    /*4*/ virtual void __unk_vfn_1();
    /*5*/ virtual void __unk_vfn_2();
    /*6*/ virtual bool canStopPower() const;
    /*7*/ virtual void setStopPower(bool);
    /*8*/ virtual bool addSource(class CircuitSceneGraph&, class CircuitTrackingInfo const&, int&, bool&);
    /*9*/ virtual bool allowConnection(class CircuitSceneGraph&, class CircuitTrackingInfo const&, bool&);
    /*10*/ virtual void checkLock(class CircuitSystem&, class BlockPos const&);
    /*11*/ virtual bool evaluate(class CircuitSystem&, class BlockPos const&);
    /*12*/ virtual void cacheValues(class CircuitSystem&, class BlockPos const&);
    /*13*/ virtual void updateDependencies(class CircuitSceneGraph&, class BlockPos const&);
    /*14*/ virtual void __unk_vfn_3();
    /*15*/ virtual void __unk_vfn_4();
    /*16*/ virtual void __unk_vfn_5();
    /*17*/ virtual void __unk_vfn_6();
    /*18*/ virtual int /*enum enum CircuitComponentType*/ getCircuitComponentType() const;
    /*
    inline bool evaluate(class CircuitSystem& a0, class BlockPos const& a1){
        bool (PoweredBlockComponent::*rv)(class CircuitSystem&, class BlockPos const&);
        *((void**)&rv) = dlsym("?evaluate@PoweredBlockComponent@@UEAA_NAEAVCircuitSystem@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class CircuitSystem&>(a0), std::forward<class BlockPos const&>(a1));
    }
    inline bool canConsumerPower() const{
        bool (PoweredBlockComponent::*rv)() const;
        *((void**)&rv) = dlsym("?canConsumerPower@PoweredBlockComponent@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool hasChildrenSource() const{
        bool (PoweredBlockComponent::*rv)() const;
        *((void**)&rv) = dlsym("?hasChildrenSource@PoweredBlockComponent@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline int \/*enum enum CircuitComponentType*\/ getCircuitComponentType() const{
        int \/*enum enum CircuitComponentType*\/ (PoweredBlockComponent::*rv)() const;
        *((void**)&rv) = dlsym("?getCircuitComponentType@PoweredBlockComponent@@UEBA?AW4CircuitComponentType@@XZ");
        return (this->*rv)();
    }
    inline bool addSource(class CircuitSceneGraph& a0, class CircuitTrackingInfo const& a1, int& a2, bool& a3){
        bool (PoweredBlockComponent::*rv)(class CircuitSceneGraph&, class CircuitTrackingInfo const&, int&, bool&);
        *((void**)&rv) = dlsym("?addSource@PoweredBlockComponent@@UEAA_NAEAVCircuitSceneGraph@@AEBVCircuitTrackingInfo@@AEAHAEA_N@Z");
        return (this->*rv)(std::forward<class CircuitSceneGraph&>(a0), std::forward<class CircuitTrackingInfo const&>(a1), std::forward<int&>(a2), std::forward<bool&>(a3));
    }
    inline bool allowConnection(class CircuitSceneGraph& a0, class CircuitTrackingInfo const& a1, bool& a2){
        bool (PoweredBlockComponent::*rv)(class CircuitSceneGraph&, class CircuitTrackingInfo const&, bool&);
        *((void**)&rv) = dlsym("?allowConnection@PoweredBlockComponent@@UEAA_NAEAVCircuitSceneGraph@@AEBVCircuitTrackingInfo@@AEA_N@Z");
        return (this->*rv)(std::forward<class CircuitSceneGraph&>(a0), std::forward<class CircuitTrackingInfo const&>(a1), std::forward<bool&>(a2));
    }
    inline int getStrength() const{
        int (PoweredBlockComponent::*rv)() const;
        *((void**)&rv) = dlsym("?getStrength@PoweredBlockComponent@@UEBAHXZ");
        return (this->*rv)();
    }
    */

protected:

private:
};