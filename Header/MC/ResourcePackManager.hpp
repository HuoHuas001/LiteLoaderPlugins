// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "Core.hpp"
#define EXTRA_INCLUDE_PART_RESOURCEPACKMANAGER
#include "Extra/ResourcePackManagerAPI.hpp"
#undef EXTRA_INCLUDE_PART_RESOURCEPACKMANAGER
class ResourcePackManager {
#include "Extra/ResourcePackManagerAPI.hpp"
public:
    /*0*/ virtual ~ResourcePackManager();
    /*1*/ virtual bool load(class ResourceLocation const&, std::string&) const;
    /*2*/ virtual bool load(class ResourceLocation const&, std::string&, std::vector<std::string> const&) const;
    /*3*/ virtual bool load(class ResourceLocationPair const&, std::string&, std::vector<std::string> const&) const;
    /*4*/ virtual std::vector<class LoadedResourceData> loadAllVersionsOf(class ResourceLocation const&) const;
    /*5*/ virtual bool isInStreamableLocation(class ResourceLocation const&) const;
    /*6*/ virtual bool isInStreamableLocation(class ResourceLocation const&, std::vector<std::string> const&) const;
    /*7*/ virtual class Core::PathBuffer<std::string > getPath(class ResourceLocation const&) const;
    /*8*/ virtual class Core::PathBuffer<std::string > getPath(class ResourceLocation const&, std::vector<std::string> const&) const;
    /*9*/ virtual class Core::PathBuffer<std::string > getPathContainingResource(class ResourceLocation const&) const;
    /*10*/ virtual class Core::PathBuffer<std::string > getPathContainingResource(class ResourceLocation const&, std::vector<std::string>) const;
    /*11*/ virtual struct std::pair<int, std::string const&> getPackStackIndexOfResource(class ResourceLocation const&, std::vector<std::string> const&) const;
    /*12*/ virtual bool hasCapability(class gsl::basic_string_span<char const, -1>) const;
    /*
    inline struct std::pair<int, std::string const&> getPackStackIndexOfResource(class ResourceLocation const& a0, std::vector<std::string> const& a1) const{
        struct std::pair<int, std::string const&> (ResourcePackManager::*rv)(class ResourceLocation const&, std::vector<std::string> const&) const;
        *((void**)&rv) = dlsym("?getPackStackIndexOfResource@ResourcePackManager@@UEBA?AU?$pair@HAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@AEBVResourceLocation@@AEBV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z");
        return (this->*rv)(std::forward<class ResourceLocation const&>(a0), std::forward<std::vector<std::string> const&>(a1));
    }
    inline class Core::PathBuffer<std::string > getPath(class ResourceLocation const& a0) const{
        class Core::PathBuffer<std::string > (ResourcePackManager::*rv)(class ResourceLocation const&) const;
        *((void**)&rv) = dlsym("?getPath@ResourcePackManager@@UEBA?AV?$PathBuffer@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Core@@AEBVResourceLocation@@@Z");
        return (this->*rv)(std::forward<class ResourceLocation const&>(a0));
    }
    inline class Core::PathBuffer<std::string > getPath(class ResourceLocation const& a0, std::vector<std::string> const& a1) const{
        class Core::PathBuffer<std::string > (ResourcePackManager::*rv)(class ResourceLocation const&, std::vector<std::string> const&) const;
        *((void**)&rv) = dlsym("?getPath@ResourcePackManager@@UEBA?AV?$PathBuffer@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Core@@AEBVResourceLocation@@AEBV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z");
        return (this->*rv)(std::forward<class ResourceLocation const&>(a0), std::forward<std::vector<std::string> const&>(a1));
    }
    inline class Core::PathBuffer<std::string > getPathContainingResource(class ResourceLocation const& a0) const{
        class Core::PathBuffer<std::string > (ResourcePackManager::*rv)(class ResourceLocation const&) const;
        *((void**)&rv) = dlsym("?getPathContainingResource@ResourcePackManager@@UEBA?AV?$PathBuffer@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Core@@AEBVResourceLocation@@@Z");
        return (this->*rv)(std::forward<class ResourceLocation const&>(a0));
    }
    inline class Core::PathBuffer<std::string > getPathContainingResource(class ResourceLocation const& a0, std::vector<std::string> a1) const{
        class Core::PathBuffer<std::string > (ResourcePackManager::*rv)(class ResourceLocation const&, std::vector<std::string>) const;
        *((void**)&rv) = dlsym("?getPathContainingResource@ResourcePackManager@@UEBA?AV?$PathBuffer@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Core@@AEBVResourceLocation@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z");
        return (this->*rv)(std::forward<class ResourceLocation const&>(a0), std::forward<std::vector<std::string>>(a1));
    }
    inline bool hasCapability(class gsl::basic_string_span<char const, -1> a0) const{
        bool (ResourcePackManager::*rv)(class gsl::basic_string_span<char const, -1>) const;
        *((void**)&rv) = dlsym("?hasCapability@ResourcePackManager@@UEBA_NV?$basic_string_span@$$CBD$0?0@gsl@@@Z");
        return (this->*rv)(std::forward<class gsl::basic_string_span<char const, -1>>(a0));
    }
    inline bool isInStreamableLocation(class ResourceLocation const& a0) const{
        bool (ResourcePackManager::*rv)(class ResourceLocation const&) const;
        *((void**)&rv) = dlsym("?isInStreamableLocation@ResourcePackManager@@UEBA_NAEBVResourceLocation@@@Z");
        return (this->*rv)(std::forward<class ResourceLocation const&>(a0));
    }
    inline bool isInStreamableLocation(class ResourceLocation const& a0, std::vector<std::string> const& a1) const{
        bool (ResourcePackManager::*rv)(class ResourceLocation const&, std::vector<std::string> const&) const;
        *((void**)&rv) = dlsym("?isInStreamableLocation@ResourcePackManager@@UEBA_NAEBVResourceLocation@@AEBV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z");
        return (this->*rv)(std::forward<class ResourceLocation const&>(a0), std::forward<std::vector<std::string> const&>(a1));
    }
    inline bool load(class ResourceLocation const& a0, std::string& a1) const{
        bool (ResourcePackManager::*rv)(class ResourceLocation const&, std::string&) const;
        *((void**)&rv) = dlsym("?load@ResourcePackManager@@UEBA_NAEBVResourceLocation@@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z");
        return (this->*rv)(std::forward<class ResourceLocation const&>(a0), std::forward<std::string&>(a1));
    }
    inline bool load(class ResourceLocation const& a0, std::string& a1, std::vector<std::string> const& a2) const{
        bool (ResourcePackManager::*rv)(class ResourceLocation const&, std::string&, std::vector<std::string> const&) const;
        *((void**)&rv) = dlsym("?load@ResourcePackManager@@UEBA_NAEBVResourceLocation@@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z");
        return (this->*rv)(std::forward<class ResourceLocation const&>(a0), std::forward<std::string&>(a1), std::forward<std::vector<std::string> const&>(a2));
    }
    inline bool load(class ResourceLocationPair const& a0, std::string& a1, std::vector<std::string> const& a2) const{
        bool (ResourcePackManager::*rv)(class ResourceLocationPair const&, std::string&, std::vector<std::string> const&) const;
        *((void**)&rv) = dlsym("?load@ResourcePackManager@@UEBA_NAEBVResourceLocationPair@@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@4@@Z");
        return (this->*rv)(std::forward<class ResourceLocationPair const&>(a0), std::forward<std::string&>(a1), std::forward<std::vector<std::string> const&>(a2));
    }
    inline std::vector<class LoadedResourceData> loadAllVersionsOf(class ResourceLocation const& a0) const{
        std::vector<class LoadedResourceData> (ResourcePackManager::*rv)(class ResourceLocation const&) const;
        *((void**)&rv) = dlsym("?loadAllVersionsOf@ResourcePackManager@@UEBA?AV?$vector@VLoadedResourceData@@V?$allocator@VLoadedResourceData@@@std@@@std@@AEBVResourceLocation@@@Z");
        return (this->*rv)(std::forward<class ResourceLocation const&>(a0));
    }
    */
    MCAPI int composeFullStack(class ResourcePackStack&, class ResourcePackStack const&, class ResourcePackStack const&, class ResourcePackStack const&) const;
    MCAPI class SemVersion getFullStackMinEngineVersion() const;
    MCAPI class PackSourceReport const* getPackSourceReport() const;
    MCAPI std::vector<class Core::PathBuffer<std::string >> getResourcesOfGroup(std::string const&) const;
    MCAPI std::vector<class Core::PathBuffer<std::string >> getResourcesOfGroup(class PackInstance const&, std::string const&) const;
    MCAPI class ResourcePackStack const& getStack(enum ResourcePackStackType) const;
    MCAPI void handlePendingStackChanges();
    MCAPI bool hasResource(class ResourceLocation const&) const;
    MCAPI bool loadAllVersionsOf(class ResourceLocation const&, class ResourcePackMergeStrategy&) const;
    MCAPI void registerResourcePackListener(class ResourcePackListener&);
    MCAPI void setPackSourceReport(class PackSourceReport&&);
    MCAPI bool setStack(std::unique_ptr<class ResourcePackStack>, enum ResourcePackStackType, bool);
    MCAPI void unRegisterResourcePackListener(class ResourcePackListener&);

protected:

private:
    MCAPI void _calculateMinEngineVersionFromFullStack();
    MCAPI void _composeFullStack();
    MCAPI class PackInstance* _getPackForResource(class Core::Path const&) const;
    MCAPI void _getResourcesOfGroup(class PackInstance const&, std::string const&, std::vector<class Core::PathBuffer<std::string >>&) const;
    MCAPI void _updateLanguageSubpacks();
};