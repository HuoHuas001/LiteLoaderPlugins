// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#define EXTRA_INCLUDE_PART_BLOCKTICKINGQUEUE
#include "Extra/BlockTickingQueueAPI.hpp"
#undef EXTRA_INCLUDE_PART_BLOCKTICKINGQUEUE
class BlockTickingQueue {
#include "Extra/BlockTickingQueueAPI.hpp"

public:
    MCAPI void acquireAllRandomTicks(class LevelChunk&);
    MCAPI void acquireAllTicks(class LevelChunk&);
    MCAPI void add(class BlockSource&, class BlockPos const&, class Block const&, int, int);
    MCAPI void addTickToLevelChunk(class LevelChunk&, class BlockPos const&, class Block const&, int, int);
    MCAPI void eliminateAllTicksZeroAndAbove();
    MCAPI void eliminateDuplicatesOf(class BlockLegacy const&);
    MCAPI unsigned __int64 getMemoryEstimate() const;
    MCAPI class std::unordered_multimap<class BlockPos, struct TickDelayBlock, struct std::hash<class BlockPos>, struct std::equal_to<class BlockPos>, class std::allocator<struct std::pair<class BlockPos const, struct TickDelayBlock>>> getTickDelaysInArea(class BoundingBox const&) const;
    MCAPI bool hasTickInPendingTicks(class BlockPos const&) const;
    MCAPI bool isEmpty() const;
    MCAPI void load(class CompoundTag const&, class BlockPalette const&);
    MCAPI void remove(class std::function<bool(class TickNextTickData const&)>&&);
    MCAPI void save(class CompoundTag&) const;
    MCAPI void setOwningChunk(class LevelChunk*);
    MCAPI void tickAllPendingTicks(class BlockSource&, unsigned __int64);
    MCAPI bool tickPendingTicks(class BlockSource&, struct Tick const&, int, bool);
    MCAPI int ticksFromNow(int) const;

private:
    MCAPI void _acquireAllTicks(class BlockTickingQueue&);
    MCAPI void _addToNextTickQueue(class BlockPos const&, class Block const&, int, int);

protected:
    MCAPI void _saveQueue(class ListTag&, class BlockTickingQueue::TickDataSet const&) const;
};