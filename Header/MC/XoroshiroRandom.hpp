// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_XOROSHIRORANDOM
#include "Extra/XoroshiroRandomAPI.hpp"
#undef EXTRA_INCLUDE_PART_XOROSHIRORANDOM
class XoroshiroRandom {
#include "Extra/XoroshiroRandomAPI.hpp"
public:
    /*0*/ virtual ~XoroshiroRandom();
    /*1*/ virtual int nextInt();
    /*2*/ virtual int nextInt(int);
    /*3*/ virtual __int64 nextLong();
    /*4*/ virtual bool nextBoolean();
    /*5*/ virtual float nextFloat();
    /*6*/ virtual double nextDouble();
    /*7*/ virtual double nextGaussianDouble();
    /*8*/ virtual void consumeCount(unsigned int);
    /*9*/ virtual std::unique_ptr<class IRandom> fork();
    /*10*/ virtual std::unique_ptr<class IPositionalRandomFactory> forkPositional();
    /*
    inline void consumeCount(unsigned int a0){
        void (XoroshiroRandom::*rv)(unsigned int);
        *((void**)&rv) = dlsym("?consumeCount@XoroshiroRandom@@UEAAXI@Z");
        return (this->*rv)(std::forward<unsigned int>(a0));
    }
    inline std::unique_ptr<class IRandom> fork(){
        std::unique_ptr<class IRandom> (XoroshiroRandom::*rv)();
        *((void**)&rv) = dlsym("?fork@XoroshiroRandom@@UEAA?AV?$unique_ptr@VIRandom@@U?$default_delete@VIRandom@@@std@@@std@@XZ");
        return (this->*rv)();
    }
    inline std::unique_ptr<class IPositionalRandomFactory> forkPositional(){
        std::unique_ptr<class IPositionalRandomFactory> (XoroshiroRandom::*rv)();
        *((void**)&rv) = dlsym("?forkPositional@XoroshiroRandom@@UEAA?AV?$unique_ptr@VIPositionalRandomFactory@@U?$default_delete@VIPositionalRandomFactory@@@std@@@std@@XZ");
        return (this->*rv)();
    }
    inline bool nextBoolean(){
        bool (XoroshiroRandom::*rv)();
        *((void**)&rv) = dlsym("?nextBoolean@XoroshiroRandom@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline double nextDouble(){
        double (XoroshiroRandom::*rv)();
        *((void**)&rv) = dlsym("?nextDouble@XoroshiroRandom@@UEAANXZ");
        return (this->*rv)();
    }
    inline float nextFloat(){
        float (XoroshiroRandom::*rv)();
        *((void**)&rv) = dlsym("?nextFloat@XoroshiroRandom@@UEAAMXZ");
        return (this->*rv)();
    }
    inline double nextGaussianDouble(){
        double (XoroshiroRandom::*rv)();
        *((void**)&rv) = dlsym("?nextGaussianDouble@XoroshiroRandom@@UEAANXZ");
        return (this->*rv)();
    }
    inline int nextInt(int a0){
        int (XoroshiroRandom::*rv)(int);
        *((void**)&rv) = dlsym("?nextInt@XoroshiroRandom@@UEAAHH@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline int nextInt(){
        int (XoroshiroRandom::*rv)();
        *((void**)&rv) = dlsym("?nextInt@XoroshiroRandom@@UEAAHXZ");
        return (this->*rv)();
    }
    inline __int64 nextLong(){
        __int64 (XoroshiroRandom::*rv)();
        *((void**)&rv) = dlsym("?nextLong@XoroshiroRandom@@UEAA_JXZ");
        return (this->*rv)();
    }
    */

protected:

private:
};