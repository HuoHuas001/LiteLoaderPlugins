// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_MOBEFFECT
#include "Extra/MobEffectAPI.hpp"
#undef EXTRA_INCLUDE_PART_MOBEFFECT
class MobEffect {
#include "Extra/MobEffectAPI.hpp"
public:
    /*0*/ virtual ~MobEffect();
    /*1*/ virtual void applyEffects(class Actor*, int, int) const;
    /*2*/ virtual void removeEffects(class Actor*);
    /*3*/ virtual void applyInstantaneousEffect(class Actor*, class Actor*, class Actor*, int, float) const;
    /*4*/ virtual void __unk_vfn_0();
    /*5*/ virtual float getAttributeModifierValue(int, class AttributeModifier const&) const;
    /*
    inline bool isInstantaneous() const{
        bool (MobEffect::*rv)() const;
        *((void**)&rv) = dlsym("?isInstantaneous@MobEffect@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline void applyEffects(class Actor* a0, int a1, int a2) const{
        void (MobEffect::*rv)(class Actor*, int, int) const;
        *((void**)&rv) = dlsym("?applyEffects@MobEffect@@UEBAXPEAVActor@@HH@Z");
        return (this->*rv)(std::forward<class Actor*>(a0), std::forward<int>(a1), std::forward<int>(a2));
    }
    inline void applyInstantaneousEffect(class Actor* a0, class Actor* a1, class Actor* a2, int a3, float a4) const{
        void (MobEffect::*rv)(class Actor*, class Actor*, class Actor*, int, float) const;
        *((void**)&rv) = dlsym("?applyInstantaneousEffect@MobEffect@@UEBAXPEAVActor@@00HM@Z");
        return (this->*rv)(std::forward<class Actor*>(a0), std::forward<class Actor*>(a1), std::forward<class Actor*>(a2), std::forward<int>(a3), std::forward<float>(a4));
    }
    inline float getAttributeModifierValue(int a0, class AttributeModifier const& a1) const{
        float (MobEffect::*rv)(int, class AttributeModifier const&) const;
        *((void**)&rv) = dlsym("?getAttributeModifierValue@MobEffect@@UEBAMHAEBVAttributeModifier@@@Z");
        return (this->*rv)(std::forward<int>(a0), std::forward<class AttributeModifier const&>(a1));
    }
    inline void removeEffects(class Actor* a0){
        void (MobEffect::*rv)(class Actor*);
        *((void**)&rv) = dlsym("?removeEffects@MobEffect@@UEAAXPEAVActor@@@Z");
        return (this->*rv)(std::forward<class Actor*>(a0));
    }
    */
    MCAPI void addAttributeBuff(class Attribute const&, class std::shared_ptr<class AttributeBuff>);
    MCAPI void addAttributeModifier(class Attribute const&, class std::shared_ptr<class AttributeModifier>);
    MCAPI class HashedString const& getComponentName() const;
    MCAPI std::string const& getDescriptionId() const;
    MCAPI float getDurationModifier() const;
    MCAPI unsigned int getId() const;
    MCAPI std::string const& getResourceName() const;
    MCAPI bool isHarmful() const;
    MCAPI bool isVisible() const;
    MCAPI void setDurationAmplifier(class std::shared_ptr<class Amplifier>);
    MCAPI void setValueAmplifier(class std::shared_ptr<class Amplifier>);
    MCAPI std::vector<struct std::pair<class Attribute const*, class std::shared_ptr<class AttributeModifier> >> const& viewAttributeModifiers() const;
    MCAPI static class mce::Color const DEFAULT_COLOR;
    MCAPI static class MobEffect* getById(int);
    MCAPI static class MobEffect* getByName(std::string const&);
    MCAPI static void initEffects(class ResourcePackManager*, class Experiments const&);
    MCAPI static void shutdownEffects();

protected:
    MCAPI class InstantaneousAttributeBuff _createInstantBuff(class AttributeBuff const&, int, float) const;
    MCAPI class TemporalAttributeBuff _createTemporalBuff(class AttributeBuff const&, int, int) const;

private:
    MCAPI static void darknessEffectFactorUpdate(struct MobEffect::FactorCalculationData&, int);
};