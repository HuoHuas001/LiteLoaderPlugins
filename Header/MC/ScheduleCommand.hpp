// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_SCHEDULECOMMAND
#include "Extra/ScheduleCommandAPI.hpp"
#undef EXTRA_INCLUDE_PART_SCHEDULECOMMAND
class ScheduleCommand {
#include "Extra/ScheduleCommandAPI.hpp"
public:
    /*0*/ virtual ~ScheduleCommand();
    /*1*/ virtual void execute(class CommandOrigin const&, class CommandOutput&) const;
    /*
    inline void execute(class CommandOrigin const& a0, class CommandOutput& a1) const{
        void (ScheduleCommand::*rv)(class CommandOrigin const&, class CommandOutput&) const;
        *((void**)&rv) = dlsym("?execute@ScheduleCommand@@UEBAXAEBVCommandOrigin@@AEAVCommandOutput@@@Z");
        return (this->*rv)(std::forward<class CommandOrigin const&>(a0), std::forward<class CommandOutput&>(a1));
    }
    */
    MCAPI static void setup(class CommandRegistry&);

protected:

private:
    MCAPI void _delay(class CommandOrigin const&, class CommandOutput&) const;
    MCAPI void _onAreaLoaded(class CommandOrigin const&, class CommandOutput&) const;
    MCAPI struct ScheduleCommand::FunctionInfo _tryGetFunction(class FunctionManager&, class CommandOutput&) const;
};