// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "Json.hpp"
#define EXTRA_INCLUDE_PART_IFILECHUNKUPLOADER
#include "Extra/IFileChunkUploaderAPI.hpp"
#undef EXTRA_INCLUDE_PART_IFILECHUNKUPLOADER
class IFileChunkUploader {
#include "Extra/IFileChunkUploaderAPI.hpp"
public:
    /*0*/ virtual ~IFileChunkUploader();
    /*1*/ virtual void __unk_vfn_0();
    /*2*/ virtual void initFileUploader(std::string const&, struct FileInfo const&, int, class Json::Value const&, class std::function<void (bool)>) = 0;
    /*3*/ virtual void getServerMissingChunks(struct FileInfo const&, class std::function<void (std::vector<struct FileChunkInfo>)>) const;
    /*4*/ virtual void __unk_vfn_1();
    /*5*/ virtual void uploadChunk(struct FileInfo const&, struct FileChunkInfo const&, std::vector<unsigned char> const&, class std::function<void (bool)>);
    /*6*/ virtual void uploadStream(struct FileInfo const&, unsigned __int64, std::string const&, class std::function<void (int /*enum enum IFileChunkUploader::UploadStreamResult*/)>);
    /*7*/ virtual void __unk_vfn_2() = 0;
    /*8*/ virtual void __unk_vfn_3() = 0;
    /*9*/ virtual void __unk_vfn_4() = 0;
    /*10*/ virtual void __unk_vfn_5() = 0;
    /*11*/ virtual struct FileChunkInfo getChunkInfo(struct FileInfo const&, int) const;
    /*
    inline void confirmChunkReceived(struct FileInfo const& a0, struct FileChunkInfo const& a1){
        void (IFileChunkUploader::*rv)(struct FileInfo const&, struct FileChunkInfo const&);
        *((void**)&rv) = dlsym("?confirmChunkReceived@IFileChunkUploader@@UEAAXAEBUFileInfo@@AEBUFileChunkInfo@@@Z");
        return (this->*rv)(std::forward<struct FileInfo const&>(a0), std::forward<struct FileChunkInfo const&>(a1));
    }
    inline void update(){
        void (IFileChunkUploader::*rv)();
        *((void**)&rv) = dlsym("?update@IFileChunkUploader@@UEAAXXZ");
        return (this->*rv)();
    }
    inline struct FileChunkInfo getChunkInfo(struct FileInfo const& a0, int a1) const{
        struct FileChunkInfo (IFileChunkUploader::*rv)(struct FileInfo const&, int) const;
        *((void**)&rv) = dlsym("?getChunkInfo@IFileChunkUploader@@UEBA?AUFileChunkInfo@@AEBUFileInfo@@H@Z");
        return (this->*rv)(std::forward<struct FileInfo const&>(a0), std::forward<int>(a1));
    }
    inline void getServerMissingChunks(struct FileInfo const& a0, class std::function<void (std::vector<struct FileChunkInfo>)> a1) const{
        void (IFileChunkUploader::*rv)(struct FileInfo const&, class std::function<void (std::vector<struct FileChunkInfo>)>) const;
        *((void**)&rv) = dlsym("?getServerMissingChunks@IFileChunkUploader@@UEBAXAEBUFileInfo@@V?$function@$$A6AXV?$vector@UFileChunkInfo@@V?$allocator@UFileChunkInfo@@@std@@@std@@@Z@std@@@Z");
        return (this->*rv)(std::forward<struct FileInfo const&>(a0), std::forward<class std::function<void (std::vector<struct FileChunkInfo>)>>(a1));
    }
    inline void uploadChunk(struct FileInfo const& a0, struct FileChunkInfo const& a1, std::vector<unsigned char> const& a2, class std::function<void (bool)> a3){
        void (IFileChunkUploader::*rv)(struct FileInfo const&, struct FileChunkInfo const&, std::vector<unsigned char> const&, class std::function<void (bool)>);
        *((void**)&rv) = dlsym("?uploadChunk@IFileChunkUploader@@UEAAXAEBUFileInfo@@AEBUFileChunkInfo@@AEBV?$vector@EV?$allocator@E@std@@@std@@V?$function@$$A6AX_N@Z@5@@Z");
        return (this->*rv)(std::forward<struct FileInfo const&>(a0), std::forward<struct FileChunkInfo const&>(a1), std::forward<std::vector<unsigned char> const&>(a2), std::forward<class std::function<void (bool)>>(a3));
    }
    inline void uploadStream(struct FileInfo const& a0, unsigned __int64 a1, std::string const& a2, class std::function<void (int \/*enum enum IFileChunkUploader::UploadStreamResult*\/)> a3){
        void (IFileChunkUploader::*rv)(struct FileInfo const&, unsigned __int64, std::string const&, class std::function<void (int \/*enum enum IFileChunkUploader::UploadStreamResult*\/)>);
        *((void**)&rv) = dlsym("?uploadStream@IFileChunkUploader@@UEAAXAEBUFileInfo@@_KAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$function@$$A6AXW4UploadStreamResult@IFileChunkUploader@@@Z@4@@Z");
        return (this->*rv)(std::forward<struct FileInfo const&>(a0), std::forward<unsigned __int64>(a1), std::forward<std::string const&>(a2), std::forward<class std::function<void (int \/*enum enum IFileChunkUploader::UploadStreamResult*\/)>>(a3));
    }
    */

protected:

private:
};