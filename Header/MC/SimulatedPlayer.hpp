// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "ServerPlayer.hpp"
#include "Types.hpp"
#include "Bedrock.hpp"
#define EXTRA_INCLUDE_PART_SIMULATEDPLAYER
#include "Extra/SimulatedPlayerAPI.hpp"
#undef EXTRA_INCLUDE_PART_SIMULATEDPLAYER
class SimulatedPlayer : public ServerPlayer {
#include "Extra/SimulatedPlayerAPI.hpp"
public:
    /*10*/ virtual void initializeComponents(int /*enum Actor::InitializationMethod*/, class VariantParameterList const&);
    /*14*/ virtual ~SimulatedPlayer();
    /*20*/ virtual bool isRuntimePredictedMovementEnabled() const;
    /*22*/ virtual void unk_vfn_22();
    /*36*/ virtual class Vec3 getInterpolatedRidingOffset(float) const;
    /*41*/ virtual void unk_vfn_41();
    /*61*/ virtual void unk_vfn_61();
    /*68*/ virtual void unk_vfn_68();
    /*82*/ virtual void unk_vfn_82();
    /*87*/ virtual void unk_vfn_87();
    /*88*/ virtual void playerTouch(class Player&);
    /*94*/ virtual void unk_vfn_94();
    /*97*/ virtual void unk_vfn_97();
    /*104*/ virtual void unk_vfn_104();
    /*106*/ virtual void unk_vfn_106();
    /*107*/ virtual void unk_vfn_107();
    /*108*/ virtual void unk_vfn_108();
    /*112*/ virtual class Actor* findAttackTarget();
    /*120*/ virtual void onTame();
    /*121*/ virtual void onFailedTame();
    /*130*/ virtual void vehicleLanded(class Vec3 const&, class Vec3 const&);
    /*143*/ virtual float getPickRadius();
    /*161*/ virtual class ItemStack const& getCarriedItem() const;
    /*171*/ virtual class HashedString const& queryEntityRenderer() const;
    /*172*/ virtual struct ActorUniqueID getSourceUniqueID() const;
    /*178*/ virtual int getPortalCooldown() const;
    /*182*/ virtual void unk_vfn_182();
    /*193*/ virtual bool canPickupItem(class ItemStack const&) const;
    /*194*/ virtual bool canBePulledIntoVehicle() const;
    /*196*/ virtual void unk_vfn_196();
    /*198*/ virtual void sendMotionPacketIfNeeded();
    /*199*/ virtual bool canSynchronizeNewEntity() const;
    /*221*/ virtual void unk_vfn_221();
    /*222*/ virtual void unk_vfn_222();
    /*228*/ virtual void unk_vfn_228();
    /*233*/ virtual bool canDestroyBlock(class Block const&) const;
    /*234*/ virtual void setAuxValue(int);
    /*242*/ virtual void unk_vfn_242();
    /*245*/ virtual void unk_vfn_245();
    /*257*/ virtual void unk_vfn_257();
    /*265*/ virtual void unk_vfn_265();
    /*274*/ virtual void unk_vfn_274();
    /*276*/ virtual void spawnAnim();
    /*291*/ virtual void aiStep();
    /*304*/ virtual void unk_vfn_304();
    /*306*/ virtual bool isAlliedTo(class Mob*);
    /*308*/ virtual void unk_vfn_308();
    /*332*/ virtual void onBorn(class Actor&, class Actor&);
    /*336*/ virtual int getAttackTime();
    /*337*/ virtual float _getWalkTargetValue(class BlockPos const&);
    /*338*/ virtual bool canExistWhenDisallowMob() const;
    /*339*/ virtual void unk_vfn_339();
    /*347*/ virtual void updateAi();
    /*349*/ virtual void _serverAiMobStep();
    /*355*/ virtual void unk_vfn_355();
    /*365*/ virtual void unk_vfn_365();
    /*370*/ virtual void unk_vfn_370();
    /*371*/ virtual void unk_vfn_371();
    /*373*/ virtual void unk_vfn_373();
    /*375*/ virtual void unk_vfn_375();
    /*381*/ virtual void unk_vfn_381();
    /*382*/ virtual void unk_vfn_382();
    /*385*/ virtual void unk_vfn_385();
    /*386*/ virtual void unk_vfn_386();
    /*388*/ virtual void unk_vfn_388();
    /*389*/ virtual void unk_vfn_389();
    /*398*/ virtual void unk_vfn_398();
    /*399*/ virtual void unk_vfn_399();
    /*403*/ virtual void unk_vfn_403();
    /*410*/ virtual void unk_vfn_410();
    /*438*/ virtual void unk_vfn_438();
    /*439*/ virtual std::string getXuid() const;
    /*440*/ virtual struct PlayerMovementSettings const& getMovementSettings() const;
    /*442*/ virtual class std::shared_ptr<class ChunkViewSource> _createChunkSource(class ChunkSource&);
    /*443*/ virtual int _getSpawnChunkLimit() const;
    /*444*/ virtual void _updateChunkPublisherView(class Vec3 const&, float);

public:
    MCAPI class Bedrock::NonOwnerPointer<class gametest::BaseGameTestHelper> getGameTestHelper() const;
    MCAPI void setGameTestHelper(class Bedrock::NonOwnerPointer<class gametest::BaseGameTestHelper>);
    MCAPI bool simulateAttack(class Actor&);
    MCAPI bool simulateAttack();
    MCAPI bool simulateDestroyBlock(class BlockPos const&, unsigned char);
    MCAPI void simulateDisconnect();
    MCAPI bool simulateInteract(class Actor&);
    MCAPI bool simulateInteract(class BlockPos const&, unsigned char);
    MCAPI bool simulateInteract();
    MCAPI bool simulateJump();
    MCAPI void simulateLocalMove(class Vec3 const&, float);
    MCAPI void simulateLookAt(class Actor&);
    MCAPI void simulateLookAt(class BlockPos const&);
    MCAPI void simulateLookAt(class Vec3 const&);
    MCAPI void simulateMoveToLocation(class Vec3 const&, float);
    MCAPI struct ScriptNavigationResult simulateNavigateToEntity(class Actor&, float);
    MCAPI struct ScriptNavigationResult simulateNavigateToLocation(class Vec3 const&, float);
    MCAPI void simulateNavigateToLocations(std::vector<class Vec3>&&, float);
    MCAPI class ItemStack const& simulateSelectSlot(int);
    MCAPI void simulateSetBodyRotation(float);
    MCAPI void simulateStopDestroyingBlock();
    MCAPI void simulateStopInteracting();
    MCAPI void simulateStopMoving();
    MCAPI void simulateStopUsingItem();
    MCAPI bool simulateUseItem(class ItemStack&);
    MCAPI bool simulateUseItemInSlot(int);
    MCAPI bool simulateUseItemInSlotOnBlock(int, class BlockPos const&, unsigned char, class Vec3 const&);
    MCAPI bool simulateUseItemOnBlock(class ItemStack&, class BlockPos const&, unsigned char, class Vec3 const&);
    MCAPI void simulateWorldMove(class Vec3 const&, float);

    MCAPI static class SimulatedPlayer* create(std::string const&, class BlockPos const&, class AutomaticID<class Dimension, int>, class ServerNetworkHandler&);
    MCAPI static class SimulatedPlayer* tryGetFromEntity(class EntityContext&, bool);

private:
    MCAPI void _addMoveComponent();
    MCAPI struct ScriptNavigationResult _createNavigationResult(class NavigationComponent*) const;
    MCAPI float _getInputSpeed();
    MCAPI void _startCooldown();
    MCAPI bool _trySwing();
    MCAPI void _updateMovement();
};