// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "BlockActor.hpp"
#define EXTRA_INCLUDE_PART_COMMANDBLOCKACTOR
#include "Extra/CommandBlockActorAPI.hpp"
#undef EXTRA_INCLUDE_PART_COMMANDBLOCKACTOR
class CommandBlockActor : public BlockActor {
#include "Extra/CommandBlockActorAPI.hpp"
public:
    /*0*/ virtual ~CommandBlockActor();
    /*1*/ virtual void load(class Level&, class CompoundTag const&, class DataLoadHelper&);
    /*2*/ virtual bool save(class CompoundTag&) const;
    /*3*/ virtual void saveBlockData(class CompoundTag&, class BlockSource&) const;
    /*4*/ virtual void loadBlockData(class CompoundTag const&, class BlockSource&, class DataLoadHelper&);
    /*5*/ virtual void onCustomTagLoadDone(class BlockSource&);
    /*6*/ virtual void tick(class BlockSource&);
    /*7*/ virtual void onChanged(class BlockSource&);
    /*8*/ virtual void onPlace(class BlockSource&);
    /*9*/ virtual void __unk_vfn_0();
    /*10*/ virtual void onRemoved(class BlockSource&);
    /*11*/ virtual void triggerEvent(int, int);
    /*12*/ virtual void __unk_vfn_1();
    /*13*/ virtual void __unk_vfn_2();
    /*14*/ virtual void __unk_vfn_3();
    /*15*/ virtual void __unk_vfn_4();
    /*16*/ virtual class BlockActor* getCrackEntity(class BlockSource&, class BlockPos const&);
    /*17*/ virtual void __unk_vfn_5();
    /*18*/ virtual std::string const& getFilteredCustomName(class UIProfanityContext const&);
    /*19*/ virtual std::string getName() const;
    /*20*/ virtual void setCustomName(std::string const&);
    /*21*/ virtual std::string getImmersiveReaderText(class BlockSource&);
    /*22*/ virtual void __unk_vfn_6();
    /*23*/ virtual class PistonBlockActor* getOwningPiston(class BlockSource&);
    /*24*/ virtual void __unk_vfn_7();
    /*25*/ virtual void __unk_vfn_8();
    /*26*/ virtual void __unk_vfn_9();
    /*27*/ virtual void __unk_vfn_10();
    /*28*/ virtual void __unk_vfn_11();
    /*29*/ virtual void __unk_vfn_12();
    /*30*/ virtual std::unique_ptr<class BlockActorDataPacket> _getUpdatePacket(class BlockSource&);
    /*31*/ virtual void _onUpdatePacket(class CompoundTag const&, class BlockSource&);
    /*32*/ virtual bool _playerCanUpdate(class Player const&) const;
    /*
    inline void onChanged(class BlockSource& a0){
        void (CommandBlockActor::*rv)(class BlockSource&);
        *((void**)&rv) = dlsym("?onChanged@CommandBlockActor@@UEAAXAEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0));
    }
    inline std::unique_ptr<class BlockActorDataPacket> _getUpdatePacket(class BlockSource& a0){
        std::unique_ptr<class BlockActorDataPacket> (CommandBlockActor::*rv)(class BlockSource&);
        *((void**)&rv) = dlsym("?_getUpdatePacket@CommandBlockActor@@MEAA?AV?$unique_ptr@VBlockActorDataPacket@@U?$default_delete@VBlockActorDataPacket@@@std@@@std@@AEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0));
    }
    inline void _onUpdatePacket(class CompoundTag const& a0, class BlockSource& a1){
        void (CommandBlockActor::*rv)(class CompoundTag const&, class BlockSource&);
        *((void**)&rv) = dlsym("?_onUpdatePacket@CommandBlockActor@@MEAAXAEBVCompoundTag@@AEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class CompoundTag const&>(a0), std::forward<class BlockSource&>(a1));
    }
    inline bool _playerCanUpdate(class Player const& a0) const{
        bool (CommandBlockActor::*rv)(class Player const&) const;
        *((void**)&rv) = dlsym("?_playerCanUpdate@CommandBlockActor@@MEBA_NAEBVPlayer@@@Z");
        return (this->*rv)(std::forward<class Player const&>(a0));
    }
    inline std::string const& getCustomName() const{
        std::string const& (CommandBlockActor::*rv)() const;
        *((void**)&rv) = dlsym("?getCustomName@CommandBlockActor@@UEBAAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ");
        return (this->*rv)();
    }
    inline std::string const& getFilteredCustomName(class UIProfanityContext const& a0){
        std::string const& (CommandBlockActor::*rv)(class UIProfanityContext const&);
        *((void**)&rv) = dlsym("?getFilteredCustomName@CommandBlockActor@@UEAAAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBVUIProfanityContext@@@Z");
        return (this->*rv)(std::forward<class UIProfanityContext const&>(a0));
    }
    inline void load(class Level& a0, class CompoundTag const& a1, class DataLoadHelper& a2){
        void (CommandBlockActor::*rv)(class Level&, class CompoundTag const&, class DataLoadHelper&);
        *((void**)&rv) = dlsym("?load@CommandBlockActor@@UEAAXAEAVLevel@@AEBVCompoundTag@@AEAVDataLoadHelper@@@Z");
        return (this->*rv)(std::forward<class Level&>(a0), std::forward<class CompoundTag const&>(a1), std::forward<class DataLoadHelper&>(a2));
    }
    inline void loadBlockData(class CompoundTag const& a0, class BlockSource& a1, class DataLoadHelper& a2){
        void (CommandBlockActor::*rv)(class CompoundTag const&, class BlockSource&, class DataLoadHelper&);
        *((void**)&rv) = dlsym("?loadBlockData@CommandBlockActor@@UEAAXAEBVCompoundTag@@AEAVBlockSource@@AEAVDataLoadHelper@@@Z");
        return (this->*rv)(std::forward<class CompoundTag const&>(a0), std::forward<class BlockSource&>(a1), std::forward<class DataLoadHelper&>(a2));
    }
    inline void onCustomTagLoadDone(class BlockSource& a0){
        void (CommandBlockActor::*rv)(class BlockSource&);
        *((void**)&rv) = dlsym("?onCustomTagLoadDone@CommandBlockActor@@UEAAXAEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0));
    }
    inline void onPlace(class BlockSource& a0){
        void (CommandBlockActor::*rv)(class BlockSource&);
        *((void**)&rv) = dlsym("?onPlace@CommandBlockActor@@UEAAXAEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0));
    }
    inline bool save(class CompoundTag& a0) const{
        bool (CommandBlockActor::*rv)(class CompoundTag&) const;
        *((void**)&rv) = dlsym("?save@CommandBlockActor@@UEBA_NAEAVCompoundTag@@@Z");
        return (this->*rv)(std::forward<class CompoundTag&>(a0));
    }
    inline void saveBlockData(class CompoundTag& a0, class BlockSource& a1) const{
        void (CommandBlockActor::*rv)(class CompoundTag&, class BlockSource&) const;
        *((void**)&rv) = dlsym("?saveBlockData@CommandBlockActor@@UEBAXAEAVCompoundTag@@AEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class CompoundTag&>(a0), std::forward<class BlockSource&>(a1));
    }
    inline void setCustomName(std::string const& a0){
        void (CommandBlockActor::*rv)(std::string const&);
        *((void**)&rv) = dlsym("?setCustomName@CommandBlockActor@@UEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z");
        return (this->*rv)(std::forward<std::string const&>(a0));
    }
    */
    MCAPI class BaseCommandBlock& getBaseCommandBlock();
    MCAPI std::string const& getCommand() const;
    MCAPI class CommandBlock const* getCommandBlock(class BlockSource&) const;
    MCAPI bool getConditionalMode(class BlockSource&) const;
    MCAPI int getDelayOnActivation() const;
    MCAPI enum CommandBlockMode getMode(class BlockSource&) const;
    MCAPI bool getPowered() const;
    MCAPI int getSuccessCount() const;
    MCAPI int getTickDelay() const;
    MCAPI bool isAutomatic() const;
    MCAPI bool markConditionMet(class BlockSource&);
    MCAPI void markForSaving(class BlockSource&);
    MCAPI void markForSaving(class BlockSource&, int, bool);
    MCAPI bool performCommand(class BlockSource&);
    MCAPI void setPowered(bool);
    MCAPI void setSuccessCount(int);
    MCAPI void updateBlock(class BlockSource&, std::string const&, std::string const&, enum CommandBlockMode, bool, bool, bool, int, bool);
    MCAPI bool wasConditionMet();

protected:

private:
    MCAPI void _setAutomatic(class BlockSource&, bool, enum CommandBlockMode);
};