// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "ProducerComponent.hpp"
#define EXTRA_INCLUDE_PART_REDSTONETORCHCAPACITOR
#include "Extra/RedstoneTorchCapacitorAPI.hpp"
#undef EXTRA_INCLUDE_PART_REDSTONETORCHCAPACITOR
class RedstoneTorchCapacitor : public ProducerComponent {
#include "Extra/RedstoneTorchCapacitorAPI.hpp"
public:
    /*0*/ virtual ~RedstoneTorchCapacitor();
    /*1*/ virtual int getStrength() const;
    /*2*/ virtual void __unk_vfn_0();
    /*3*/ virtual void __unk_vfn_1();
    /*4*/ virtual void __unk_vfn_2();
    /*5*/ virtual bool removeSource(class BlockPos const&, class BaseCircuitComponent const*);
    /*6*/ virtual bool addSource(class CircuitSceneGraph&, class CircuitTrackingInfo const&, int&, bool&);
    /*7*/ virtual bool allowConnection(class CircuitSceneGraph&, class CircuitTrackingInfo const&, bool&);
    /*8*/ virtual void checkLock(class CircuitSystem&, class BlockPos const&);
    /*9*/ virtual bool evaluate(class CircuitSystem&, class BlockPos const&);
    /*10*/ virtual void cacheValues(class CircuitSystem&, class BlockPos const&);
    /*11*/ virtual void updateDependencies(class CircuitSceneGraph&, class BlockPos const&);
    /*12*/ virtual void __unk_vfn_3();
    /*13*/ virtual void __unk_vfn_4();
    /*14*/ virtual void __unk_vfn_5();
    /*15*/ virtual void __unk_vfn_6();
    /*16*/ virtual int /*enum enum CircuitComponentType*/ getCircuitComponentType() const;
    /*
    inline unsigned char getPoweroutDirection() const{
        unsigned char (RedstoneTorchCapacitor::*rv)() const;
        *((void**)&rv) = dlsym("?getPoweroutDirection@RedstoneTorchCapacitor@@UEBAEXZ");
        return (this->*rv)();
    }
    inline bool isHalfPulse() const{
        bool (RedstoneTorchCapacitor::*rv)() const;
        *((void**)&rv) = dlsym("?isHalfPulse@RedstoneTorchCapacitor@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool addSource(class CircuitSceneGraph& a0, class CircuitTrackingInfo const& a1, int& a2, bool& a3){
        bool (RedstoneTorchCapacitor::*rv)(class CircuitSceneGraph&, class CircuitTrackingInfo const&, int&, bool&);
        *((void**)&rv) = dlsym("?addSource@RedstoneTorchCapacitor@@UEAA_NAEAVCircuitSceneGraph@@AEBVCircuitTrackingInfo@@AEAHAEA_N@Z");
        return (this->*rv)(std::forward<class CircuitSceneGraph&>(a0), std::forward<class CircuitTrackingInfo const&>(a1), std::forward<int&>(a2), std::forward<bool&>(a3));
    }
    inline bool allowConnection(class CircuitSceneGraph& a0, class CircuitTrackingInfo const& a1, bool& a2){
        bool (RedstoneTorchCapacitor::*rv)(class CircuitSceneGraph&, class CircuitTrackingInfo const&, bool&);
        *((void**)&rv) = dlsym("?allowConnection@RedstoneTorchCapacitor@@UEAA_NAEAVCircuitSceneGraph@@AEBVCircuitTrackingInfo@@AEA_N@Z");
        return (this->*rv)(std::forward<class CircuitSceneGraph&>(a0), std::forward<class CircuitTrackingInfo const&>(a1), std::forward<bool&>(a2));
    }
    inline void cacheValues(class CircuitSystem& a0, class BlockPos const& a1){
        void (RedstoneTorchCapacitor::*rv)(class CircuitSystem&, class BlockPos const&);
        *((void**)&rv) = dlsym("?cacheValues@RedstoneTorchCapacitor@@UEAAXAEAVCircuitSystem@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class CircuitSystem&>(a0), std::forward<class BlockPos const&>(a1));
    }
    inline bool evaluate(class CircuitSystem& a0, class BlockPos const& a1){
        bool (RedstoneTorchCapacitor::*rv)(class CircuitSystem&, class BlockPos const&);
        *((void**)&rv) = dlsym("?evaluate@RedstoneTorchCapacitor@@UEAA_NAEAVCircuitSystem@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class CircuitSystem&>(a0), std::forward<class BlockPos const&>(a1));
    }
    inline int \/*enum enum CircuitComponentType*\/ getCircuitComponentType() const{
        int \/*enum enum CircuitComponentType*\/ (RedstoneTorchCapacitor::*rv)() const;
        *((void**)&rv) = dlsym("?getCircuitComponentType@RedstoneTorchCapacitor@@UEBA?AW4CircuitComponentType@@XZ");
        return (this->*rv)();
    }
    inline int getStrength() const{
        int (RedstoneTorchCapacitor::*rv)() const;
        *((void**)&rv) = dlsym("?getStrength@RedstoneTorchCapacitor@@UEBAHXZ");
        return (this->*rv)();
    }
    inline bool removeSource(class BlockPos const& a0, class BaseCircuitComponent const* a1){
        bool (RedstoneTorchCapacitor::*rv)(class BlockPos const&, class BaseCircuitComponent const*);
        *((void**)&rv) = dlsym("?removeSource@RedstoneTorchCapacitor@@UEAA_NAEBVBlockPos@@PEBVBaseCircuitComponent@@@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0), std::forward<class BaseCircuitComponent const*>(a1));
    }
    inline void updateDependencies(class CircuitSceneGraph& a0, class BlockPos const& a1){
        void (RedstoneTorchCapacitor::*rv)(class CircuitSceneGraph&, class BlockPos const&);
        *((void**)&rv) = dlsym("?updateDependencies@RedstoneTorchCapacitor@@EEAAXAEAVCircuitSceneGraph@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class CircuitSceneGraph&>(a0), std::forward<class BlockPos const&>(a1));
    }
    */
    MCAPI void resetBurnOutCount();
    MCAPI void setOn(bool);

protected:

private:
    MCAPI int FindStrongestStrength(class BlockPos const&, class CircuitSystem&, bool&);
};