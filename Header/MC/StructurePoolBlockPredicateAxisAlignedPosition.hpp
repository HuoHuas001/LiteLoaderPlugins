// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_STRUCTUREPOOLBLOCKPREDICATEAXISALIGNEDPOSITION
#include "Extra/StructurePoolBlockPredicateAxisAlignedPositionAPI.hpp"
#undef EXTRA_INCLUDE_PART_STRUCTUREPOOLBLOCKPREDICATEAXISALIGNEDPOSITION
class StructurePoolBlockPredicateAxisAlignedPosition {
#include "Extra/StructurePoolBlockPredicateAxisAlignedPositionAPI.hpp"
public:
    /*0*/ virtual ~StructurePoolBlockPredicateAxisAlignedPosition();
    /*1*/ virtual bool test(class BlockPos const&, class BlockPos const&, class Randomize&) const;
    /*
    inline bool test(class Block const& a0, class Randomize& a1) const{
        bool (StructurePoolBlockPredicateAxisAlignedPosition::*rv)(class Block const&, class Randomize&) const;
        *((void**)&rv) = dlsym("?test@StructurePoolBlockPredicateAxisAlignedPosition@@UEBA_NAEBVBlock@@AEAVRandomize@@@Z");
        return (this->*rv)(std::forward<class Block const&>(a0), std::forward<class Randomize&>(a1));
    }
    inline bool test(class BlockPos const& a0, class BlockPos const& a1, class Randomize& a2) const{
        bool (StructurePoolBlockPredicateAxisAlignedPosition::*rv)(class BlockPos const&, class BlockPos const&, class Randomize&) const;
        *((void**)&rv) = dlsym("?test@StructurePoolBlockPredicateAxisAlignedPosition@@UEBA_NAEBVBlockPos@@0AEAVRandomize@@@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0), std::forward<class BlockPos const&>(a1), std::forward<class Randomize&>(a2));
    }
    */

protected:

private:
};