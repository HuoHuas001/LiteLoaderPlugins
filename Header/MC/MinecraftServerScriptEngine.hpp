// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_MINECRAFTSERVERSCRIPTENGINE
#include "Extra/MinecraftServerScriptEngineAPI.hpp"
#undef EXTRA_INCLUDE_PART_MINECRAFTSERVERSCRIPTENGINE
class MinecraftServerScriptEngine {
#include "Extra/MinecraftServerScriptEngineAPI.hpp"
public:
    /*0*/ virtual void __unk_vfn_0();
    /*1*/ virtual void __unk_vfn_1();
    /*2*/ virtual void __unk_vfn_2();
    /*3*/ virtual void __unk_vfn_3();
    /*4*/ virtual int /*enum enum EventResult*/ onServerLevelInitialized(class ServerInstance&, class Level&);
    /*5*/ virtual int /*enum enum EventResult*/ onServerUpdateStart(class ServerInstance&);
    /*6*/ virtual int /*enum enum EventResult*/ onServerUpdateEnd(class ServerInstance&);
    /*7*/ virtual void __unk_vfn_4();
    /*8*/ virtual void __unk_vfn_5();
    /*9*/ virtual int /*enum enum EventResult*/ onServerThreadStarted(class ServerInstance&);
    /*10*/ virtual void __unk_vfn_6();
    /*11*/ virtual void __unk_vfn_7();
    /*12*/ virtual int /*enum enum EventResult*/ onLeaveGameDone(struct ServerInstanceEvent const&);
    /*
    inline void _handleError(class ScriptApi::ScriptReportItem const& a0){
        void (MinecraftServerScriptEngine::*rv)(class ScriptApi::ScriptReportItem const&);
        *((void**)&rv) = dlsym("?_handleError@MinecraftServerScriptEngine@@EEAAXAEBVScriptReportItem@ScriptApi@@@Z");
        return (this->*rv)(std::forward<class ScriptApi::ScriptReportItem const&>(a0));
    }
    inline void _handleWarning(class ScriptApi::ScriptReportItem const& a0){
        void (MinecraftServerScriptEngine::*rv)(class ScriptApi::ScriptReportItem const&);
        *((void**)&rv) = dlsym("?_handleWarning@MinecraftServerScriptEngine@@EEAAXAEBVScriptReportItem@ScriptApi@@@Z");
        return (this->*rv)(std::forward<class ScriptApi::ScriptReportItem const&>(a0));
    }
    inline bool _helpRegisterSystemCallbacks(class ScriptApi::ScriptObjectHandle const& a0){
        bool (MinecraftServerScriptEngine::*rv)(class ScriptApi::ScriptObjectHandle const&);
        *((void**)&rv) = dlsym("?_helpRegisterSystemCallbacks@MinecraftServerScriptEngine@@EEAA_NAEBVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<class ScriptApi::ScriptObjectHandle const&>(a0));
    }
    inline bool _registerSystemObjects(class ScriptApi::ScriptObjectHandle const& a0){
        bool (MinecraftServerScriptEngine::*rv)(class ScriptApi::ScriptObjectHandle const&);
        *((void**)&rv) = dlsym("?_registerSystemObjects@MinecraftServerScriptEngine@@EEAA_NAEBVScriptObjectHandle@ScriptApi@@@Z");
        return (this->*rv)(std::forward<class ScriptApi::ScriptObjectHandle const&>(a0));
    }
    inline bool executeCommand(struct ScriptCommand const& a0){
        bool (MinecraftServerScriptEngine::*rv)(struct ScriptCommand const&);
        *((void**)&rv) = dlsym("?executeCommand@MinecraftServerScriptEngine@@UEAA_NAEBUScriptCommand@@@Z");
        return (this->*rv)(std::forward<struct ScriptCommand const&>(a0));
    }
    inline void onExecuteCommandCalled(class ScriptApi::ScriptVersionInfo const& a0, struct ScriptCommand&& a1){
        void (MinecraftServerScriptEngine::*rv)(class ScriptApi::ScriptVersionInfo const&, struct ScriptCommand&&);
        *((void**)&rv) = dlsym("?onExecuteCommandCalled@MinecraftServerScriptEngine@@UEAAXAEBVScriptVersionInfo@ScriptApi@@$$QEAUScriptCommand@@@Z");
        return (this->*rv)(std::forward<class ScriptApi::ScriptVersionInfo const&>(a0), std::forward<struct ScriptCommand&&>(a1));
    }
    inline int \/*enum enum EventResult*\/ onLeaveGameDone(struct ServerInstanceEvent const& a0){
        int \/*enum enum EventResult*\/ (MinecraftServerScriptEngine::*rv)(struct ServerInstanceEvent const&);
        *((void**)&rv) = dlsym("?onLeaveGameDone@MinecraftServerScriptEngine@@UEAA?AW4EventResult@@AEBUServerInstanceEvent@@@Z");
        return (this->*rv)(std::forward<struct ServerInstanceEvent const&>(a0));
    }
    inline int \/*enum enum EventResult*\/ onLevelTick(){
        int \/*enum enum EventResult*\/ (MinecraftServerScriptEngine::*rv)();
        *((void**)&rv) = dlsym("?onLevelTick@MinecraftServerScriptEngine@@UEAA?AW4EventResult@@XZ");
        return (this->*rv)();
    }
    inline int \/*enum enum EventResult*\/ onServerLevelInitialized(class ServerInstance& a0, class Level& a1){
        int \/*enum enum EventResult*\/ (MinecraftServerScriptEngine::*rv)(class ServerInstance&, class Level&);
        *((void**)&rv) = dlsym("?onServerLevelInitialized@MinecraftServerScriptEngine@@UEAA?AW4EventResult@@AEAVServerInstance@@AEAVLevel@@@Z");
        return (this->*rv)(std::forward<class ServerInstance&>(a0), std::forward<class Level&>(a1));
    }
    inline int \/*enum enum EventResult*\/ onServerThreadStarted(class ServerInstance& a0){
        int \/*enum enum EventResult*\/ (MinecraftServerScriptEngine::*rv)(class ServerInstance&);
        *((void**)&rv) = dlsym("?onServerThreadStarted@MinecraftServerScriptEngine@@UEAA?AW4EventResult@@AEAVServerInstance@@@Z");
        return (this->*rv)(std::forward<class ServerInstance&>(a0));
    }
    inline int \/*enum enum EventResult*\/ onServerUpdateEnd(class ServerInstance& a0){
        int \/*enum enum EventResult*\/ (MinecraftServerScriptEngine::*rv)(class ServerInstance&);
        *((void**)&rv) = dlsym("?onServerUpdateEnd@MinecraftServerScriptEngine@@UEAA?AW4EventResult@@AEAVServerInstance@@@Z");
        return (this->*rv)(std::forward<class ServerInstance&>(a0));
    }
    inline int \/*enum enum EventResult*\/ onServerUpdateStart(class ServerInstance& a0){
        int \/*enum enum EventResult*\/ (MinecraftServerScriptEngine::*rv)(class ServerInstance&);
        *((void**)&rv) = dlsym("?onServerUpdateStart@MinecraftServerScriptEngine@@UEAA?AW4EventResult@@AEAVServerInstance@@@Z");
        return (this->*rv)(std::forward<class ServerInstance&>(a0));
    }
    inline bool setupInterface(){
        bool (MinecraftServerScriptEngine::*rv)();
        *((void**)&rv) = dlsym("?setupInterface@MinecraftServerScriptEngine@@UEAA_NXZ");
        return (this->*rv)();
    }
    */

protected:

private:
    MCAPI void _queueResourcePackScripts(class ResourcePackManager&);
    MCAPI void _registerEventListeners(class Level&, class NetworkHandler&);
    MCAPI void _setupContext(class Minecraft&, class PacketSender&, class entt::basic_registry<enum entt::entity>&);
    MCAPI void _unregisterEventListeners(class Level*, class NetworkHandler&);
};