// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_INPACKAGEPACKSOURCE
#include "Extra/InPackagePackSourceAPI.hpp"
#undef EXTRA_INCLUDE_PART_INPACKAGEPACKSOURCE
class InPackagePackSource {
#include "Extra/InPackagePackSourceAPI.hpp"
public:
    /*0*/ virtual ~InPackagePackSource();
    /*1*/ virtual void __unk_vfn_0();
    /*2*/ virtual void __unk_vfn_1();
    /*3*/ virtual void __unk_vfn_2();
    /*4*/ virtual void __unk_vfn_3();
    /*5*/ virtual class PackSourceReport load(class IPackManifestFactory&, class IContentKeyProvider const&);
    /*
    inline int \/*enum enum PackOrigin*\/ getPackOrigin() const{
        int \/*enum enum PackOrigin*\/ (InPackagePackSource::*rv)() const;
        *((void**)&rv) = dlsym("?getPackOrigin@InPackagePackSource@@UEBA?AW4PackOrigin@@XZ");
        return (this->*rv)();
    }
    inline int \/*enum enum PackType*\/ getPackType() const{
        int \/*enum enum PackType*\/ (InPackagePackSource::*rv)() const;
        *((void**)&rv) = dlsym("?getPackType@InPackagePackSource@@UEBA?AW4PackType@@XZ");
        return (this->*rv)();
    }
    inline void forEachPack(class std::function<void (class Pack&)> a0){
        void (InPackagePackSource::*rv)(class std::function<void (class Pack&)>);
        *((void**)&rv) = dlsym("?forEachPack@InPackagePackSource@@UEAAXV?$function@$$A6AXAEAVPack@@@Z@std@@@Z");
        return (this->*rv)(std::forward<class std::function<void (class Pack&)>>(a0));
    }
    inline void forEachPackConst(class std::function<void (class Pack const&)> a0) const{
        void (InPackagePackSource::*rv)(class std::function<void (class Pack const&)>) const;
        *((void**)&rv) = dlsym("?forEachPackConst@InPackagePackSource@@UEBAXV?$function@$$A6AXAEBVPack@@@Z@std@@@Z");
        return (this->*rv)(std::forward<class std::function<void (class Pack const&)>>(a0));
    }
    inline class PackSourceReport load(class IPackManifestFactory& a0, class IContentKeyProvider const& a1){
        class PackSourceReport (InPackagePackSource::*rv)(class IPackManifestFactory&, class IContentKeyProvider const&);
        *((void**)&rv) = dlsym("?load@InPackagePackSource@@UEAA?AVPackSourceReport@@AEAVIPackManifestFactory@@AEBVIContentKeyProvider@@@Z");
        return (this->*rv)(std::forward<class IPackManifestFactory&>(a0), std::forward<class IContentKeyProvider const&>(a1));
    }
    */

protected:

private:
};