// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_CONTENTLOGFILEENDPOINT
#include "Extra/ContentLogFileEndPointAPI.hpp"
#undef EXTRA_INCLUDE_PART_CONTENTLOGFILEENDPOINT
class ContentLogFileEndPoint {
#include "Extra/ContentLogFileEndPointAPI.hpp"
public:    /*
    inline bool logOnlyOnce() const{
        bool (ContentLogFileEndPoint::*rv)() const;
        *((void**)&rv) = dlsym("?logOnlyOnce@ContentLogFileEndPoint@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isEnabled() const{
        bool (ContentLogFileEndPoint::*rv)() const;
        *((void**)&rv) = dlsym("?isEnabled@ContentLogFileEndPoint@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline void flush(){
        void (ContentLogFileEndPoint::*rv)();
        *((void**)&rv) = dlsym("?flush@ContentLogFileEndPoint@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void log(int \/*enum enum LogArea*\/ a0, int \/*enum enum LogLevel*\/ a1, char const* a2){
        void (ContentLogFileEndPoint::*rv)(int \/*enum enum LogArea*\/, int \/*enum enum LogLevel*\/, char const*);
        *((void**)&rv) = dlsym("?log@ContentLogFileEndPoint@@UEAAXW4LogArea@@W4LogLevel@@PEBD@Z");
        return (this->*rv)(std::forward<int \/*enum enum LogArea*\/>(a0), std::forward<int \/*enum enum LogLevel*\/>(a1), std::forward<char const*>(a2));
    }
    inline void setEnabled(bool a0){
        void (ContentLogFileEndPoint::*rv)(bool);
        *((void**)&rv) = dlsym("?setEnabled@ContentLogFileEndPoint@@UEAAX_N@Z");
        return (this->*rv)(std::forward<bool>(a0));
    }
    */
    MCAPI static class gsl::basic_string_span<char const, -1> const FILE_NAME;

protected:

private:
};