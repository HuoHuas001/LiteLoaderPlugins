// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "Bedrock.hpp"
#define EXTRA_INCLUDE_PART_RANDOM
#include "Extra/RandomAPI.hpp"
#undef EXTRA_INCLUDE_PART_RANDOM
class Random {
#include "Extra/RandomAPI.hpp"
public:
    /*0*/ virtual ~Random();
    /*1*/ virtual int nextInt();
    /*2*/ virtual int nextInt(int);
    /*3*/ virtual __int64 nextLong();
    /*4*/ virtual bool nextBoolean();
    /*5*/ virtual float nextFloat();
    /*6*/ virtual double nextDouble();
    /*7*/ virtual double nextGaussianDouble();
    /*8*/ virtual void consumeCount(unsigned int);
    /*9*/ virtual std::unique_ptr<class IRandom> fork();
    /*
    inline void consumeCount(unsigned int a0){
        void (Random::*rv)(unsigned int);
        *((void**)&rv) = dlsym("?consumeCount@Random@@UEAAXI@Z");
        return (this->*rv)(std::forward<unsigned int>(a0));
    }
    inline std::unique_ptr<class IRandom> fork(){
        std::unique_ptr<class IRandom> (Random::*rv)();
        *((void**)&rv) = dlsym("?fork@Random@@UEAA?AV?$unique_ptr@VIRandom@@U?$default_delete@VIRandom@@@std@@@std@@XZ");
        return (this->*rv)();
    }
    inline bool nextBoolean(){
        bool (Random::*rv)();
        *((void**)&rv) = dlsym("?nextBoolean@Random@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline double nextDouble(){
        double (Random::*rv)();
        *((void**)&rv) = dlsym("?nextDouble@Random@@UEAANXZ");
        return (this->*rv)();
    }
    inline float nextFloat(){
        float (Random::*rv)();
        *((void**)&rv) = dlsym("?nextFloat@Random@@UEAAMXZ");
        return (this->*rv)();
    }
    inline double nextGaussianDouble(){
        double (Random::*rv)();
        *((void**)&rv) = dlsym("?nextGaussianDouble@Random@@UEAANXZ");
        return (this->*rv)();
    }
    inline int nextInt(int a0){
        int (Random::*rv)(int);
        *((void**)&rv) = dlsym("?nextInt@Random@@UEAAHH@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline int nextInt(){
        int (Random::*rv)();
        *((void**)&rv) = dlsym("?nextInt@Random@@UEAAHXZ");
        return (this->*rv)();
    }
    inline __int64 nextLong(){
        __int64 (Random::*rv)();
        *((void**)&rv) = dlsym("?nextLong@Random@@UEAA_JXZ");
        return (this->*rv)();
    }
    */
    MCAPI float nextFloat(float, float);
    MCAPI float nextGaussianFloat();
    MCAPI int nextGaussianInt(int);
    MCAPI int nextInt(int, int);
    MCAPI int nextIntInclusive(int, int);
    MCAPI static class Random& getThreadLocal();

protected:

private:
    MCAPI static class Bedrock::Threading::ThreadLocalObject<class Random, class std::allocator<class Random> > mThreadLocalRandom;
};