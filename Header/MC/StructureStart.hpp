// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_STRUCTURESTART
#include "Extra/StructureStartAPI.hpp"
#undef EXTRA_INCLUDE_PART_STRUCTURESTART
class StructureStart {
#include "Extra/StructureStartAPI.hpp"
public:
    /*0*/ virtual ~StructureStart();
    /*1*/ virtual bool postProcess(class BlockSource&, class Random&, class BoundingBox const&);
    /*
    inline bool isValid() const{
        bool (StructureStart::*rv)() const;
        *((void**)&rv) = dlsym("?isValid@StructureStart@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool postProcess(class BlockSource& a0, class Random& a1, class BoundingBox const& a2){
        bool (StructureStart::*rv)(class BlockSource&, class Random&, class BoundingBox const&);
        *((void**)&rv) = dlsym("?postProcess@StructureStart@@UEAA_NAEAVBlockSource@@AEAVRandom@@AEBVBoundingBox@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0), std::forward<class Random&>(a1), std::forward<class BoundingBox const&>(a2));
    }
    */

protected:
    MCAPI void calculateBoundingBox();
    MCAPI void moveBoundingBoxes(int);
    MCAPI void moveInsideHeights(class Random&, short, short);
    MCAPI void moveToLevel(short, class Random&, int);

private:
};