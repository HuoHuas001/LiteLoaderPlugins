// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_NBTSAVER
#include "Extra/NBTSaverAPI.hpp"
#undef EXTRA_INCLUDE_PART_NBTSAVER
class NBTSaver {
#include "Extra/NBTSaverAPI.hpp"
public:
    /*0*/ virtual ~NBTSaver();
    /*1*/ virtual bool doSerialize(std::string const&);
    /*2*/ virtual void __unk_vfn_0();
    /*3*/ virtual bool doSerialize(float);
    /*4*/ virtual void __unk_vfn_1();
    /*5*/ virtual void __unk_vfn_2();
    /*6*/ virtual void __unk_vfn_3();
    /*7*/ virtual void __unk_vfn_4();
    /*8*/ virtual void __unk_vfn_5();
    /*9*/ virtual void __unk_vfn_6();
    /*10*/ virtual void __unk_vfn_7();
    /*11*/ virtual void __unk_vfn_8();
    /*12*/ virtual void __unk_vfn_9();
    /*13*/ virtual bool doBeginMember(char const*, bool);
    /*14*/ virtual bool doBeginMember(unsigned __int64, std::string const&);
    /*15*/ virtual bool doEndMember();
    /*16*/ virtual bool doBeginArray(unsigned __int64);
    /*17*/ virtual bool doBeginArrayItem(unsigned __int64);
    /*18*/ virtual bool doEndArrayItem();
    /*19*/ virtual void __unk_vfn_10();
    /*20*/ virtual void __unk_vfn_11();
    /*21*/ virtual bool doBeginObject();
    /*
    inline bool doSerialize(unsigned __int64 a0){
        bool (NBTSaver::*rv)(unsigned __int64);
        *((void**)&rv) = dlsym("?doSerialize@NBTSaver@@EEAA_N_K@Z");
        return (this->*rv)(std::forward<unsigned __int64>(a0));
    }
    inline bool doSerialize(double a0){
        bool (NBTSaver::*rv)(double);
        *((void**)&rv) = dlsym("?doSerialize@NBTSaver@@EEAA_NN@Z");
        return (this->*rv)(std::forward<double>(a0));
    }
    inline bool doSerialize(__int64 a0){
        bool (NBTSaver::*rv)(__int64);
        *((void**)&rv) = dlsym("?doSerialize@NBTSaver@@EEAA_N_J@Z");
        return (this->*rv)(std::forward<__int64>(a0));
    }
    inline bool doEndArray(){
        bool (NBTSaver::*rv)();
        *((void**)&rv) = dlsym("?doEndArray@NBTSaver@@EEAA_NXZ");
        return (this->*rv)();
    }
    inline bool doEndObject(){
        bool (NBTSaver::*rv)();
        *((void**)&rv) = dlsym("?doEndObject@NBTSaver@@EEAA_NXZ");
        return (this->*rv)();
    }
    inline bool doBeginObject(unsigned __int64 a0){
        bool (NBTSaver::*rv)(unsigned __int64);
        *((void**)&rv) = dlsym("?doBeginObject@NBTSaver@@EEAA_N_K@Z");
        return (this->*rv)(std::forward<unsigned __int64>(a0));
    }
    inline bool doBeginArray(unsigned __int64 a0){
        bool (NBTSaver::*rv)(unsigned __int64);
        *((void**)&rv) = dlsym("?doBeginArray@NBTSaver@@EEAA_N_K@Z");
        return (this->*rv)(std::forward<unsigned __int64>(a0));
    }
    inline bool doBeginArrayItem(unsigned __int64 a0){
        bool (NBTSaver::*rv)(unsigned __int64);
        *((void**)&rv) = dlsym("?doBeginArrayItem@NBTSaver@@EEAA_N_K@Z");
        return (this->*rv)(std::forward<unsigned __int64>(a0));
    }
    inline bool doBeginMember(char const* a0, bool a1){
        bool (NBTSaver::*rv)(char const*, bool);
        *((void**)&rv) = dlsym("?doBeginMember@NBTSaver@@EEAA_NPEBD_N@Z");
        return (this->*rv)(std::forward<char const*>(a0), std::forward<bool>(a1));
    }
    inline bool doBeginMember(unsigned __int64 a0, std::string const& a1){
        bool (NBTSaver::*rv)(unsigned __int64, std::string const&);
        *((void**)&rv) = dlsym("?doBeginMember@NBTSaver@@EEAA_N_KAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z");
        return (this->*rv)(std::forward<unsigned __int64>(a0), std::forward<std::string const&>(a1));
    }
    inline bool doBeginObject(){
        bool (NBTSaver::*rv)();
        *((void**)&rv) = dlsym("?doBeginObject@NBTSaver@@EEAA_NXZ");
        return (this->*rv)();
    }
    inline bool doEndArrayItem(){
        bool (NBTSaver::*rv)();
        *((void**)&rv) = dlsym("?doEndArrayItem@NBTSaver@@EEAA_NXZ");
        return (this->*rv)();
    }
    inline bool doEndMember(){
        bool (NBTSaver::*rv)();
        *((void**)&rv) = dlsym("?doEndMember@NBTSaver@@EEAA_NXZ");
        return (this->*rv)();
    }
    inline bool doSerialize(std::string const& a0){
        bool (NBTSaver::*rv)(std::string const&);
        *((void**)&rv) = dlsym("?doSerialize@NBTSaver@@EEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z");
        return (this->*rv)(std::forward<std::string const&>(a0));
    }
    inline bool doSerialize(signed char a0){
        bool (NBTSaver::*rv)(signed char);
        *((void**)&rv) = dlsym("?doSerialize@NBTSaver@@EEAA_NC@Z");
        return (this->*rv)(std::forward<signed char>(a0));
    }
    inline bool doSerialize(unsigned char a0){
        bool (NBTSaver::*rv)(unsigned char);
        *((void**)&rv) = dlsym("?doSerialize@NBTSaver@@EEAA_NE@Z");
        return (this->*rv)(std::forward<unsigned char>(a0));
    }
    inline bool doSerialize(bool a0){
        bool (NBTSaver::*rv)(bool);
        *((void**)&rv) = dlsym("?doSerialize@NBTSaver@@EEAA_N_N@Z");
        return (this->*rv)(std::forward<bool>(a0));
    }
    inline bool doSerialize(unsigned short a0){
        bool (NBTSaver::*rv)(unsigned short);
        *((void**)&rv) = dlsym("?doSerialize@NBTSaver@@EEAA_NG@Z");
        return (this->*rv)(std::forward<unsigned short>(a0));
    }
    inline bool doSerialize(short a0){
        bool (NBTSaver::*rv)(short);
        *((void**)&rv) = dlsym("?doSerialize@NBTSaver@@EEAA_NF@Z");
        return (this->*rv)(std::forward<short>(a0));
    }
    inline bool doSerialize(int a0){
        bool (NBTSaver::*rv)(int);
        *((void**)&rv) = dlsym("?doSerialize@NBTSaver@@EEAA_NH@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline bool doSerialize(unsigned int a0){
        bool (NBTSaver::*rv)(unsigned int);
        *((void**)&rv) = dlsym("?doSerialize@NBTSaver@@EEAA_NI@Z");
        return (this->*rv)(std::forward<unsigned int>(a0));
    }
    inline bool doSerialize(float a0){
        bool (NBTSaver::*rv)(float);
        *((void**)&rv) = dlsym("?doSerialize@NBTSaver@@EEAA_NM@Z");
        return (this->*rv)(std::forward<float>(a0));
    }
    */
    MCAPI class CompoundTag getSavedCompoundTag();

protected:

private:
    MCAPI bool _serializeTag(std::unique_ptr<class Tag>);
};