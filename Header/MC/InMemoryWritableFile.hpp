// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_INMEMORYWRITABLEFILE
#include "Extra/InMemoryWritableFileAPI.hpp"
#undef EXTRA_INCLUDE_PART_INMEMORYWRITABLEFILE
class InMemoryWritableFile {
#include "Extra/InMemoryWritableFileAPI.hpp"
public:
    /*0*/ virtual ~InMemoryWritableFile();
    /*1*/ virtual class leveldb::Status Append(class leveldb::Slice const&);
    /*2*/ virtual class leveldb::Status Close();
    /*
    inline class leveldb::Status Sync(){
        class leveldb::Status (InMemoryWritableFile::*rv)();
        *((void**)&rv) = dlsym("?Sync@InMemoryWritableFile@@UEAA?AVStatus@leveldb@@XZ");
        return (this->*rv)();
    }
    inline class leveldb::Status Flush(){
        class leveldb::Status (InMemoryWritableFile::*rv)();
        *((void**)&rv) = dlsym("?Flush@InMemoryWritableFile@@UEAA?AVStatus@leveldb@@XZ");
        return (this->*rv)();
    }
    inline class leveldb::Status Append(class leveldb::Slice const& a0){
        class leveldb::Status (InMemoryWritableFile::*rv)(class leveldb::Slice const&);
        *((void**)&rv) = dlsym("?Append@InMemoryWritableFile@@UEAA?AVStatus@leveldb@@AEBVSlice@3@@Z");
        return (this->*rv)(std::forward<class leveldb::Slice const&>(a0));
    }
    inline class leveldb::Status Close(){
        class leveldb::Status (InMemoryWritableFile::*rv)();
        *((void**)&rv) = dlsym("?Close@InMemoryWritableFile@@UEAA?AVStatus@leveldb@@XZ");
        return (this->*rv)();
    }
    */

protected:

private:
};