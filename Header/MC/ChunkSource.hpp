// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_CHUNKSOURCE
#include "Extra/ChunkSourceAPI.hpp"
#undef EXTRA_INCLUDE_PART_CHUNKSOURCE
class ChunkSource {
#include "Extra/ChunkSourceAPI.hpp"
public:
    /*0*/ virtual ~ChunkSource();
    /*1*/ virtual void shutdown();
    /*2*/ virtual bool isShutdownDone();
    /*3*/ virtual class std::shared_ptr<class LevelChunk> getExistingChunk(class ChunkPos const&);
    /*4*/ virtual class std::shared_ptr<class LevelChunk> getRandomChunk(class Random&);
    /*5*/ virtual bool isChunkKnown(class ChunkPos const&);
    /*6*/ virtual class std::shared_ptr<class LevelChunk> createNewChunk(class ChunkPos const&, int /*enum enum ChunkSource::LoadMode*/, bool);
    /*7*/ virtual class std::shared_ptr<class LevelChunk> getOrLoadChunk(class ChunkPos const&, int /*enum enum ChunkSource::LoadMode*/, bool);
    /*8*/ virtual bool postProcess(class ChunkViewSource&);
    /*9*/ virtual void checkAndReplaceChunk(class ChunkViewSource&, class LevelChunk&);
    /*10*/ virtual void loadChunk(class LevelChunk&, bool);
    /*11*/ virtual void postProcessMobsAt(class BlockSource&, int, int, class Random&);
    /*12*/ virtual bool saveLiveChunk(class LevelChunk&);
    /*13*/ virtual void hintDiscardBatchBegin();
    /*14*/ virtual void hintDiscardBatchEnd();
    /*15*/ virtual void acquireDiscarded(class std::unique_ptr<class LevelChunk, struct LevelChunkFinalDeleter>);
    /*16*/ virtual void compact();
    /*17*/ virtual void flushPendingWrites();
    /*18*/ virtual bool isWithinWorldLimit(class ChunkPos const&) const;
    /*19*/ virtual void __unk_vfn_0();
    /*20*/ virtual class std::unordered_map<class ChunkPos, class std::weak_ptr<class LevelChunk>, struct std::hash<class ChunkPos>, struct std::equal_to<class ChunkPos>, class std::allocator<struct std::pair<class ChunkPos const, class std::weak_ptr<class LevelChunk> > > > const& getStorage() const;
    /*21*/ virtual void clearDeletedEntities();
    /*22*/ virtual void __unk_vfn_1();
    /*23*/ virtual class LevelChunkBlendingAttenuator getHeightAttenuatorForLevelChunk(class ChunkPos const&, class BiomeRegistry const&);
    /*
    inline bool canCreateViews() const{
        bool (ChunkSource::*rv)() const;
        *((void**)&rv) = dlsym("?canCreateViews@ChunkSource@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline class std::unordered_map<class ChunkPos, class std::weak_ptr<class LevelChunk>, struct std::hash<class ChunkPos>, struct std::equal_to<class ChunkPos>, class std::allocator<struct std::pair<class ChunkPos const, class std::weak_ptr<class LevelChunk> > > > const* getChunkMap(){
        class std::unordered_map<class ChunkPos, class std::weak_ptr<class LevelChunk>, struct std::hash<class ChunkPos>, struct std::equal_to<class ChunkPos>, class std::allocator<struct std::pair<class ChunkPos const, class std::weak_ptr<class LevelChunk> > > > const* (ChunkSource::*rv)();
        *((void**)&rv) = dlsym("?getChunkMap@ChunkSource@@UEAAPEBV?$unordered_map@VChunkPos@@V?$weak_ptr@VLevelChunk@@@std@@U?$hash@VChunkPos@@@3@U?$equal_to@VChunkPos@@@3@V?$allocator@U?$pair@$$CBVChunkPos@@V?$weak_ptr@VLevelChunk@@@std@@@std@@@3@@std@@XZ");
        return (this->*rv)();
    }
    inline void checkAndReplaceChunk(class ChunkViewSource& a0, class LevelChunk& a1){
        void (ChunkSource::*rv)(class ChunkViewSource&, class LevelChunk&);
        *((void**)&rv) = dlsym("?checkAndReplaceChunk@ChunkSource@@UEAAXAEAVChunkViewSource@@AEAVLevelChunk@@@Z");
        return (this->*rv)(std::forward<class ChunkViewSource&>(a0), std::forward<class LevelChunk&>(a1));
    }
    inline void clearDeletedEntities(){
        void (ChunkSource::*rv)();
        *((void**)&rv) = dlsym("?clearDeletedEntities@ChunkSource@@UEAAXXZ");
        return (this->*rv)();
    }
    inline bool isWithinWorldLimit(class ChunkPos const& a0) const{
        bool (ChunkSource::*rv)(class ChunkPos const&) const;
        *((void**)&rv) = dlsym("?isWithinWorldLimit@ChunkSource@@UEBA_NAEBVChunkPos@@@Z");
        return (this->*rv)(std::forward<class ChunkPos const&>(a0));
    }
    inline bool postProcess(class ChunkViewSource& a0){
        bool (ChunkSource::*rv)(class ChunkViewSource&);
        *((void**)&rv) = dlsym("?postProcess@ChunkSource@@UEAA_NAEAVChunkViewSource@@@Z");
        return (this->*rv)(std::forward<class ChunkViewSource&>(a0));
    }
    inline class std::shared_ptr<class LevelChunk> getRandomChunk(class Random& a0){
        class std::shared_ptr<class LevelChunk> (ChunkSource::*rv)(class Random&);
        *((void**)&rv) = dlsym("?getRandomChunk@ChunkSource@@UEAA?AV?$shared_ptr@VLevelChunk@@@std@@AEAVRandom@@@Z");
        return (this->*rv)(std::forward<class Random&>(a0));
    }
    inline class std::shared_ptr<class LevelChunk> getExistingChunk(class ChunkPos const& a0){
        class std::shared_ptr<class LevelChunk> (ChunkSource::*rv)(class ChunkPos const&);
        *((void**)&rv) = dlsym("?getExistingChunk@ChunkSource@@UEAA?AV?$shared_ptr@VLevelChunk@@@std@@AEBVChunkPos@@@Z");
        return (this->*rv)(std::forward<class ChunkPos const&>(a0));
    }
    inline void acquireDiscarded(class std::unique_ptr<class LevelChunk, struct LevelChunkFinalDeleter> a0){
        void (ChunkSource::*rv)(class std::unique_ptr<class LevelChunk, struct LevelChunkFinalDeleter>);
        *((void**)&rv) = dlsym("?acquireDiscarded@ChunkSource@@UEAAXV?$unique_ptr@VLevelChunk@@ULevelChunkFinalDeleter@@@std@@@Z");
        return (this->*rv)(std::forward<class std::unique_ptr<class LevelChunk, struct LevelChunkFinalDeleter>>(a0));
    }
    inline void compact(){
        void (ChunkSource::*rv)();
        *((void**)&rv) = dlsym("?compact@ChunkSource@@UEAAXXZ");
        return (this->*rv)();
    }
    inline class std::shared_ptr<class LevelChunk> createNewChunk(class ChunkPos const& a0, int \/*enum enum ChunkSource::LoadMode*\/ a1, bool a2){
        class std::shared_ptr<class LevelChunk> (ChunkSource::*rv)(class ChunkPos const&, int \/*enum enum ChunkSource::LoadMode*\/, bool);
        *((void**)&rv) = dlsym("?createNewChunk@ChunkSource@@UEAA?AV?$shared_ptr@VLevelChunk@@@std@@AEBVChunkPos@@W4LoadMode@1@_N@Z");
        return (this->*rv)(std::forward<class ChunkPos const&>(a0), std::forward<int \/*enum enum ChunkSource::LoadMode*\/>(a1), std::forward<bool>(a2));
    }
    inline void flushPendingWrites(){
        void (ChunkSource::*rv)();
        *((void**)&rv) = dlsym("?flushPendingWrites@ChunkSource@@UEAAXXZ");
        return (this->*rv)();
    }
    inline class LevelChunkBlendingAttenuator getHeightAttenuatorForLevelChunk(class ChunkPos const& a0, class BiomeRegistry const& a1){
        class LevelChunkBlendingAttenuator (ChunkSource::*rv)(class ChunkPos const&, class BiomeRegistry const&);
        *((void**)&rv) = dlsym("?getHeightAttenuatorForLevelChunk@ChunkSource@@UEAA?AVLevelChunkBlendingAttenuator@@AEBVChunkPos@@AEBVBiomeRegistry@@@Z");
        return (this->*rv)(std::forward<class ChunkPos const&>(a0), std::forward<class BiomeRegistry const&>(a1));
    }
    inline class std::shared_ptr<class LevelChunk> getOrLoadChunk(class ChunkPos const& a0, int \/*enum enum ChunkSource::LoadMode*\/ a1, bool a2){
        class std::shared_ptr<class LevelChunk> (ChunkSource::*rv)(class ChunkPos const&, int \/*enum enum ChunkSource::LoadMode*\/, bool);
        *((void**)&rv) = dlsym("?getOrLoadChunk@ChunkSource@@UEAA?AV?$shared_ptr@VLevelChunk@@@std@@AEBVChunkPos@@W4LoadMode@1@_N@Z");
        return (this->*rv)(std::forward<class ChunkPos const&>(a0), std::forward<int \/*enum enum ChunkSource::LoadMode*\/>(a1), std::forward<bool>(a2));
    }
    inline class std::unordered_map<class ChunkPos, class std::weak_ptr<class LevelChunk>, struct std::hash<class ChunkPos>, struct std::equal_to<class ChunkPos>, class std::allocator<struct std::pair<class ChunkPos const, class std::weak_ptr<class LevelChunk> > > > const& getStorage() const{
        class std::unordered_map<class ChunkPos, class std::weak_ptr<class LevelChunk>, struct std::hash<class ChunkPos>, struct std::equal_to<class ChunkPos>, class std::allocator<struct std::pair<class ChunkPos const, class std::weak_ptr<class LevelChunk> > > > const& (ChunkSource::*rv)() const;
        *((void**)&rv) = dlsym("?getStorage@ChunkSource@@UEBAAEBV?$unordered_map@VChunkPos@@V?$weak_ptr@VLevelChunk@@@std@@U?$hash@VChunkPos@@@3@U?$equal_to@VChunkPos@@@3@V?$allocator@U?$pair@$$CBVChunkPos@@V?$weak_ptr@VLevelChunk@@@std@@@std@@@3@@std@@XZ");
        return (this->*rv)();
    }
    inline void hintDiscardBatchBegin(){
        void (ChunkSource::*rv)();
        *((void**)&rv) = dlsym("?hintDiscardBatchBegin@ChunkSource@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void hintDiscardBatchEnd(){
        void (ChunkSource::*rv)();
        *((void**)&rv) = dlsym("?hintDiscardBatchEnd@ChunkSource@@UEAAXXZ");
        return (this->*rv)();
    }
    inline bool isChunkKnown(class ChunkPos const& a0){
        bool (ChunkSource::*rv)(class ChunkPos const&);
        *((void**)&rv) = dlsym("?isChunkKnown@ChunkSource@@UEAA_NAEBVChunkPos@@@Z");
        return (this->*rv)(std::forward<class ChunkPos const&>(a0));
    }
    inline bool isShutdownDone(){
        bool (ChunkSource::*rv)();
        *((void**)&rv) = dlsym("?isShutdownDone@ChunkSource@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline void loadChunk(class LevelChunk& a0, bool a1){
        void (ChunkSource::*rv)(class LevelChunk&, bool);
        *((void**)&rv) = dlsym("?loadChunk@ChunkSource@@UEAAXAEAVLevelChunk@@_N@Z");
        return (this->*rv)(std::forward<class LevelChunk&>(a0), std::forward<bool>(a1));
    }
    inline void postProcessMobsAt(class BlockSource& a0, int a1, int a2, class Random& a3){
        void (ChunkSource::*rv)(class BlockSource&, int, int, class Random&);
        *((void**)&rv) = dlsym("?postProcessMobsAt@ChunkSource@@UEAAXAEAVBlockSource@@HHAEAVRandom@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0), std::forward<int>(a1), std::forward<int>(a2), std::forward<class Random&>(a3));
    }
    inline bool saveLiveChunk(class LevelChunk& a0){
        bool (ChunkSource::*rv)(class LevelChunk&);
        *((void**)&rv) = dlsym("?saveLiveChunk@ChunkSource@@UEAA_NAEAVLevelChunk@@@Z");
        return (this->*rv)(std::forward<class LevelChunk&>(a0));
    }
    inline void shutdown(){
        void (ChunkSource::*rv)();
        *((void**)&rv) = dlsym("?shutdown@ChunkSource@@UEAAXXZ");
        return (this->*rv)();
    }
    */
    MCAPI void checkAndLaunchChunkGenerationTasks(bool);
    MCAPI class GridArea<class std::shared_ptr<class LevelChunk> > createEmptyView(enum ChunkSource::LoadMode, bool, class std::function<void (class buffer_span_mut<class std::shared_ptr<class LevelChunk> >, class buffer_span<unsigned int>)>);
    MCAPI class std::shared_ptr<class LevelChunk> getAvailableChunk(class ChunkPos const&);
    MCAPI class std::shared_ptr<class LevelChunk> getAvailableChunkAt(class BlockPos const&);
    MCAPI int getChunkSide() const;
    MCAPI class Dimension& getDimension() const;
    MCAPI class std::shared_ptr<class LevelChunk> getGeneratedChunk(class ChunkPos const&);
    MCAPI class Level& getLevel() const;

protected:
    MCAPI bool _checkAndDispatchTaskForLevelChunk(struct std::pair<class ChunkPos, enum ChunkState> const&, bool);
    MCAPI void _checkForReplacementDataTask(class LevelChunk&, class ChunkViewSource&);
    MCAPI void _checkForUnblockingChunks(class LevelChunk const&);
    MCAPI void _checkLevelChunkForNextStage(class LevelChunk const&, class LevelChunkGridAreaElement<class std::weak_ptr<class LevelChunk> >&, enum ChunkState);
    MCAPI void _checkLevelChunkForPostProcessing(class LevelChunk const&, class LevelChunkGridAreaElement<class std::weak_ptr<class LevelChunk> >&);
    MCAPI bool _chunkAtStage(class std::weak_ptr<class LevelChunk>, enum ChunkState);
    MCAPI void _freeChunkGenerationGridMap(class ChunkPos const&);
    MCAPI void _launchGenerationTask(class std::shared_ptr<class LevelChunk> const&, bool);
    MCAPI void _launchLightingTask(class std::shared_ptr<class LevelChunk> const&, class std::shared_ptr<class ChunkViewSource> const&, bool);
    MCAPI void _launchPostProcessingTask(class std::shared_ptr<class LevelChunk> const&, class std::shared_ptr<class ChunkViewSource> const&, bool);
    MCAPI void _launchReplacementDataTask(class std::shared_ptr<class LevelChunk> const&, class std::shared_ptr<class ChunkViewSource> const&, bool);
    MCAPI void _lightingTask(class std::shared_ptr<class LevelChunk> const&, class ChunkViewSource&);
    MCAPI void _loadChunkTask(class LevelChunk&);
    MCAPI void _postProcessingTask(class LevelChunk&, class ChunkViewSource&);
    MCAPI void _spawnChunkGenerationTasks(int, bool);

private:
};