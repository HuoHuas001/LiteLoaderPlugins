// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "ChunkSource.hpp"
#define EXTRA_INCLUDE_PART_LEGACYCHUNKSTORAGE
#include "Extra/LegacyChunkStorageAPI.hpp"
#undef EXTRA_INCLUDE_PART_LEGACYCHUNKSTORAGE
class LegacyChunkStorage : public ChunkSource {
#include "Extra/LegacyChunkStorageAPI.hpp"
public:
    /*0*/ virtual ~LegacyChunkStorage();
    /*1*/ virtual class std::shared_ptr<class LevelChunk> getExistingChunk(class ChunkPos const&);
    /*2*/ virtual class std::shared_ptr<class LevelChunk> getRandomChunk(class Random&);
    /*3*/ virtual bool postProcess(class ChunkViewSource&);
    /*4*/ virtual void checkAndReplaceChunk(class ChunkViewSource&, class LevelChunk&);
    /*5*/ virtual void loadChunk(class LevelChunk&, bool);
    /*6*/ virtual bool saveLiveChunk(class LevelChunk&);
    /*7*/ virtual void acquireDiscarded(class std::unique_ptr<class LevelChunk, struct LevelChunkFinalDeleter>);
    /*8*/ virtual bool isWithinWorldLimit(class ChunkPos const&) const;
    /*9*/ virtual void __unk_vfn_0();
    /*10*/ virtual void clearDeletedEntities();
    /*11*/ virtual void __unk_vfn_1();
    /*
    inline void acquireDiscarded(class std::unique_ptr<class LevelChunk, struct LevelChunkFinalDeleter> a0){
        void (LegacyChunkStorage::*rv)(class std::unique_ptr<class LevelChunk, struct LevelChunkFinalDeleter>);
        *((void**)&rv) = dlsym("?acquireDiscarded@LegacyChunkStorage@@UEAAXV?$unique_ptr@VLevelChunk@@ULevelChunkFinalDeleter@@@std@@@Z");
        return (this->*rv)(std::forward<class std::unique_ptr<class LevelChunk, struct LevelChunkFinalDeleter>>(a0));
    }
    inline void loadChunk(class LevelChunk& a0, bool a1){
        void (LegacyChunkStorage::*rv)(class LevelChunk&, bool);
        *((void**)&rv) = dlsym("?loadChunk@LegacyChunkStorage@@UEAAXAEAVLevelChunk@@_N@Z");
        return (this->*rv)(std::forward<class LevelChunk&>(a0), std::forward<bool>(a1));
    }
    inline bool saveLiveChunk(class LevelChunk& a0){
        bool (LegacyChunkStorage::*rv)(class LevelChunk&);
        *((void**)&rv) = dlsym("?saveLiveChunk@LegacyChunkStorage@@UEAA_NAEAVLevelChunk@@@Z");
        return (this->*rv)(std::forward<class LevelChunk&>(a0));
    }
    */

protected:

private:
    MCAPI bool _isImported(class ChunkPos const&);
    MCAPI bool _loadChunk(class LevelChunk&);
    MCAPI void _loadEntities();
    MCAPI void _markChunkAsImported(class ChunkPos const&);
    MCAPI bool _openRegionFile();
};