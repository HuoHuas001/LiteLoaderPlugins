// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "Bedrock.hpp"
#define EXTRA_INCLUDE_PART_LEVELSTORAGE
#include "Extra/LevelStorageAPI.hpp"
#undef EXTRA_INCLUDE_PART_LEVELSTORAGE
class LevelStorage {
#include "Extra/LevelStorageAPI.hpp"
public:
    /*0*/ virtual ~LevelStorage();
    /*1*/ virtual void addStorageObserver(std::unique_ptr<class LevelStorageObserver>) = 0;
    /*2*/ virtual std::unique_ptr<class CompoundTag> getCompoundTag(std::string const&, int /*enum enum DBHelpers::Category*/) = 0;
    /*3*/ virtual bool hasKey(class gsl::basic_string_span<char const, -1>, int /*enum enum DBHelpers::Category*/) const = 0;
    /*4*/ virtual void forEachKeyWithPrefix(class gsl::basic_string_span<char const, -1>, int /*enum enum DBHelpers::Category*/, class std::function<void (class gsl::basic_string_span<char const, -1>, class gsl::basic_string_span<char const, -1>)> const&) const = 0;
    /*5*/ virtual bool loadLevelData(class LevelData&) = 0;
    /*6*/ virtual std::unique_ptr<class ChunkSource> createChunkStorage(std::unique_ptr<class ChunkSource>, int /*enum enum StorageVersion*/) = 0;
    /*7*/ virtual void saveLevelData(class LevelData const&) = 0;
    /*8*/ virtual void __unk_vfn_0() = 0;
    /*9*/ virtual class std::shared_ptr<class Bedrock::Threading::IAsyncResult<void> > saveData(std::string const&, std::string&&, int /*enum enum DBHelpers::Category*/) = 0;
    /*10*/ virtual class std::shared_ptr<class Bedrock::Threading::IAsyncResult<void> > saveData(class LevelStorageWriteBatch const&) = 0;
    /*11*/ virtual class std::shared_ptr<class Bedrock::Threading::IAsyncResult<void> > deleteData(std::string const&, int /*enum enum DBHelpers::Category*/) = 0;
    /*12*/ virtual void syncIO() = 0;
    /*13*/ virtual void getStatistics(std::string&) const = 0;
    /*14*/ virtual bool clonePlayerData(class gsl::basic_string_span<char const, -1>, class gsl::basic_string_span<char const, -1>);
    /*15*/ virtual void __unk_vfn_1() = 0;
    /*16*/ virtual void startShutdown() = 0;
    /*17*/ virtual bool isShuttingDown() const = 0;
    /*18*/ virtual bool checkShutdownDone() = 0;
    /*19*/ virtual bool loadData(class gsl::basic_string_span<char const, -1>, std::string&, int /*enum enum DBHelpers::Category*/) const;
    /*20*/ virtual void __unk_vfn_2() = 0;
    /*21*/ virtual std::vector<struct SnapshotFilenameAndLength> createSnapshot(std::string const&) = 0;
    /*22*/ virtual void releaseSnapshot() = 0;
    /*23*/ virtual void compactStorage() = 0;
    /*24*/ virtual void syncAndSuspendStorage() = 0;
    /*25*/ virtual void resumeStorage() = 0;
    /*26*/ virtual void setFlushAllowed(bool) = 0;
    /*27*/ virtual void flushToPermanentStorage() = 0;
    /*28*/ virtual void freeCaches();
    /*29*/ virtual void setCompactionCallback(class std::function<void (int /*enum enum CompactionStatus*/)>) = 0;
    /*30*/ virtual void setCriticalSyncSaveCallback(class std::function<void (void)>) = 0;
    /*31*/ virtual void corruptLevel();
    /*
    inline bool loadData(class gsl::basic_string_span<char const, -1> a0, std::string& a1, int \/*enum enum DBHelpers::Category*\/ a2) const{
        bool (LevelStorage::*rv)(class gsl::basic_string_span<char const, -1>, std::string&, int \/*enum enum DBHelpers::Category*\/) const;
        *((void**)&rv) = dlsym("?loadData@LevelStorage@@UEBA_NV?$basic_string_span@$$CBD$0?0@gsl@@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Category@DBHelpers@@@Z");
        return (this->*rv)(std::forward<class gsl::basic_string_span<char const, -1>>(a0), std::forward<std::string&>(a1), std::forward<int \/*enum enum DBHelpers::Category*\/>(a2));
    }
    inline void freeCaches(){
        void (LevelStorage::*rv)();
        *((void**)&rv) = dlsym("?freeCaches@LevelStorage@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void corruptLevel(){
        void (LevelStorage::*rv)();
        *((void**)&rv) = dlsym("?corruptLevel@LevelStorage@@UEAAXXZ");
        return (this->*rv)();
    }
    inline bool clonePlayerData(class gsl::basic_string_span<char const, -1> a0, class gsl::basic_string_span<char const, -1> a1){
        bool (LevelStorage::*rv)(class gsl::basic_string_span<char const, -1>, class gsl::basic_string_span<char const, -1>);
        *((void**)&rv) = dlsym("?clonePlayerData@LevelStorage@@UEAA_NV?$basic_string_span@$$CBD$0?0@gsl@@0@Z");
        return (this->*rv)(std::forward<class gsl::basic_string_span<char const, -1>>(a0), std::forward<class gsl::basic_string_span<char const, -1>>(a1));
    }
    */
    MCAPI std::string getServerId(struct PlayerStorageIds const&);
    MCAPI std::string getServerId(class Player const&, bool);
    MCAPI std::vector<std::string> loadAllPlayerIDs(bool) const;
    MCAPI std::unique_ptr<class CompoundTag> loadPlayerDataFromTag(class gsl::basic_string_span<char const, -1>);
    MCAPI std::unique_ptr<class CompoundTag> loadServerPlayerData(class Player const&, bool);
    MCAPI void save(class Actor&);
    MCAPI class std::shared_ptr<class Bedrock::Threading::IAsyncResult<void> > saveData(std::string const&, class CompoundTag const&, enum DBHelpers::Category);
    MCAPI static std::string const LEGACY_CONSOLE_PLAYER_PREFIX;
    MCAPI static std::string const LOCAL_PLAYER_TAG;

protected:

private:
};