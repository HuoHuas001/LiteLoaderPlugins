// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_SCRIPTSERVERBLOCKEVENTLISTENER
#include "Extra/ScriptServerBlockEventListenerAPI.hpp"
#undef EXTRA_INCLUDE_PART_SCRIPTSERVERBLOCKEVENTLISTENER
class ScriptServerBlockEventListener {
#include "Extra/ScriptServerBlockEventListenerAPI.hpp"
public:
    /*0*/ virtual ~ScriptServerBlockEventListener();
    /*1*/ virtual int /*enum enum EventResult*/ onBlockPlacedByPlayer(class Player&, class Block const&, class BlockPos const&, bool);
    /*2*/ virtual int /*enum enum EventResult*/ onBlockDestroyedByPlayer(class Player&, std::string, class BlockPos const&);
    /*3*/ virtual int /*enum enum EventResult*/ onBlockMovedByPiston(class BlockPos const&, class BlockPos const&, int /*enum enum PistonState*/);
    /*4*/ virtual int /*enum enum EventResult*/ onBlockDestructionStopped(class Player&, class BlockPos const&, int);
    /*5*/ virtual int /*enum enum EventResult*/ onBlockDestructionStarted(class Player&, class BlockPos const&);
    /*6*/ virtual int /*enum enum EventResult*/ onBlockInteractedWith(class Player&, class BlockPos const&);
    /*7*/ virtual int /*enum enum EventResult*/ onBlockExploded(class BlockPos const&, class Block const&, class Actor*);
    /*
    inline int \/*enum enum EventResult*\/ onBlockDestroyedByPlayer(class Player& a0, std::string a1, class BlockPos const& a2){
        int \/*enum enum EventResult*\/ (ScriptServerBlockEventListener::*rv)(class Player&, std::string, class BlockPos const&);
        *((void**)&rv) = dlsym("?onBlockDestroyedByPlayer@ScriptServerBlockEventListener@@UEAA?AW4EventResult@@AEAVPlayer@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class Player&>(a0), std::forward<std::string>(a1), std::forward<class BlockPos const&>(a2));
    }
    inline int \/*enum enum EventResult*\/ onBlockDestructionStarted(class Player& a0, class BlockPos const& a1){
        int \/*enum enum EventResult*\/ (ScriptServerBlockEventListener::*rv)(class Player&, class BlockPos const&);
        *((void**)&rv) = dlsym("?onBlockDestructionStarted@ScriptServerBlockEventListener@@UEAA?AW4EventResult@@AEAVPlayer@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class Player&>(a0), std::forward<class BlockPos const&>(a1));
    }
    inline int \/*enum enum EventResult*\/ onBlockDestructionStopped(class Player& a0, class BlockPos const& a1, int a2){
        int \/*enum enum EventResult*\/ (ScriptServerBlockEventListener::*rv)(class Player&, class BlockPos const&, int);
        *((void**)&rv) = dlsym("?onBlockDestructionStopped@ScriptServerBlockEventListener@@UEAA?AW4EventResult@@AEAVPlayer@@AEBVBlockPos@@H@Z");
        return (this->*rv)(std::forward<class Player&>(a0), std::forward<class BlockPos const&>(a1), std::forward<int>(a2));
    }
    inline int \/*enum enum EventResult*\/ onBlockExploded(class BlockPos const& a0, class Block const& a1, class Actor* a2){
        int \/*enum enum EventResult*\/ (ScriptServerBlockEventListener::*rv)(class BlockPos const&, class Block const&, class Actor*);
        *((void**)&rv) = dlsym("?onBlockExploded@ScriptServerBlockEventListener@@UEAA?AW4EventResult@@AEBVBlockPos@@AEBVBlock@@PEAVActor@@@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0), std::forward<class Block const&>(a1), std::forward<class Actor*>(a2));
    }
    inline int \/*enum enum EventResult*\/ onBlockInteractedWith(class Player& a0, class BlockPos const& a1){
        int \/*enum enum EventResult*\/ (ScriptServerBlockEventListener::*rv)(class Player&, class BlockPos const&);
        *((void**)&rv) = dlsym("?onBlockInteractedWith@ScriptServerBlockEventListener@@UEAA?AW4EventResult@@AEAVPlayer@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class Player&>(a0), std::forward<class BlockPos const&>(a1));
    }
    inline int \/*enum enum EventResult*\/ onBlockMovedByPiston(class BlockPos const& a0, class BlockPos const& a1, int \/*enum enum PistonState*\/ a2){
        int \/*enum enum EventResult*\/ (ScriptServerBlockEventListener::*rv)(class BlockPos const&, class BlockPos const&, int \/*enum enum PistonState*\/);
        *((void**)&rv) = dlsym("?onBlockMovedByPiston@ScriptServerBlockEventListener@@UEAA?AW4EventResult@@AEBVBlockPos@@0W4PistonState@@@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0), std::forward<class BlockPos const&>(a1), std::forward<int \/*enum enum PistonState*\/>(a2));
    }
    inline int \/*enum enum EventResult*\/ onBlockPlacedByPlayer(class Player& a0, class Block const& a1, class BlockPos const& a2, bool a3){
        int \/*enum enum EventResult*\/ (ScriptServerBlockEventListener::*rv)(class Player&, class Block const&, class BlockPos const&, bool);
        *((void**)&rv) = dlsym("?onBlockPlacedByPlayer@ScriptServerBlockEventListener@@UEAA?AW4EventResult@@AEAVPlayer@@AEBVBlock@@AEBVBlockPos@@_N@Z");
        return (this->*rv)(std::forward<class Player&>(a0), std::forward<class Block const&>(a1), std::forward<class BlockPos const&>(a2), std::forward<bool>(a3));
    }
    */

protected:

private:
};