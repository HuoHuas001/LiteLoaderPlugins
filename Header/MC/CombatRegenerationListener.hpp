// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_COMBATREGENERATIONLISTENER
#include "Extra/CombatRegenerationListenerAPI.hpp"
#undef EXTRA_INCLUDE_PART_COMBATREGENERATIONLISTENER
class CombatRegenerationListener {
#include "Extra/CombatRegenerationListenerAPI.hpp"
public:
    /*0*/ virtual ~CombatRegenerationListener();
    /*1*/ virtual void __unk_vfn_0();
    /*2*/ virtual void __unk_vfn_1();
    /*3*/ virtual void __unk_vfn_2();
    /*4*/ virtual void __unk_vfn_3();
    /*5*/ virtual void __unk_vfn_4();
    /*6*/ virtual void __unk_vfn_5();
    /*7*/ virtual void __unk_vfn_6();
    /*8*/ virtual void __unk_vfn_7();
    /*9*/ virtual int /*enum enum EventResult*/ onActorDeath(class Actor&, class ActorDamageSource const&, int /*enum enum ActorType*/);
    /*
    inline int \/*enum enum EventResult*\/ onActorDeath(class Actor& a0, class ActorDamageSource const& a1, int \/*enum enum ActorType*\/ a2){
        int \/*enum enum EventResult*\/ (CombatRegenerationListener::*rv)(class Actor&, class ActorDamageSource const&, int \/*enum enum ActorType*\/);
        *((void**)&rv) = dlsym("?onActorDeath@CombatRegenerationListener@@UEAA?AW4EventResult@@AEAVActor@@AEBVActorDamageSource@@W4ActorType@@@Z");
        return (this->*rv)(std::forward<class Actor&>(a0), std::forward<class ActorDamageSource const&>(a1), std::forward<int \/*enum enum ActorType*\/>(a2));
    }
    */

protected:

private:
};