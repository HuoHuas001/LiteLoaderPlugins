// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_EVENTRESPONSE
#include "Extra/EventResponseAPI.hpp"
#undef EXTRA_INCLUDE_PART_EVENTRESPONSE
class EventResponse {
#include "Extra/EventResponseAPI.hpp"
public:
    /*0*/ virtual ~EventResponse();
    /*
    inline void buildSchema(class std::shared_ptr<class JsonUtil::JsonSchemaObjectNode<class JsonUtil::EmptyClass, struct EventResponseCollection> >& a0, class Factory<class EventResponse> const& a1) const{
        void (EventResponse::*rv)(class std::shared_ptr<class JsonUtil::JsonSchemaObjectNode<class JsonUtil::EmptyClass, struct EventResponseCollection> >&, class Factory<class EventResponse> const&) const;
        *((void**)&rv) = dlsym("?buildSchema@EventResponse@@UEBAXAEAV?$shared_ptr@V?$JsonSchemaObjectNode@VEmptyClass@JsonUtil@@UEventResponseCollection@@@JsonUtil@@@std@@AEBV?$Factory@VEventResponse@@$$V@@@Z");
        return (this->*rv)(std::forward<class std::shared_ptr<class JsonUtil::JsonSchemaObjectNode<class JsonUtil::EmptyClass, struct EventResponseCollection> >&>(a0), std::forward<class Factory<class EventResponse> const&>(a1));
    }
    inline std::string const& getName() const{
        std::string const& (EventResponse::*rv)() const;
        *((void**)&rv) = dlsym("?getName@EventResponse@@UEBAAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ");
        return (this->*rv)();
    }
    */

protected:

private:
};