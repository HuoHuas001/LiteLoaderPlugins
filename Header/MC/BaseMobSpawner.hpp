// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_BASEMOBSPAWNER
#include "Extra/BaseMobSpawnerAPI.hpp"
#undef EXTRA_INCLUDE_PART_BASEMOBSPAWNER
class BaseMobSpawner {
#include "Extra/BaseMobSpawnerAPI.hpp"
public:
    /*0*/ virtual ~BaseMobSpawner();
    /*1*/ virtual void tick(class BlockSource&);
    /*2*/ virtual void load(class CompoundTag const&);
    /*3*/ virtual void save(class CompoundTag&);
    /*4*/ virtual class BlockPos const& getPos() = 0;
    /*
    inline void load(class CompoundTag const& a0){
        void (BaseMobSpawner::*rv)(class CompoundTag const&);
        *((void**)&rv) = dlsym("?load@BaseMobSpawner@@UEAAXAEBVCompoundTag@@@Z");
        return (this->*rv)(std::forward<class CompoundTag const&>(a0));
    }
    inline void save(class CompoundTag& a0){
        void (BaseMobSpawner::*rv)(class CompoundTag&);
        *((void**)&rv) = dlsym("?save@BaseMobSpawner@@UEAAXAEAVCompoundTag@@@Z");
        return (this->*rv)(std::forward<class CompoundTag&>(a0));
    }
    inline void tick(class BlockSource& a0){
        void (BaseMobSpawner::*rv)(class BlockSource&);
        *((void**)&rv) = dlsym("?tick@BaseMobSpawner@@UEAAXAEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0));
    }
    */
    MCAPI class Mob* getDisplayEntity(class BlockSource&);
    MCAPI void setEntityId(struct ActorDefinitionIdentifier);

protected:
    MCAPI void _delay(class BlockSource&);

private:
};