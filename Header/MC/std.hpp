// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "Core.hpp"
#define EXTRA_INCLUDE_PART_STD
#include "Extra/stdAPI.hpp"
#undef EXTRA_INCLUDE_PART_STD
namespace std {
#include "Extra/stdAPI.hpp"

MCAPI void _Calculate_loop_simplicity(class std::_Node_base*, class std::_Node_base*, class std::_Node_rep*);
MCAPI void _Facet_Register(class std::_Facet_base*);
MCAPI unsigned int _Random_device();
MCAPI void _Rethrow_future_exception(class std::exception_ptr);
MCAPI char const* _Syserror_map(int);
MCAPI void _Throw_C_error(int);
MCAPI void _Throw_Cpp_error(int);
MCAPI void _Throw_bad_array_new_length();
MCAPI void _Throw_bad_cast();
MCAPI void _Throw_bad_optional_access();
MCAPI void _Throw_bad_variant_access();
MCAPI void _Throw_bad_weak_ptr();
MCAPI void _Throw_future_error(class std::error_code const&);
MCAPI void _Throw_range_error(char const* const);
MCAPI void _Throw_system_error(enum std::errc);
MCAPI void _Throw_tree_length_error();
MCAPI int _Winerror_map(int);
MCAPI void _Xbad_alloc();
MCAPI void _Xbad_function_call();
MCAPI void _Xlen_string();
MCAPI void _Xlength_error(char const*);
MCAPI void _Xout_of_range(char const*);
MCAPI void _Xregex_error(enum std::regex_constants::error_type);
MCAPI class std::ios_base& fixed(class std::ios_base&);
MCAPI class std::ios_base& hex(class std::ios_base&);
MCAPI class std::error_code make_error_code(enum std::errc);
MCAPI class std::error_code make_error_code(enum std::future_errc);
MCAPI struct std::nothrow_t const nothrow;
MCAPI struct std::nullopt_t const nullopt;
MCAPI struct std::piecewise_construct_t const piecewise_construct;
MCAPI struct std::_Smanip<__int64> setprecision(__int64);
MCAPI struct std::_Smanip<__int64> setw(__int64);
MCAPI class std::ios_base& showpoint(class std::ios_base&);
MCAPI std::string to_string(unsigned __int64);
MCAPI std::string to_string(float);
MCAPI std::string to_string(int);
MCAPI std::string to_string(__int64);
MCAPI std::string to_string(class Core::FileOpenMode const&);
MCAPI bool uncaught_exception();
MCAPI class std::ios_base& unitbuf(class std::ios_base&);
MCAPI class std::ios_base& uppercase(class std::ios_base&);

} // namespace std