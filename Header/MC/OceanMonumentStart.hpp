// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_OCEANMONUMENTSTART
#include "Extra/OceanMonumentStartAPI.hpp"
#undef EXTRA_INCLUDE_PART_OCEANMONUMENTSTART
class OceanMonumentStart {
#include "Extra/OceanMonumentStartAPI.hpp"
public:
    /*0*/ virtual ~OceanMonumentStart();
    /*1*/ virtual bool postProcess(class BlockSource&, class Random&, class BoundingBox const&);
    /*
    inline int \/*enum enum StructureFeatureType*\/ getType() const{
        int \/*enum enum StructureFeatureType*\/ (OceanMonumentStart::*rv)() const;
        *((void**)&rv) = dlsym("?getType@OceanMonumentStart@@UEBA?AW4StructureFeatureType@@XZ");
        return (this->*rv)();
    }
    inline bool postProcess(class BlockSource& a0, class Random& a1, class BoundingBox const& a2){
        bool (OceanMonumentStart::*rv)(class BlockSource&, class Random&, class BoundingBox const&);
        *((void**)&rv) = dlsym("?postProcess@OceanMonumentStart@@UEAA_NAEAVBlockSource@@AEAVRandom@@AEBVBoundingBox@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0), std::forward<class Random&>(a1), std::forward<class BoundingBox const&>(a2));
    }
    */
    MCAPI void createMonument(class Dimension&, class Random&, int, int);

protected:

private:
};