// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#define EXTRA_INCLUDE_PART_STRUCTURESETTINGS
#include "Extra/StructureSettingsAPI.hpp"
#undef EXTRA_INCLUDE_PART_STRUCTURESETTINGS
class StructureSettings {
#include "Extra/StructureSettingsAPI.hpp"

public:
    MCAPI enum AnimationMode getAnimationMode() const;
    MCAPI float getAnimationSeconds() const;
    MCAPI unsigned int getAnimationTicks() const;
    MCAPI class StructureSettings& operator=(class StructureSettings const&);
    MCAPI bool getIgnoreBlocks() const;
    MCAPI unsigned int getIntegritySeed() const;
    MCAPI enum Mirror getMirror() const;
    MCAPI enum Rotation getRotation() const;
    MCAPI class StructureSettings& operator=(class StructureSettings&&);
    MCAPI bool getIgnoreEntities() const;
    MCAPI float getIntegrityValue() const;
    MCAPI struct ActorUniqueID getLastTouchedByPlayerID() const;
    MCAPI std::string const& getPaletteName() const;
    MCAPI class Vec3 const& getPivot() const;
    MCAPI class BlockPos const& getStructureOffset() const;
    MCAPI class BlockPos const& getStructureSize() const;
    MCAPI bool isAnimated() const;
    MCAPI void setAnimationMode(enum AnimationMode);
    MCAPI void setAnimationSeconds(float);
    MCAPI void setIgnoreBlocks(bool);
    MCAPI void setIgnoreEntities(bool);
    MCAPI void setIgnoreJigsawBlocks(bool);
    MCAPI void setIntegritySeed(unsigned int);
    MCAPI void setIntegrityValue(float);
    MCAPI void setLastTouchedByPlayerID(struct ActorUniqueID);
    MCAPI void setMirror(enum Mirror);
    MCAPI void setPaletteName(std::string);
    MCAPI void setPivot(class Vec3 const&);
    MCAPI void setReloadActorEquipment(bool);
    MCAPI void setRotation(enum Rotation);
    MCAPI void setStructureOffset(class BlockPos const&);
    MCAPI void setStructureSize(class BlockPos const&);

    MCAPI static class BlockPos const DEFAULT_STRUCTURE_OFFSET;
    MCAPI static class BlockPos const DEFAULT_STRUCTURE_SIZE;
};