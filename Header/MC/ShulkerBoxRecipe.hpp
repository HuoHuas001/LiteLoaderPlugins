// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "ShapelessRecipe.hpp"
#define EXTRA_INCLUDE_PART_SHULKERBOXRECIPE
#include "Extra/ShulkerBoxRecipeAPI.hpp"
#undef EXTRA_INCLUDE_PART_SHULKERBOXRECIPE
class ShulkerBoxRecipe : public ShapelessRecipe {
#include "Extra/ShulkerBoxRecipeAPI.hpp"
public:
    /*0*/ virtual ~ShulkerBoxRecipe();
    /*1*/ virtual std::vector<class ItemInstance> const& assemble(class CraftingContainer&) const;
    /*2*/ virtual void __unk_vfn_0();
    /*3*/ virtual void __unk_vfn_1();
    /*4*/ virtual void __unk_vfn_2();
    /*5*/ virtual class mce::UUID const& getId() const;
    /*6*/ virtual void __unk_vfn_3();
    /*7*/ virtual void __unk_vfn_4();
    /*8*/ virtual bool itemsMatch(class ItemDescriptor const&, class ItemDescriptor const&) const;
    /*9*/ virtual bool itemsMatch(class ItemDescriptor const&, int, int, class CompoundTag const*) const;
    /*
    inline std::vector<class ItemInstance> const& assemble(class CraftingContainer& a0) const{
        std::vector<class ItemInstance> const& (ShulkerBoxRecipe::*rv)(class CraftingContainer&) const;
        *((void**)&rv) = dlsym("?assemble@ShulkerBoxRecipe@@UEBAAEBV?$vector@VItemInstance@@V?$allocator@VItemInstance@@@std@@@std@@AEAVCraftingContainer@@@Z");
        return (this->*rv)(std::forward<class CraftingContainer&>(a0));
    }
    inline bool itemsMatch(class ItemDescriptor const& a0, class ItemDescriptor const& a1) const{
        bool (ShulkerBoxRecipe::*rv)(class ItemDescriptor const&, class ItemDescriptor const&) const;
        *((void**)&rv) = dlsym("?itemsMatch@ShulkerBoxRecipe@@UEBA_NAEBVItemDescriptor@@0@Z");
        return (this->*rv)(std::forward<class ItemDescriptor const&>(a0), std::forward<class ItemDescriptor const&>(a1));
    }
    inline bool itemsMatch(class ItemDescriptor const& a0, int a1, int a2, class CompoundTag const* a3) const{
        bool (ShulkerBoxRecipe::*rv)(class ItemDescriptor const&, int, int, class CompoundTag const*) const;
        *((void**)&rv) = dlsym("?itemsMatch@ShulkerBoxRecipe@@UEBA_NAEBVItemDescriptor@@HHPEBVCompoundTag@@@Z");
        return (this->*rv)(std::forward<class ItemDescriptor const&>(a0), std::forward<int>(a1), std::forward<int>(a2), std::forward<class CompoundTag const*>(a3));
    }
    */
    MCAPI static class mce::UUID const ID;

protected:

private:
};