// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "ShapedRecipe.hpp"
#define EXTRA_INCLUDE_PART_SHAPEDCHEMISTRYRECIPE
#include "Extra/ShapedChemistryRecipeAPI.hpp"
#undef EXTRA_INCLUDE_PART_SHAPEDCHEMISTRYRECIPE
class ShapedChemistryRecipe : public ShapedRecipe {
#include "Extra/ShapedChemistryRecipeAPI.hpp"
public:
    /*0*/ virtual ~ShapedChemistryRecipe();
    /*1*/ virtual std::vector<class ItemInstance> const& assemble(class CraftingContainer&) const;
    /*2*/ virtual void __unk_vfn_0();
    /*3*/ virtual void __unk_vfn_1();
    /*4*/ virtual void __unk_vfn_2();
    /*5*/ virtual bool matches(class CraftingContainer&, class Level&) const;
    /*6*/ virtual class mce::UUID const& getId() const;
    /*7*/ virtual void __unk_vfn_3();
    /*8*/ virtual void __unk_vfn_4();
    /*
    inline class mce::UUID const& getId() const{
        class mce::UUID const& (ShapedChemistryRecipe::*rv)() const;
        *((void**)&rv) = dlsym("?getId@ShapedChemistryRecipe@@UEBAAEBVUUID@mce@@XZ");
        return (this->*rv)();
    }
    inline bool matches(class CraftingContainer& a0, class Level& a1) const{
        bool (ShapedChemistryRecipe::*rv)(class CraftingContainer&, class Level&) const;
        *((void**)&rv) = dlsym("?matches@ShapedChemistryRecipe@@UEBA_NAEAVCraftingContainer@@AEAVLevel@@@Z");
        return (this->*rv)(std::forward<class CraftingContainer&>(a0), std::forward<class Level&>(a1));
    }
    */
    MCAPI static class mce::UUID const ID;

protected:

private:
};