// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "Enchant.hpp"
#define EXTRA_INCLUDE_PART_LOOTENCHANT
#include "Extra/LootEnchantAPI.hpp"
#undef EXTRA_INCLUDE_PART_LOOTENCHANT
class LootEnchant : public Enchant {
#include "Extra/LootEnchantAPI.hpp"
public:
    /*0*/ virtual ~LootEnchant();
    /*1*/ virtual int getMinCost(int) const;
    /*2*/ virtual int getMaxCost(int) const;
    /*3*/ virtual void __unk_vfn_0();
    /*4*/ virtual int getMaxLevel() const;
    /*5*/ virtual int getDamageProtection(int, class ActorDamageSource const&) const;
    /*6*/ virtual float getDamageBonus(int, class Actor const&) const;
    /*7*/ virtual void doPostAttack(class Actor&, class Actor&, int) const;
    /*8*/ virtual void doPostHurt(class ItemInstance&, class Actor&, class Actor&, int) const;
    /*9*/ virtual void __unk_vfn_1();
    /*10*/ virtual void __unk_vfn_2();
    /*11*/ virtual void __unk_vfn_3();
    /*12*/ virtual void __unk_vfn_4();
    /*13*/ virtual bool _isValidEnchantmentTypeForCategory(int /*enum enum Enchant::Type*/) const;
    /*
    inline int getMaxLevel() const{
        int (LootEnchant::*rv)() const;
        *((void**)&rv) = dlsym("?getMaxLevel@LootEnchant@@UEBAHXZ");
        return (this->*rv)();
    }
    inline int getMaxCost(int a0) const{
        int (LootEnchant::*rv)(int) const;
        *((void**)&rv) = dlsym("?getMaxCost@LootEnchant@@UEBAHH@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline int getMinCost(int a0) const{
        int (LootEnchant::*rv)(int) const;
        *((void**)&rv) = dlsym("?getMinCost@LootEnchant@@UEBAHH@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    */

protected:

private:
};