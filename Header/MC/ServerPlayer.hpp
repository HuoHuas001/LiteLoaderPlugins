// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "Player.hpp"
#define EXTRA_INCLUDE_PART_SERVERPLAYER
#include "Extra/ServerPlayerAPI.hpp"
#undef EXTRA_INCLUDE_PART_SERVERPLAYER
class ServerPlayer : public Player {
#include "Extra/ServerPlayerAPI.hpp"
public:
    /*10*/ virtual void initializeComponents(int /*enum Actor::InitializationMethod*/, class VariantParameterList const&);
    /*12*/ virtual void _serverInitItemStackIds();
    /*14*/ virtual ~ServerPlayer();
    /*20*/ virtual bool isRuntimePredictedMovementEnabled() const;
    /*22*/ virtual void unk_vfn_22();
    /*36*/ virtual class Vec3 getInterpolatedRidingOffset(float) const;
    /*41*/ virtual void unk_vfn_41();
    /*48*/ virtual void normalTick();
    /*61*/ virtual void unk_vfn_61();
    /*68*/ virtual void unk_vfn_68();
    /*82*/ virtual void unk_vfn_82();
    /*87*/ virtual void unk_vfn_87();
    /*88*/ virtual void playerTouch(class Player&);
    /*94*/ virtual void unk_vfn_94();
    /*97*/ virtual void unk_vfn_97();
    /*104*/ virtual void unk_vfn_104();
    /*106*/ virtual void unk_vfn_106();
    /*107*/ virtual void unk_vfn_107();
    /*108*/ virtual void unk_vfn_108();
    /*112*/ virtual class Actor* findAttackTarget();
    /*113*/ virtual bool isValidTarget(class Actor*) const;
    /*120*/ virtual void onTame();
    /*121*/ virtual void onFailedTame();
    /*130*/ virtual void vehicleLanded(class Vec3 const&, class Vec3 const&);
    /*142*/ virtual void handleEntityEvent(int /*enum ActorEvent*/, int);
    /*143*/ virtual float getPickRadius();
    /*153*/ virtual void setArmor(int /*enum ArmorSlot*/, class ItemStack const&);
    /*161*/ virtual class ItemStack const& getCarriedItem() const;
    /*163*/ virtual void setOffhandSlot(class ItemStack const&);
    /*168*/ virtual bool load(class CompoundTag const&, class DataLoadHelper&);
    /*171*/ virtual class HashedString const& queryEntityRenderer() const;
    /*172*/ virtual struct ActorUniqueID getSourceUniqueID() const;
    /*178*/ virtual int getPortalCooldown() const;
    /*181*/ virtual bool canChangeDimensions() const;
    /*182*/ virtual void unk_vfn_182();
    /*183*/ virtual void changeDimension(class AutomaticID<class Dimension, int>, bool);
    /*184*/ virtual struct ActorUniqueID getControllingPlayer() const;
    /*185*/ virtual void checkFallDamage(float, bool);
    /*187*/ virtual void handleFallDistanceOnServer(float, float, bool);
    /*193*/ virtual bool canPickupItem(class ItemStack const&) const;
    /*194*/ virtual bool canBePulledIntoVehicle() const;
    /*196*/ virtual void unk_vfn_196();
    /*198*/ virtual void sendMotionPacketIfNeeded();
    /*199*/ virtual bool canSynchronizeNewEntity() const;
    /*214*/ virtual void onEffectAdded(class MobEffectInstance&);
    /*215*/ virtual void onEffectUpdated(class MobEffectInstance&);
    /*216*/ virtual void onEffectRemoved(class MobEffectInstance&);
    /*221*/ virtual void unk_vfn_221();
    /*222*/ virtual void unk_vfn_222();
    /*228*/ virtual void unk_vfn_228();
    /*233*/ virtual bool canDestroyBlock(class Block const&) const;
    /*234*/ virtual void setAuxValue(int);
    /*242*/ virtual void unk_vfn_242();
    /*245*/ virtual void unk_vfn_245();
    /*247*/ virtual void die(class ActorDamageSource const&);
    /*257*/ virtual void unk_vfn_257();
    /*265*/ virtual void unk_vfn_265();
    /*274*/ virtual void unk_vfn_274();
    /*275*/ virtual void knockback(class Actor*, int, float, float, float, float, float);
    /*276*/ virtual void spawnAnim();
    /*291*/ virtual void aiStep();
    /*304*/ virtual void unk_vfn_304();
    /*306*/ virtual bool isAlliedTo(class Mob*);
    /*308*/ virtual void unk_vfn_308();
    /*315*/ virtual void hurtArmorSlots(class ActorDamageSource const&, int, class std::bitset<4> const&);
    /*316*/ virtual void setDamagedArmor(int /*enum ArmorSlot*/, class ItemStack const&);
    /*317*/ virtual void sendArmorDamage(class std::bitset<4> const&);
    /*318*/ virtual void sendArmor(class std::bitset<4> const&);
    /*328*/ virtual void clearVanishEnchantedItemsOnDeath();
    /*329*/ virtual void sendInventory(bool);
    /*332*/ virtual void onBorn(class Actor&, class Actor&);
    /*336*/ virtual int getAttackTime();
    /*337*/ virtual float _getWalkTargetValue(class BlockPos const&);
    /*338*/ virtual bool canExistWhenDisallowMob() const;
    /*339*/ virtual void unk_vfn_339();
    /*347*/ virtual void updateAi();
    /*349*/ virtual void _serverAiMobStep();
    /*355*/ virtual void unk_vfn_355();
    /*357*/ virtual void prepareRegion(class ChunkSource&);
    /*358*/ virtual void destroyRegion();
    /*359*/ virtual void suspendRegion();
    /*360*/ virtual void resendAllChunks();
    /*363*/ virtual void changeDimensionWithCredits(class AutomaticID<class Dimension, int>);
    /*364*/ virtual void tickWorld(struct Tick const&);
    /*365*/ virtual void unk_vfn_365();
    /*369*/ virtual void checkMovementStats(class Vec3 const&);
    /*370*/ virtual void unk_vfn_370();
    /*371*/ virtual void unk_vfn_371();
    /*373*/ virtual void unk_vfn_373();
    /*375*/ virtual void unk_vfn_375();
    /*378*/ virtual void setPermissions(int /*enum CommandPermissionLevel*/);
    /*381*/ virtual void unk_vfn_381();
    /*382*/ virtual void unk_vfn_382();
    /*383*/ virtual void openTrading(struct ActorUniqueID const&, bool);
    /*385*/ virtual void unk_vfn_385();
    /*386*/ virtual void unk_vfn_386();
    /*387*/ virtual void openInventory();
    /*388*/ virtual void unk_vfn_388();
    /*389*/ virtual void unk_vfn_389();
    /*390*/ virtual void displayTextObjectMessage(class TextObjectRoot const&, std::string const&, std::string const&);
    /*391*/ virtual void displayTextObjectWhisperMessage(class ResolvedTextObject const&, std::string const&, std::string const&);
    /*392*/ virtual void displayWhisperMessage(std::string const&, std::string const&, std::string const&, std::string const&);
    /*394*/ virtual void stopSleepInBed(bool, bool);
    /*398*/ virtual void unk_vfn_398();
    /*399*/ virtual void unk_vfn_399();
    /*400*/ virtual bool isHostingPlayer() const;
    /*401*/ virtual bool isLoading() const;
    /*402*/ virtual bool isPlayerInitialized() const;
    /*403*/ virtual void unk_vfn_403();
    /*406*/ virtual void setPlayerGameType(int /*enum GameType*/);
    /*410*/ virtual void unk_vfn_410();
    /*414*/ virtual void setContainerData(class IContainerManager&, int, int);
    /*415*/ virtual void slotChanged(class IContainerManager&, class Container&, int, class ItemStack const&, class ItemStack const&, bool);
    /*417*/ virtual void refreshContainer(class IContainerManager&);
    /*420*/ virtual bool is2DPositionRelevant(class AutomaticID<class Dimension, int>, class BlockPos const&);
    /*421*/ virtual bool isActorRelevant(class Actor const&);
    /*422*/ virtual bool isTeacher() const;
    /*423*/ virtual void onSuspension();
    /*424*/ virtual void onLinkedSlotsChanged();
    /*430*/ virtual void sendInventoryTransaction(class InventoryTransaction const&) const;
    /*431*/ virtual void sendComplexInventoryTransaction(std::unique_ptr<class ComplexInventoryTransaction>) const;
    /*432*/ virtual void sendNetworkPacket(class Packet&) const;
    /*433*/ virtual class PlayerEventCoordinator& getPlayerEventCoordinator();
    /*434*/ virtual class MoveInputHandler* getMoveInputHandler();
    /*435*/ virtual int /*enum InputMode*/ getInputMode() const;
    /*436*/ virtual int /*enum ClientPlayMode*/ getPlayMode() const;
    /*437*/ virtual void reportMovementTelemetry(int /*enum MovementEventType*/);
    /*438*/ virtual void unk_vfn_438();
    /*443*/ virtual int _getSpawnChunkLimit() const;
    /*444*/ virtual void _updateChunkPublisherView(class Vec3 const&, float);

public:
    MCAPI void checkCheating(class Vec3 const&);
    MCAPI void disconnect();
    MCAPI void doDeleteContainerManager(bool);
    MCAPI class ItemStackNetManagerServer& getItemStackNetManagerServer();
    MCAPI class ServerMoveInputHandler* getServerMoveInputHandler();
    MCAPI void handleActorPickRequestOnServer(class Actor&, bool, bool);
    MCAPI void handleBlockPickRequestOnServer(class BlockPos const&, bool);
    MCAPI enum ContainerID openUnmanagedContainer();
    MCAPI void postLoad(bool);
    MCAPI void selectItem(class ItemStack const&);
    MCAPI void sendMobEffectPackets();
    MCAPI void setClientChunkRadius(unsigned int);
    MCAPI void setInputMode(enum InputMode const&);
    MCAPI void setLocalPlayerAsInitialized();
    MCAPI void setPlayMode(enum ClientPlayMode const&);
    MCAPI void setPlayerInput(float, float, bool, bool);
    MCAPI void setSyncTimeIfClientServerPositionMatches(class Vec3 const&);
    MCAPI void triggerRespawnFromCompletingTheEnd();

    MCAPI static class ServerPlayer* tryGetFromEntity(class EntityContext&, bool);

private:
    MCAPI void _logCDEvent(enum CrashDumpLogStringID, enum CrashDumpLogStringID, enum CrashDumpLogStringID, enum CrashDumpLogStringID);
    MCAPI enum ContainerID _nextContainerCounter();
    MCAPI void _removeNearbyEntities();
    MCAPI void _scanForNearbyActors();
    MCAPI void _setContainerManager(class std::shared_ptr<class IContainerManager>);
    MCAPI void _updateNearbyActors();
};