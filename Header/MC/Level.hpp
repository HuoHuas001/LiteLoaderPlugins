// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "PlayerCapabilities.hpp"
#define EXTRA_INCLUDE_PART_LEVEL
#include "Extra/LevelAPI.hpp"
#undef EXTRA_INCLUDE_PART_LEVEL
class Level {
#include "Extra/LevelAPI.hpp"

public:
    MCAPI struct AdventureSettings const& getAdventureSettings() const;
    MCAPI struct PlayerCapabilities::ISharedController const& getCapabilities() const;
    MCAPI class NpcDialogueStorage* getNpcDialogueStorage();
    MCAPI double getTickDeltaTime() const;
    MCAPI bool isChunkInTickRange(class LevelChunk const&, class std::optional<int>) const;
    MCAPI enum NodeType isFree(class NavigationComponent&, class Actor&, class BlockPos const&, class BlockPos const&, class BlockPos const&, enum CanJumpIntoNode);
    MCAPI void setPerformanceTelemetryPeriodicCallback(class std::function<void(void)>);
    MCAPI bool use3DBiomeMaps() const;

    MCAPI static float const AVERAGE_GAME_TICKS_PER_RANDOM_TICK_PER_BLOCK;
    MCAPI static float const AVERAGE_RANDOM_TICKS_PER_BLOCK_PER_GAME_DAY;
    MCAPI static float const AVERAGE_RANDOM_TICKS_PER_BLOCK_PER_MINUTE;
    MCAPI static float const RANDOM_TICKS_PER_TICK_PER_SUBCHUNK;
    MCAPI static unsigned int createRandomSeed();
    MCAPI static bool isUsableLevel(class ILevel const&);

private:
    MCAPI void _cleanupDisconnectedPlayers();
    MCAPI class MapItemSavedData& _createMapSavedData(struct ActorUniqueID const&);
    MCAPI void _fixEntitiesRegion(std::vector<class WeakEntityRef>&, class BlockSource const&, class Dimension&);
    MCAPI enum CrashDumpLogStringID _getCrashDumpLogCategory();
    MCAPI std::string _getValidatedPlayerName(std::string const&);
    MCAPI void _handleChangeDimensionRequests();
    MCAPI void _handlePlayerSuspension();
    MCAPI void _loadAutonomousEntities();
    MCAPI void _loadBiomeData();
    MCAPI class MapItemSavedData* _loadMapData(struct ActorUniqueID const&);
    MCAPI bool _playerChangeDimension(class Player*, class ChangeDimensionRequest&);
    MCAPI void _saveAutonomousEntities();
    MCAPI void _saveSomeChunks();
    MCAPI void _syncTime(int);

protected:
    MCAPI class ServerLevelEventCoordinator& _getServerLevelEventCoordinator();
};