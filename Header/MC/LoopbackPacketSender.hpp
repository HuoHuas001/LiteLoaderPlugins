// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_LOOPBACKPACKETSENDER
#include "Extra/LoopbackPacketSenderAPI.hpp"
#undef EXTRA_INCLUDE_PART_LOOPBACKPACKETSENDER
class LoopbackPacketSender {
#include "Extra/LoopbackPacketSenderAPI.hpp"
public:
    /*0*/ virtual ~LoopbackPacketSender();
    /*1*/ virtual void send(class Packet&);
    /*2*/ virtual void sendToServer(class Packet&);
    /*3*/ virtual void sendToClient(class UserEntityIdentifierComponent const*, class Packet const&);
    /*4*/ virtual void sendToClient(class NetworkIdentifier const&, class Packet const&, unsigned char);
    /*5*/ virtual void sendToClients(std::vector<struct NetworkIdentifierWithSubId> const&, class Packet const&);
    /*6*/ virtual void sendBroadcast(class Packet const&);
    /*7*/ virtual void sendBroadcast(class NetworkIdentifier const&, unsigned char, class Packet const&);
    /*8*/ virtual void flush(class NetworkIdentifier const&, class std::function<void (void)>&&);
    /*
    inline void flush(class NetworkIdentifier const& a0, class std::function<void (void)>&& a1){
        void (LoopbackPacketSender::*rv)(class NetworkIdentifier const&, class std::function<void (void)>&&);
        *((void**)&rv) = dlsym("?flush@LoopbackPacketSender@@UEAAXAEBVNetworkIdentifier@@$$QEAV?$function@$$A6AXXZ@std@@@Z");
        return (this->*rv)(std::forward<class NetworkIdentifier const&>(a0), std::forward<class std::function<void (void)>&&>(a1));
    }
    inline void send(class Packet& a0){
        void (LoopbackPacketSender::*rv)(class Packet&);
        *((void**)&rv) = dlsym("?send@LoopbackPacketSender@@UEAAXAEAVPacket@@@Z");
        return (this->*rv)(std::forward<class Packet&>(a0));
    }
    inline void sendBroadcast(class NetworkIdentifier const& a0, unsigned char a1, class Packet const& a2){
        void (LoopbackPacketSender::*rv)(class NetworkIdentifier const&, unsigned char, class Packet const&);
        *((void**)&rv) = dlsym("?sendBroadcast@LoopbackPacketSender@@UEAAXAEBVNetworkIdentifier@@EAEBVPacket@@@Z");
        return (this->*rv)(std::forward<class NetworkIdentifier const&>(a0), std::forward<unsigned char>(a1), std::forward<class Packet const&>(a2));
    }
    inline void sendBroadcast(class Packet const& a0){
        void (LoopbackPacketSender::*rv)(class Packet const&);
        *((void**)&rv) = dlsym("?sendBroadcast@LoopbackPacketSender@@UEAAXAEBVPacket@@@Z");
        return (this->*rv)(std::forward<class Packet const&>(a0));
    }
    inline void sendToClient(class NetworkIdentifier const& a0, class Packet const& a1, unsigned char a2){
        void (LoopbackPacketSender::*rv)(class NetworkIdentifier const&, class Packet const&, unsigned char);
        *((void**)&rv) = dlsym("?sendToClient@LoopbackPacketSender@@UEAAXAEBVNetworkIdentifier@@AEBVPacket@@E@Z");
        return (this->*rv)(std::forward<class NetworkIdentifier const&>(a0), std::forward<class Packet const&>(a1), std::forward<unsigned char>(a2));
    }
    inline void sendToClient(class UserEntityIdentifierComponent const* a0, class Packet const& a1){
        void (LoopbackPacketSender::*rv)(class UserEntityIdentifierComponent const*, class Packet const&);
        *((void**)&rv) = dlsym("?sendToClient@LoopbackPacketSender@@UEAAXPEBVUserEntityIdentifierComponent@@AEBVPacket@@@Z");
        return (this->*rv)(std::forward<class UserEntityIdentifierComponent const*>(a0), std::forward<class Packet const&>(a1));
    }
    inline void sendToClients(std::vector<struct NetworkIdentifierWithSubId> const& a0, class Packet const& a1){
        void (LoopbackPacketSender::*rv)(std::vector<struct NetworkIdentifierWithSubId> const&, class Packet const&);
        *((void**)&rv) = dlsym("?sendToClients@LoopbackPacketSender@@UEAAXAEBV?$vector@UNetworkIdentifierWithSubId@@V?$allocator@UNetworkIdentifierWithSubId@@@std@@@std@@AEBVPacket@@@Z");
        return (this->*rv)(std::forward<std::vector<struct NetworkIdentifierWithSubId> const&>(a0), std::forward<class Packet const&>(a1));
    }
    inline void sendToServer(class Packet& a0){
        void (LoopbackPacketSender::*rv)(class Packet&);
        *((void**)&rv) = dlsym("?sendToServer@LoopbackPacketSender@@UEAAXAEAVPacket@@@Z");
        return (this->*rv)(std::forward<class Packet&>(a0));
    }
    */
    MCAPI void addLoopbackCallback(class NetEventCallback&);
    MCAPI void removeLoopbackCallback(class NetEventCallback&);
    MCAPI void setUserList(std::vector<class OwnerPtrT<struct EntityRefTraits>> const*);

protected:

private:
};