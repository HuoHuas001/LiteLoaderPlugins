// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "Core.hpp"
#define EXTRA_INCLUDE_PART_PACKACCESSSTRATEGY
#include "Extra/PackAccessStrategyAPI.hpp"
#undef EXTRA_INCLUDE_PART_PACKACCESSSTRATEGY
class PackAccessStrategy {
#include "Extra/PackAccessStrategyAPI.hpp"
public:
    /*0*/ virtual ~PackAccessStrategy();
    /*1*/ virtual unsigned __int64 getPackSize() const = 0;
    /*2*/ virtual void __unk_vfn_0() = 0;
    /*3*/ virtual void __unk_vfn_1() = 0;
    /*4*/ virtual bool isWritable() const = 0;
    /*5*/ virtual void setIsTrusted(bool) = 0;
    /*6*/ virtual bool isTrusted() const = 0;
    /*7*/ virtual bool hasAsset(class Core::Path const&, bool) const = 0;
    /*8*/ virtual bool hasFolder(class Core::Path const&) const = 0;
    /*9*/ virtual bool getAsset(class Core::Path const&, std::string&, bool) const = 0;
    /*10*/ virtual bool deleteAsset(class Core::PathBuffer<std::string > const&) = 0;
    /*11*/ virtual bool writeAsset(class Core::Path const&, std::string const&) = 0;
    /*12*/ virtual void forEachIn(class Core::Path const&, class std::function<void (class Core::Path const&)>, bool) const = 0;
    /*13*/ virtual void forEachInAssetSet(class Core::Path const&, class std::function<void (class Core::Path const&)>) const;
    /*14*/ virtual void __unk_vfn_2() = 0;
    /*15*/ virtual class Core::PathBuffer<std::string > const& getSubPath() const;
    /*16*/ virtual std::unique_ptr<class PackAccessStrategy> createSubPack(class Core::Path const&) const = 0;
    /*17*/ virtual int /*enum enum PackAccessAssetGenerationResult*/ generateAssetSet();
    /*18*/ virtual void __unk_vfn_3();
    /*19*/ virtual void unload() = 0;
    /*20*/ virtual bool hasUpgradeFiles() const;
    /*21*/ virtual class ContentIdentity readContentIdentity() const;
    /*
    inline bool canRecurse() const{
        bool (PackAccessStrategy::*rv)() const;
        *((void**)&rv) = dlsym("?canRecurse@PackAccessStrategy@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline void forEachInAssetSet(class Core::Path const& a0, class std::function<void (class Core::Path const&)> a1) const{
        void (PackAccessStrategy::*rv)(class Core::Path const&, class std::function<void (class Core::Path const&)>) const;
        *((void**)&rv) = dlsym("?forEachInAssetSet@PackAccessStrategy@@UEBAXAEBVPath@Core@@V?$function@$$A6AXAEBVPath@Core@@@Z@std@@@Z");
        return (this->*rv)(std::forward<class Core::Path const&>(a0), std::forward<class std::function<void (class Core::Path const&)>>(a1));
    }
    inline int \/*enum enum PackAccessAssetGenerationResult*\/ generateAssetSet(){
        int \/*enum enum PackAccessAssetGenerationResult*\/ (PackAccessStrategy::*rv)();
        *((void**)&rv) = dlsym("?generateAssetSet@PackAccessStrategy@@UEAA?AW4PackAccessAssetGenerationResult@@XZ");
        return (this->*rv)();
    }
    inline class Core::PathBuffer<std::string > const& getSubPath() const{
        class Core::PathBuffer<std::string > const& (PackAccessStrategy::*rv)() const;
        *((void**)&rv) = dlsym("?getSubPath@PackAccessStrategy@@UEBAAEBV?$PathBuffer@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Core@@XZ");
        return (this->*rv)();
    }
    inline bool hasUpgradeFiles() const{
        bool (PackAccessStrategy::*rv)() const;
        *((void**)&rv) = dlsym("?hasUpgradeFiles@PackAccessStrategy@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline class ContentIdentity readContentIdentity() const{
        class ContentIdentity (PackAccessStrategy::*rv)() const;
        *((void**)&rv) = dlsym("?readContentIdentity@PackAccessStrategy@@UEBA?AVContentIdentity@@XZ");
        return (this->*rv)();
    }
    */
    MCAPI bool hasGeneratedAssetSet() const;
    MCAPI static class Core::PathBuffer<std::string > const PACK_IMPORT_LOCK_FILE;

protected:
    MCAPI void _addToAssetSet(class Core::Path const&);
    MCAPI void _deleteFromAssetSet(class Core::PathBuffer<std::string > const&);
    MCAPI bool _isInAssetSet(class Core::Path const&) const;

private:
};