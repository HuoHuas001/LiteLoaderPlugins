// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "JsonUtil.hpp"
#define EXTRA_INCLUDE_PART_VANILLATREEFEATURE
#include "Extra/VanillaTreeFeatureAPI.hpp"
#undef EXTRA_INCLUDE_PART_VANILLATREEFEATURE
class VanillaTreeFeature {
#include "Extra/VanillaTreeFeatureAPI.hpp"
public:
    /*0*/ virtual ~VanillaTreeFeature();
    /*1*/ virtual class std::optional<class BlockPos> place(class IBlockWorldGenAPI&, class BlockPos const&, class Random&, class RenderParams&) const;
    /*
    inline class std::optional<class BlockPos> place(class IBlockWorldGenAPI& a0, class BlockPos const& a1, class Random& a2, class RenderParams& a3) const{
        class std::optional<class BlockPos> (VanillaTreeFeature::*rv)(class IBlockWorldGenAPI&, class BlockPos const&, class Random&, class RenderParams&) const;
        *((void**)&rv) = dlsym("?place@VanillaTreeFeature@@UEBA?AV?$optional@VBlockPos@@@std@@AEAVIBlockWorldGenAPI@@AEBVBlockPos@@AEAVRandom@@AEAVRenderParams@@@Z");
        return (this->*rv)(std::forward<class IBlockWorldGenAPI&>(a0), std::forward<class BlockPos const&>(a1), std::forward<class Random&>(a2), std::forward<class RenderParams&>(a3));
    }
    */

protected:

private:
    MCAPI static void _buildVanillaCanopyVariants(class JsonUtil::JsonSchemaObjectNode<class JsonUtil::JsonParseState<class JsonUtil::EmptyClass, struct FeatureLoading::FeatureRootParseContext>, struct FeatureLoading::ConcreteFeatureHolder<class VanillaTreeFeature> >&, class std::function<class ITreeCanopyWrapper& (struct FeatureLoading::ConcreteFeatureHolder<class VanillaTreeFeature>*)>);
    MCAPI static void _buildVanillaTrunkVariants(class JsonUtil::JsonSchemaObjectNode<class JsonUtil::JsonParseState<class JsonUtil::EmptyClass, struct FeatureLoading::FeatureRootParseContext>, struct FeatureLoading::ConcreteFeatureHolder<class VanillaTreeFeature> >&, class std::function<class ITreeTrunkWrapper& (struct FeatureLoading::ConcreteFeatureHolder<class VanillaTreeFeature>*)>);
};