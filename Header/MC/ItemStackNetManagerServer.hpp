// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "ItemStackNetManagerBase.hpp"
#include "Bedrock.hpp"
#define EXTRA_INCLUDE_PART_ITEMSTACKNETMANAGERSERVER
#include "Extra/ItemStackNetManagerServerAPI.hpp"
#undef EXTRA_INCLUDE_PART_ITEMSTACKNETMANAGERSERVER
class ItemStackNetManagerServer : public ItemStackNetManagerBase {
#include "Extra/ItemStackNetManagerServerAPI.hpp"
public:
    /*0*/ virtual ~ItemStackNetManagerServer();
    /*1*/ virtual void __unk_vfn_0();
    /*2*/ virtual class TypedClientNetId<struct ItemStackRequestIdTag, int, 0> getRequestId() const;
    /*3*/ virtual bool retainSetItemStackNetIdVariant() const;
    /*4*/ virtual bool allowInventoryTransactionManager() const;
    /*5*/ virtual void __unk_vfn_1();
    /*6*/ virtual void __unk_vfn_2();
    /*7*/ virtual void __unk_vfn_3();
    /*8*/ virtual void __unk_vfn_4();
    /*9*/ virtual void _initScreen(class ItemStackNetManagerScreen&);
    /*
    inline void _initScreen(class ItemStackNetManagerScreen& a0){
        void (ItemStackNetManagerServer::*rv)(class ItemStackNetManagerScreen&);
        *((void**)&rv) = dlsym("?_initScreen@ItemStackNetManagerServer@@EEAAXAEAVItemStackNetManagerScreen@@@Z");
        return (this->*rv)(std::forward<class ItemStackNetManagerScreen&>(a0));
    }
    inline bool allowInventoryTransactionManager() const{
        bool (ItemStackNetManagerServer::*rv)() const;
        *((void**)&rv) = dlsym("?allowInventoryTransactionManager@ItemStackNetManagerServer@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline class TypedClientNetId<struct ItemStackRequestIdTag, int, 0> getRequestId() const{
        class TypedClientNetId<struct ItemStackRequestIdTag, int, 0> (ItemStackNetManagerServer::*rv)() const;
        *((void**)&rv) = dlsym("?getRequestId@ItemStackNetManagerServer@@UEBA?AV?$TypedClientNetId@UItemStackRequestIdTag@@H$0A@@@XZ");
        return (this->*rv)();
    }
    inline void onContainerScreenOpen(class ContainerScreenContext const& a0){
        void (ItemStackNetManagerServer::*rv)(class ContainerScreenContext const&);
        *((void**)&rv) = dlsym("?onContainerScreenOpen@ItemStackNetManagerServer@@UEAAXAEBVContainerScreenContext@@@Z");
        return (this->*rv)(std::forward<class ContainerScreenContext const&>(a0));
    }
    inline bool retainSetItemStackNetIdVariant() const{
        bool (ItemStackNetManagerServer::*rv)() const;
        *((void**)&rv) = dlsym("?retainSetItemStackNetIdVariant@ItemStackNetManagerServer@@UEBA_NXZ");
        return (this->*rv)();
    }
    */
    MCAPI void _handleLegacyTransactionRequest(class TypedClientNetId<struct ItemStackLegacyRequestIdTag, int, 0> const&, std::vector<struct std::pair<enum ContainerEnumName, class std::vector<unsigned char, class std::allocator<unsigned char> > >> const&);
    MCAPI void handleRequest(std::unique_ptr<class ItemStackRequestData>, class Bedrock::NonOwnerPointer<class TextFilteringProcessor>);
    MCAPI void handleRequestBatch(class ItemStackRequestBatch const&, class Bedrock::NonOwnerPointer<class TextFilteringProcessor>);
    MCAPI bool itemMatches(struct ItemStackRequestSlotInfo const&, class ItemStack const&);
    MCAPI void normalTick();
    MCAPI void startCrafting(bool, class BlockPos const&);
    MCAPI class CallbackToken tryCloseContainerScreen(class std::function<void (void)>);

protected:

private:
    MCAPI void _filterStrings(class TypedClientNetId<struct ItemStackRequestIdTag, int, 0>, std::vector<std::string> const&);
    MCAPI void _handleRequestData(std::vector<struct ItemStackResponseInfo>&, class ItemStackRequestData const*);
    MCAPI void _processQueue();
    MCAPI void _queueRequest(std::unique_ptr<class ItemStackRequestData>);
    MCAPI void _queueRequests(class ItemStackRequestBatch const&);
    MCAPI bool _tryFilterText(class ItemStackRequestData const*);
};