// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "ItemStackNetManagerBase.hpp"
#include "Bedrock.hpp"
#define EXTRA_INCLUDE_PART_ITEMSTACKNETMANAGERSERVER
#include "Extra/ItemStackNetManagerServerAPI.hpp"
#undef EXTRA_INCLUDE_PART_ITEMSTACKNETMANAGERSERVER
class ItemStackNetManagerServer : public ItemStackNetManagerBase {
#include "Extra/ItemStackNetManagerServerAPI.hpp"
public:
    /*0*/ virtual ~ItemStackNetManagerServer();
    /*1*/ virtual bool isEnabled() const;
    /*2*/ virtual class TypedClientNetId<struct ItemStackRequestIdTag, int, 0> getRequestId() const;
    /*3*/ virtual bool retainSetItemStackNetIdVariant() const;
    /*4*/ virtual bool allowInventoryTransactionManager() const;
    /*5*/ virtual void unk_vfn_5();
    /*6*/ virtual void unk_vfn_6();
    /*8*/ virtual class SparseContainer* initOpenContainer(class BlockSource&, int /*enum ContainerEnumName*/, class ContainerWeakRef const&);
    /*9*/ virtual void unk_vfn_9();
    /*10*/ virtual void _initScreen(class ItemStackNetManagerScreen&);

public:
    MCAPI void _handleLegacyTransactionRequest(class TypedClientNetId<struct ItemStackLegacyRequestIdTag, int, 0> const&, std::vector<struct std::pair<enum ContainerEnumName, class std::vector<unsigned char, class std::allocator<unsigned char>>>> const&);
    MCAPI void handleRequest(std::unique_ptr<class ItemStackRequestData>, class Bedrock::NonOwnerPointer<class TextFilteringProcessor>);
    MCAPI void handleRequestBatch(class ItemStackRequestBatch const&, class Bedrock::NonOwnerPointer<class TextFilteringProcessor>);
    MCAPI bool itemMatches(struct ItemStackRequestSlotInfo const&, class ItemStack const&);
    MCAPI void normalTick();
    MCAPI void startCrafting(bool, class BlockPos const&);
    MCAPI class CallbackToken tryCloseContainerScreen(class std::function<void(void)>);

private:
    MCAPI void _filterStrings(class TypedClientNetId<struct ItemStackRequestIdTag, int, 0>, std::vector<std::string> const&);
    MCAPI void _handleRequestData(std::vector<struct ItemStackResponseInfo>&, class ItemStackRequestData const*);
    MCAPI void _processQueue();
    MCAPI void _queueRequest(std::unique_ptr<class ItemStackRequestData>);
    MCAPI void _queueRequests(class ItemStackRequestBatch const&);
    MCAPI bool _tryFilterText(class ItemStackRequestData const*);
};