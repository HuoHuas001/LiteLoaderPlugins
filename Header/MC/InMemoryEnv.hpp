// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_INMEMORYENV
#include "Extra/InMemoryEnvAPI.hpp"
#undef EXTRA_INCLUDE_PART_INMEMORYENV
class InMemoryEnv {
#include "Extra/InMemoryEnvAPI.hpp"
public:
    /*0*/ virtual ~InMemoryEnv();
    /*1*/ virtual class leveldb::Status NewSequentialFile(std::string const&, class leveldb::SequentialFile**);
    /*2*/ virtual class leveldb::Status NewRandomAccessFile(std::string const&, class leveldb::RandomAccessFile**);
    /*3*/ virtual class leveldb::Status NewWritableFile(std::string const&, class leveldb::WritableFile**);
    /*4*/ virtual class leveldb::Status NewAppendableFile(std::string const&, class leveldb::WritableFile**);
    /*5*/ virtual bool FileExists(std::string const&);
    /*6*/ virtual class leveldb::Status GetChildren(std::string const&, std::vector<std::string>*);
    /*7*/ virtual class leveldb::Status DeleteFileA(std::string const&);
    /*8*/ virtual void __unk_vfn_0();
    /*9*/ virtual void __unk_vfn_1();
    /*10*/ virtual void __unk_vfn_2();
    /*11*/ virtual class leveldb::Status RenameFile(std::string const&, std::string const&);
    /*12*/ virtual void __unk_vfn_3();
    /*13*/ virtual void __unk_vfn_4();
    /*14*/ virtual void __unk_vfn_5();
    /*15*/ virtual void __unk_vfn_6();
    /*16*/ virtual void __unk_vfn_7();
    /*17*/ virtual void __unk_vfn_8();
    /*18*/ virtual void __unk_vfn_9();
    /*19*/ virtual void __unk_vfn_10();
    /*20*/ virtual void flushToPermanentStorage();
    /*
    inline class leveldb::Status DeleteFileA(std::string const& a0){
        class leveldb::Status (InMemoryEnv::*rv)(std::string const&);
        *((void**)&rv) = dlsym("?DeleteFileA@InMemoryEnv@@UEAA?AVStatus@leveldb@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z");
        return (this->*rv)(std::forward<std::string const&>(a0));
    }
    inline bool FileExists(std::string const& a0){
        bool (InMemoryEnv::*rv)(std::string const&);
        *((void**)&rv) = dlsym("?FileExists@InMemoryEnv@@UEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z");
        return (this->*rv)(std::forward<std::string const&>(a0));
    }
    inline class leveldb::Status GetChildren(std::string const& a0, std::vector<std::string>* a1){
        class leveldb::Status (InMemoryEnv::*rv)(std::string const&, std::vector<std::string>*);
        *((void**)&rv) = dlsym("?GetChildren@InMemoryEnv@@UEAA?AVStatus@leveldb@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@5@@Z");
        return (this->*rv)(std::forward<std::string const&>(a0), std::forward<std::vector<std::string>*>(a1));
    }
    inline class leveldb::Status NewAppendableFile(std::string const& a0, class leveldb::WritableFile** a1){
        class leveldb::Status (InMemoryEnv::*rv)(std::string const&, class leveldb::WritableFile**);
        *((void**)&rv) = dlsym("?NewAppendableFile@InMemoryEnv@@UEAA?AVStatus@leveldb@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEAPEAVWritableFile@3@@Z");
        return (this->*rv)(std::forward<std::string const&>(a0), std::forward<class leveldb::WritableFile**>(a1));
    }
    inline class leveldb::Status NewRandomAccessFile(std::string const& a0, class leveldb::RandomAccessFile** a1){
        class leveldb::Status (InMemoryEnv::*rv)(std::string const&, class leveldb::RandomAccessFile**);
        *((void**)&rv) = dlsym("?NewRandomAccessFile@InMemoryEnv@@UEAA?AVStatus@leveldb@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEAPEAVRandomAccessFile@3@@Z");
        return (this->*rv)(std::forward<std::string const&>(a0), std::forward<class leveldb::RandomAccessFile**>(a1));
    }
    inline class leveldb::Status NewSequentialFile(std::string const& a0, class leveldb::SequentialFile** a1){
        class leveldb::Status (InMemoryEnv::*rv)(std::string const&, class leveldb::SequentialFile**);
        *((void**)&rv) = dlsym("?NewSequentialFile@InMemoryEnv@@UEAA?AVStatus@leveldb@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEAPEAVSequentialFile@3@@Z");
        return (this->*rv)(std::forward<std::string const&>(a0), std::forward<class leveldb::SequentialFile**>(a1));
    }
    inline class leveldb::Status NewWritableFile(std::string const& a0, class leveldb::WritableFile** a1){
        class leveldb::Status (InMemoryEnv::*rv)(std::string const&, class leveldb::WritableFile**);
        *((void**)&rv) = dlsym("?NewWritableFile@InMemoryEnv@@UEAA?AVStatus@leveldb@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEAPEAVWritableFile@3@@Z");
        return (this->*rv)(std::forward<std::string const&>(a0), std::forward<class leveldb::WritableFile**>(a1));
    }
    inline class leveldb::Status RenameFile(std::string const& a0, std::string const& a1){
        class leveldb::Status (InMemoryEnv::*rv)(std::string const&, std::string const&);
        *((void**)&rv) = dlsym("?RenameFile@InMemoryEnv@@UEAA?AVStatus@leveldb@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z");
        return (this->*rv)(std::forward<std::string const&>(a0), std::forward<std::string const&>(a1));
    }
    inline void flushToPermanentStorage(){
        void (InMemoryEnv::*rv)();
        *((void**)&rv) = dlsym("?flushToPermanentStorage@InMemoryEnv@@UEAAXXZ");
        return (this->*rv)();
    }
    */

protected:

private:
    MCAPI void _flushWithTransaction();
};