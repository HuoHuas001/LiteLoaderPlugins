// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_CRAFTABLECOMPOUNDS
#include "Extra/CraftableCompoundsAPI.hpp"
#undef EXTRA_INCLUDE_PART_CRAFTABLECOMPOUNDS
class CraftableCompounds {
#include "Extra/CraftableCompoundsAPI.hpp"
public:
    /*0*/ virtual ~CraftableCompounds();
    /*1*/ virtual void _registerCompound(std::vector<class ItemStack> const&, class ItemStack const&, int /*enum enum LabTableReactionType*/, int /*enum enum CompoundContainerType*/);
    /*
    inline void _registerCompound(std::vector<class ItemStack> const& a0, class ItemStack const& a1, int \/*enum enum LabTableReactionType*\/ a2, int \/*enum enum CompoundContainerType*\/ a3){
        void (CraftableCompounds::*rv)(std::vector<class ItemStack> const&, class ItemStack const&, int \/*enum enum LabTableReactionType*\/, int \/*enum enum CompoundContainerType*\/);
        *((void**)&rv) = dlsym("?_registerCompound@CraftableCompounds@@MEAAXAEBV?$vector@VItemStack@@V?$allocator@VItemStack@@@std@@@std@@AEBVItemStack@@W4LabTableReactionType@@W4CompoundContainerType@@@Z");
        return (this->*rv)(std::forward<std::vector<class ItemStack> const&>(a0), std::forward<class ItemStack const&>(a1), std::forward<int \/*enum enum LabTableReactionType*\/>(a2), std::forward<int \/*enum enum CompoundContainerType*\/>(a3));
    }
    */
    MCAPI std::vector<class ItemStack> const* getComponents(class ItemDescriptor const&) const;
    MCAPI class ItemStack const& getCompound(std::vector<class ItemStack> const&);
    MCAPI enum LabTableReactionType getReaction(std::vector<class ItemStack> const&);
    MCAPI void registerCompounds();

protected:
    MCAPI std::string _getCompoundId(std::vector<class ItemStack> const&);
    MCAPI void _registerCompound(std::vector<struct ChemistryIngredient> const&, class ItemStack const&, enum LabTableReactionType, enum CompoundContainerType);
    MCAPI void _registerCompound(std::vector<struct ChemistryIngredient> const&, enum CompoundType, enum LabTableReactionType, enum CompoundContainerType, int);

private:
};