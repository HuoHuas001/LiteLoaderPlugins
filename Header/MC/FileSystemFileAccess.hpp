// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "Core.hpp"
#define EXTRA_INCLUDE_PART_FILESYSTEMFILEACCESS
#include "Extra/FileSystemFileAccessAPI.hpp"
#undef EXTRA_INCLUDE_PART_FILESYSTEMFILEACCESS
class FileSystemFileAccess {
#include "Extra/FileSystemFileAccessAPI.hpp"
public:
    /*0*/ virtual ~FileSystemFileAccess();
    /*1*/ virtual void* fopen(class Core::Path const&, std::string const&);
    /*2*/ virtual int fclose(void*);
    /*3*/ virtual int fseek(void*, __int64, int);
    /*4*/ virtual __int64 ftell(void*);
    /*5*/ virtual void __unk_vfn_0();
    /*6*/ virtual class IFileWriteAccess* getWriteInterface();
    /*
    inline void unload(){
        void (FileSystemFileAccess::*rv)();
        *((void**)&rv) = dlsym("?unload@FileSystemFileAccess@@UEAAXXZ");
        return (this->*rv)();
    }
    inline class IFileReadAccess const* getReadInterface() const{
        class IFileReadAccess const* (FileSystemFileAccess::*rv)() const;
        *((void**)&rv) = dlsym("?getReadInterface@FileSystemFileAccess@@UEBAPEBVIFileReadAccess@@XZ");
        return (this->*rv)();
    }
    inline int fclose(void* a0){
        int (FileSystemFileAccess::*rv)(void*);
        *((void**)&rv) = dlsym("?fclose@FileSystemFileAccess@@UEAAHPEAX@Z");
        return (this->*rv)(std::forward<void*>(a0));
    }
    inline void* fopen(class Core::Path const& a0, std::string const& a1){
        void* (FileSystemFileAccess::*rv)(class Core::Path const&, std::string const&);
        *((void**)&rv) = dlsym("?fopen@FileSystemFileAccess@@UEAAPEAXAEBVPath@Core@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z");
        return (this->*rv)(std::forward<class Core::Path const&>(a0), std::forward<std::string const&>(a1));
    }
    inline int fseek(void* a0, __int64 a1, int a2){
        int (FileSystemFileAccess::*rv)(void*, __int64, int);
        *((void**)&rv) = dlsym("?fseek@FileSystemFileAccess@@UEAAHPEAX_JH@Z");
        return (this->*rv)(std::forward<void*>(a0), std::forward<__int64>(a1), std::forward<int>(a2));
    }
    inline __int64 ftell(void* a0){
        __int64 (FileSystemFileAccess::*rv)(void*);
        *((void**)&rv) = dlsym("?ftell@FileSystemFileAccess@@UEAA_JPEAX@Z");
        return (this->*rv)(std::forward<void*>(a0));
    }
    inline class IFileWriteAccess* getWriteInterface(){
        class IFileWriteAccess* (FileSystemFileAccess::*rv)();
        *((void**)&rv) = dlsym("?getWriteInterface@FileSystemFileAccess@@UEAAPEAVIFileWriteAccess@@XZ");
        return (this->*rv)();
    }
    */

protected:

private:
};