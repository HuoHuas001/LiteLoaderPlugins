// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "Spider.hpp"
#include "Actor.hpp"
#define EXTRA_INCLUDE_PART_CAVESPIDER
#include "Extra/CaveSpiderAPI.hpp"
#undef EXTRA_INCLUDE_PART_CAVESPIDER
class CaveSpider : public Spider {
#include "Extra/CaveSpiderAPI.hpp"
public:
    /*0*/ virtual ~CaveSpider();
    /*1*/ virtual bool isRuntimePredictedMovementEnabled() const;
    /*2*/ virtual void __unk_vfn_0();
    /*3*/ virtual class Vec3 getInterpolatedRidingOffset(float) const;
    /*4*/ virtual void __unk_vfn_1();
    /*5*/ virtual void normalTick();
    /*6*/ virtual float getRidingHeight();
    /*7*/ virtual void __unk_vfn_2();
    /*8*/ virtual void __unk_vfn_3();
    /*9*/ virtual void setBlockMovementSlowdownMultiplier(class Vec3 const&);
    /*10*/ virtual float getCameraOffset() const;
    /*11*/ virtual float getShadowRadius() const;
    /*12*/ virtual void __unk_vfn_4();
    /*13*/ virtual void __unk_vfn_5();
    /*14*/ virtual void playerTouch(class Player&);
    /*15*/ virtual void __unk_vfn_6();
    /*16*/ virtual void __unk_vfn_7();
    /*17*/ virtual bool isDamageBlocked(class ActorDamageSource const&) const;
    /*18*/ virtual void __unk_vfn_8();
    /*19*/ virtual void __unk_vfn_9();
    /*20*/ virtual void __unk_vfn_10();
    /*21*/ virtual void __unk_vfn_11();
    /*22*/ virtual class Actor* findAttackTarget();
    /*23*/ virtual bool isValidTarget(class Actor*) const;
    /*24*/ virtual void adjustDamageAmount(int&) const;
    /*25*/ virtual void onTame();
    /*26*/ virtual void onFailedTame();
    /*27*/ virtual void vehicleLanded(class Vec3 const&, class Vec3 const&);
    /*28*/ virtual bool shouldRender() const;
    /*29*/ virtual void onBounceStarted(class BlockPos const&, class Block const&);
    /*30*/ virtual void __unk_vfn_12();
    /*31*/ virtual void awardKillScore(class Actor&, int);
    /*32*/ virtual class HashedString const& queryEntityRenderer() const;
    /*33*/ virtual struct ActorUniqueID getSourceUniqueID() const;
    /*34*/ virtual int getPortalWaitTime() const;
    /*35*/ virtual bool canChangeDimensions() const;
    /*36*/ virtual void __unk_vfn_13();
    /*37*/ virtual struct ActorUniqueID getControllingPlayer() const;
    /*38*/ virtual bool canPickupItem(class ItemStack const&) const;
    /*39*/ virtual bool canBePulledIntoVehicle() const;
    /*40*/ virtual void __unk_vfn_14();
    /*41*/ virtual bool canSynchronizeNewEntity() const;
    /*42*/ virtual void __unk_vfn_15();
    /*43*/ virtual void __unk_vfn_16();
    /*44*/ virtual void getDebugText(std::vector<std::string>&);
    /*45*/ virtual bool isWorldBuilder() const;
    /*46*/ virtual void __unk_vfn_17();
    /*47*/ virtual bool isAdventure() const;
    /*48*/ virtual bool canDestroyBlock(class Block const&) const;
    /*49*/ virtual void setAuxValue(int);
    /*50*/ virtual void stopSpinAttack();
    /*51*/ virtual void __unk_vfn_18();
    /*52*/ virtual void __unk_vfn_19();
    /*53*/ virtual void __unk_vfn_20();
    /*54*/ virtual void _playStepSound(class BlockPos const&, class Block const&);
    /*55*/ virtual void __unk_vfn_21();
    /*56*/ virtual void __unk_vfn_22();
    /*57*/ virtual void spawnAnim();
    /*58*/ virtual void aiStep();
    /*59*/ virtual bool checkSpawnRules(bool);
    /*60*/ virtual int getItemUseDuration() const;
    /*61*/ virtual float getItemUseStartupProgress() const;
    /*62*/ virtual float getItemUseIntervalProgress() const;
    /*63*/ virtual void __unk_vfn_23();
    /*64*/ virtual bool isAlliedTo(class Mob*);
    /*65*/ virtual void __unk_vfn_24();
    /*66*/ virtual void sendArmorDamage(class std::bitset<4> const&);
    /*67*/ virtual void onBorn(class Actor&, class Actor&);
    /*68*/ virtual void __unk_vfn_25();
    /*69*/ virtual void __unk_vfn_26();
    /*70*/ virtual void _serverAiMobStep();
    /*71*/ virtual void __unk_vfn_27();
    /*72*/ virtual float getModelScale() const;
    /*
    inline int \/*enum enum Spider::Type*\/ getSpiderType() const{
        int \/*enum enum Spider::Type*\/ (CaveSpider::*rv)() const;
        *((void**)&rv) = dlsym("?getSpiderType@CaveSpider@@UEBA?AW4Type@Spider@@XZ");
        return (this->*rv)();
    }
    inline void getDebugText(std::vector<std::string>& a0){
        void (CaveSpider::*rv)(std::vector<std::string>&);
        *((void**)&rv) = dlsym("?getDebugText@CaveSpider@@EEAAXAEAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z");
        return (this->*rv)(std::forward<std::vector<std::string>&>(a0));
    }
    inline float getModelScale() const{
        float (CaveSpider::*rv)() const;
        *((void**)&rv) = dlsym("?getModelScale@CaveSpider@@UEBAMXZ");
        return (this->*rv)();
    }
    */

protected:

private:
};