// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "ActorDamageSource.hpp"
#define EXTRA_INCLUDE_PART_ACTORDAMAGEBYBLOCKSOURCE
#include "Extra/ActorDamageByBlockSourceAPI.hpp"
#undef EXTRA_INCLUDE_PART_ACTORDAMAGEBYBLOCKSOURCE
class ActorDamageByBlockSource : public ActorDamageSource {
#include "Extra/ActorDamageByBlockSourceAPI.hpp"
public:
    /*0*/ virtual ~ActorDamageByBlockSource();
    /*1*/ virtual void __unk_vfn_0();
    /*2*/ virtual void __unk_vfn_1();
    /*3*/ virtual void __unk_vfn_2();
    /*4*/ virtual struct std::pair<std::string, std::vector<std::string> > getDeathMessage(std::string, class Actor*) const;
    /*5*/ virtual void __unk_vfn_3();
    /*6*/ virtual void __unk_vfn_4();
    /*7*/ virtual void __unk_vfn_5();
    /*8*/ virtual void __unk_vfn_6();
    /*9*/ virtual void __unk_vfn_7();
    /*10*/ virtual void __unk_vfn_8();
    /*11*/ virtual void __unk_vfn_9();
    /*12*/ virtual struct ActorUniqueID getDamagingEntityUniqueID() const;
    /*13*/ virtual int /*enum enum ActorType*/ getDamagingEntityType() const;
    /*14*/ virtual void __unk_vfn_10();
    /*15*/ virtual std::unique_ptr<class ActorDamageSource> clone() const;
    /*
    inline bool isBlockSource() const{
        bool (ActorDamageByBlockSource::*rv)() const;
        *((void**)&rv) = dlsym("?isBlockSource@ActorDamageByBlockSource@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline std::unique_ptr<class ActorDamageSource> clone() const{
        std::unique_ptr<class ActorDamageSource> (ActorDamageByBlockSource::*rv)() const;
        *((void**)&rv) = dlsym("?clone@ActorDamageByBlockSource@@UEBA?AV?$unique_ptr@VActorDamageSource@@U?$default_delete@VActorDamageSource@@@std@@@std@@XZ");
        return (this->*rv)();
    }
    inline struct std::pair<std::string, std::vector<std::string> > getDeathMessage(std::string a0, class Actor* a1) const{
        struct std::pair<std::string, std::vector<std::string> > (ActorDamageByBlockSource::*rv)(std::string, class Actor*) const;
        *((void**)&rv) = dlsym("?getDeathMessage@ActorDamageByBlockSource@@UEBA?AU?$pair@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@PEAVActor@@@Z");
        return (this->*rv)(std::forward<std::string>(a0), std::forward<class Actor*>(a1));
    }
    */

protected:

private:
};