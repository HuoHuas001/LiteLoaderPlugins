// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_STRUCTUREFEATURE
#include "Extra/StructureFeatureAPI.hpp"
#undef EXTRA_INCLUDE_PART_STRUCTUREFEATURE
class StructureFeature {
#include "Extra/StructureFeatureAPI.hpp"
public:
    /*0*/ virtual ~StructureFeature();
    /*1*/ virtual bool postProcess(class BlockSource&, class Random&, int, int);
    /*2*/ virtual bool getNearestGeneratedFeature(class Dimension&, class BiomeSource const&, class BlockPos const&, class BlockPos&, class IPreliminarySurfaceProvider const&, bool);
    /*3*/ virtual bool isFeatureChunk(class BiomeSource const&, class Random&, class ChunkPos const&, unsigned int, class IPreliminarySurfaceProvider const&) = 0;
    /*4*/ virtual std::unique_ptr<class StructureStart> createStructureStart(class Dimension&, class BiomeSource const&, class Random&, class ChunkPos const&, class IPreliminarySurfaceProvider const&) = 0;
    /*5*/ virtual class StructureStart* getStructureAt(int, int, int);
    /*
    inline bool getNearestGeneratedFeature(class Dimension& a0, class BiomeSource const& a1, class BlockPos const& a2, class BlockPos& a3, class IPreliminarySurfaceProvider const& a4, bool a5){
        bool (StructureFeature::*rv)(class Dimension&, class BiomeSource const&, class BlockPos const&, class BlockPos&, class IPreliminarySurfaceProvider const&, bool);
        *((void**)&rv) = dlsym("?getNearestGeneratedFeature@StructureFeature@@UEAA_NAEAVDimension@@AEBVBiomeSource@@AEBVBlockPos@@AEAV4@AEBVIPreliminarySurfaceProvider@@_N@Z");
        return (this->*rv)(std::forward<class Dimension&>(a0), std::forward<class BiomeSource const&>(a1), std::forward<class BlockPos const&>(a2), std::forward<class BlockPos&>(a3), std::forward<class IPreliminarySurfaceProvider const&>(a4), std::forward<bool>(a5));
    }
    inline class StructureStart* getStructureAt(int a0, int a1, int a2){
        class StructureStart* (StructureFeature::*rv)(int, int, int);
        *((void**)&rv) = dlsym("?getStructureAt@StructureFeature@@MEAAPEAVStructureStart@@HHH@Z");
        return (this->*rv)(std::forward<int>(a0), std::forward<int>(a1), std::forward<int>(a2));
    }
    inline bool postProcess(class BlockSource& a0, class Random& a1, int a2, int a3){
        bool (StructureFeature::*rv)(class BlockSource&, class Random&, int, int);
        *((void**)&rv) = dlsym("?postProcess@StructureFeature@@UEAA_NAEAVBlockSource@@AEAVRandom@@HH@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0), std::forward<class Random&>(a1), std::forward<int>(a2), std::forward<int>(a3));
    }
    */
    MCAPI class BlockPos chunkStartAtSurfaceLevel(class IPreliminarySurfaceProvider const&, class ChunkPos, int);
    MCAPI void createBlueprints(class Dimension&, class ChunkPos const&, class BiomeSource const&, class IPreliminarySurfaceProvider const&);
    MCAPI void debugRender();
    MCAPI std::vector<class ChunkPos> findFarAwayStructures(class buffer_span<class ChunkPos>, unsigned int);
    MCAPI void foreachIntersectingStructureStart(class BoundingBox const&, class std::function<void (class StructureStart&)>);
    MCAPI void garbageCollectBlueprints(class buffer_span<class ChunkPos>, unsigned int);
    MCAPI void generateHardcodedMobSpawns(class LevelChunk&);
    MCAPI bool isInsideBoundingFeature(int, int, int);
    MCAPI void postProcessMobsAt(class BlockSource&, int, int, class Random&);
    MCAPI void waitForFeatureBlueprints();
    MCAPI static bool findNearestFeaturePositionBySpacing(class Dimension&, class IPreliminarySurfaceProvider const&, class StructureFeature&, class BiomeSource const&, class BlockPos const&, class BlockPos&, int, int, int, bool, int, bool);
    MCAPI static class ChunkPos getChunkPosInSpace(class ChunkPos const&, class Random&, unsigned int, int, int, int, bool);
    MCAPI static void setRandomSeedFor(class Random&, int, int, int, unsigned int);

protected:

private:
};