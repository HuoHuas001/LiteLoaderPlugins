// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_WORLDSESSIONENDPOINT
#include "Extra/WorldSessionEndPointAPI.hpp"
#undef EXTRA_INCLUDE_PART_WORLDSESSIONENDPOINT
class WorldSessionEndPoint {
#include "Extra/WorldSessionEndPointAPI.hpp"
public:    /*
    inline void flush(){
        void (WorldSessionEndPoint::*rv)();
        *((void**)&rv) = dlsym("?flush@WorldSessionEndPoint@@UEAAXXZ");
        return (this->*rv)();
    }
    inline bool logOnlyOnce() const{
        bool (WorldSessionEndPoint::*rv)() const;
        *((void**)&rv) = dlsym("?logOnlyOnce@WorldSessionEndPoint@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isEnabled() const{
        bool (WorldSessionEndPoint::*rv)() const;
        *((void**)&rv) = dlsym("?isEnabled@WorldSessionEndPoint@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline void setEnabled(bool a0){
        void (WorldSessionEndPoint::*rv)(bool);
        *((void**)&rv) = dlsym("?setEnabled@WorldSessionEndPoint@@UEAAX_N@Z");
        return (this->*rv)(std::forward<bool>(a0));
    }
    inline void log(int \/*enum enum LogArea*\/ a0, int \/*enum enum LogLevel*\/ a1, char const* a2){
        void (WorldSessionEndPoint::*rv)(int \/*enum enum LogArea*\/, int \/*enum enum LogLevel*\/, char const*);
        *((void**)&rv) = dlsym("?log@WorldSessionEndPoint@@UEAAXW4LogArea@@W4LogLevel@@PEBD@Z");
        return (this->*rv)(std::forward<int \/*enum enum LogArea*\/>(a0), std::forward<int \/*enum enum LogLevel*\/>(a1), std::forward<char const*>(a2));
    }
    */

protected:

private:
};