// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_BASECIRCUITCOMPONENT
#include "Extra/BaseCircuitComponentAPI.hpp"
#undef EXTRA_INCLUDE_PART_BASECIRCUITCOMPONENT
class BaseCircuitComponent {
#include "Extra/BaseCircuitComponentAPI.hpp"
public:
    /*0*/ virtual ~BaseCircuitComponent();
    /*1*/ virtual int getStrength() const;
    /*2*/ virtual void __unk_vfn_0();
    /*3*/ virtual void setStrength(int);
    /*4*/ virtual void __unk_vfn_1();
    /*5*/ virtual void setConsumePowerAnyDirection(bool);
    /*6*/ virtual bool canConsumePowerAnyDirection() const;
    /*7*/ virtual void __unk_vfn_2();
    /*8*/ virtual bool canStopPower() const;
    /*9*/ virtual void setStopPower(bool);
    /*10*/ virtual bool removeSource(class BlockPos const&, class BaseCircuitComponent const*);
    /*11*/ virtual bool addSource(class CircuitSceneGraph&, class CircuitTrackingInfo const&, int&, bool&);
    /*12*/ virtual bool allowConnection(class CircuitSceneGraph&, class CircuitTrackingInfo const&, bool&);
    /*13*/ virtual void checkLock(class CircuitSystem&, class BlockPos const&);
    /*14*/ virtual bool evaluate(class CircuitSystem&, class BlockPos const&);
    /*15*/ virtual void cacheValues(class CircuitSystem&, class BlockPos const&);
    /*16*/ virtual void updateDependencies(class CircuitSceneGraph&, class BlockPos const&);
    /*17*/ virtual void __unk_vfn_3();
    /*18*/ virtual void __unk_vfn_4();
    /*19*/ virtual bool hasSource(class BaseCircuitComponent&);
    /*20*/ virtual void __unk_vfn_5();
    /*21*/ virtual void __unk_vfn_6();
    /*22*/ virtual int /*enum enum CircuitComponentType*/ getCircuitComponentType() const;
    /*23*/ virtual int /*enum enum CircuitComponentType*/ getCircuitComponentGroupType() const;
    /*
    inline bool isSecondaryPowered() const{
        bool (BaseCircuitComponent::*rv)() const;
        *((void**)&rv) = dlsym("?isSecondaryPowered@BaseCircuitComponent@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isHalfPulse() const{
        bool (BaseCircuitComponent::*rv)() const;
        *((void**)&rv) = dlsym("?isHalfPulse@BaseCircuitComponent@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool canStopPower() const{
        bool (BaseCircuitComponent::*rv)() const;
        *((void**)&rv) = dlsym("?canStopPower@BaseCircuitComponent@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool allowIndirect() const{
        bool (BaseCircuitComponent::*rv)() const;
        *((void**)&rv) = dlsym("?allowIndirect@BaseCircuitComponent@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool canConsumerPower() const{
        bool (BaseCircuitComponent::*rv)() const;
        *((void**)&rv) = dlsym("?canConsumerPower@BaseCircuitComponent@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool addSource(class CircuitSceneGraph& a0, class CircuitTrackingInfo const& a1, int& a2, bool& a3){
        bool (BaseCircuitComponent::*rv)(class CircuitSceneGraph&, class CircuitTrackingInfo const&, int&, bool&);
        *((void**)&rv) = dlsym("?addSource@BaseCircuitComponent@@UEAA_NAEAVCircuitSceneGraph@@AEBVCircuitTrackingInfo@@AEAHAEA_N@Z");
        return (this->*rv)(std::forward<class CircuitSceneGraph&>(a0), std::forward<class CircuitTrackingInfo const&>(a1), std::forward<int&>(a2), std::forward<bool&>(a3));
    }
    inline bool hasChildrenSource() const{
        bool (BaseCircuitComponent::*rv)() const;
        *((void**)&rv) = dlsym("?hasChildrenSource@BaseCircuitComponent@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool evaluate(class CircuitSystem& a0, class BlockPos const& a1){
        bool (BaseCircuitComponent::*rv)(class CircuitSystem&, class BlockPos const&);
        *((void**)&rv) = dlsym("?evaluate@BaseCircuitComponent@@UEAA_NAEAVCircuitSystem@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class CircuitSystem&>(a0), std::forward<class BlockPos const&>(a1));
    }
    inline void checkLock(class CircuitSystem& a0, class BlockPos const& a1){
        void (BaseCircuitComponent::*rv)(class CircuitSystem&, class BlockPos const&);
        *((void**)&rv) = dlsym("?checkLock@BaseCircuitComponent@@UEAAXAEAVCircuitSystem@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class CircuitSystem&>(a0), std::forward<class BlockPos const&>(a1));
    }
    inline void setStopPower(bool a0){
        void (BaseCircuitComponent::*rv)(bool);
        *((void**)&rv) = dlsym("?setStopPower@BaseCircuitComponent@@UEAAX_N@Z");
        return (this->*rv)(std::forward<bool>(a0));
    }
    inline void updateDependencies(class CircuitSceneGraph& a0, class BlockPos const& a1){
        void (BaseCircuitComponent::*rv)(class CircuitSceneGraph&, class BlockPos const&);
        *((void**)&rv) = dlsym("?updateDependencies@BaseCircuitComponent@@UEAAXAEAVCircuitSceneGraph@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class CircuitSceneGraph&>(a0), std::forward<class BlockPos const&>(a1));
    }
    inline void cacheValues(class CircuitSystem& a0, class BlockPos const& a1){
        void (BaseCircuitComponent::*rv)(class CircuitSystem&, class BlockPos const&);
        *((void**)&rv) = dlsym("?cacheValues@BaseCircuitComponent@@UEAAXAEAVCircuitSystem@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class CircuitSystem&>(a0), std::forward<class BlockPos const&>(a1));
    }
    inline bool allowConnection(class CircuitSceneGraph& a0, class CircuitTrackingInfo const& a1, bool& a2){
        bool (BaseCircuitComponent::*rv)(class CircuitSceneGraph&, class CircuitTrackingInfo const&, bool&);
        *((void**)&rv) = dlsym("?allowConnection@BaseCircuitComponent@@UEAA_NAEAVCircuitSceneGraph@@AEBVCircuitTrackingInfo@@AEA_N@Z");
        return (this->*rv)(std::forward<class CircuitSceneGraph&>(a0), std::forward<class CircuitTrackingInfo const&>(a1), std::forward<bool&>(a2));
    }
    inline int getDirection() const{
        int (BaseCircuitComponent::*rv)() const;
        *((void**)&rv) = dlsym("?getDirection@BaseCircuitComponent@@UEBAHXZ");
        return (this->*rv)();
    }
    inline int \/*enum enum CircuitComponentType*\/ getCircuitComponentType() const{
        int \/*enum enum CircuitComponentType*\/ (BaseCircuitComponent::*rv)() const;
        *((void**)&rv) = dlsym("?getCircuitComponentType@BaseCircuitComponent@@UEBA?AW4CircuitComponentType@@XZ");
        return (this->*rv)();
    }
    inline void setStrength(int a0){
        void (BaseCircuitComponent::*rv)(int);
        *((void**)&rv) = dlsym("?setStrength@BaseCircuitComponent@@UEAAXH@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline void setDirection(unsigned char a0){
        void (BaseCircuitComponent::*rv)(unsigned char);
        *((void**)&rv) = dlsym("?setDirection@BaseCircuitComponent@@UEAAXE@Z");
        return (this->*rv)(std::forward<unsigned char>(a0));
    }
    inline bool canConsumePowerAnyDirection() const{
        bool (BaseCircuitComponent::*rv)() const;
        *((void**)&rv) = dlsym("?canConsumePowerAnyDirection@BaseCircuitComponent@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline int \/*enum enum CircuitComponentType*\/ getCircuitComponentGroupType() const{
        int \/*enum enum CircuitComponentType*\/ (BaseCircuitComponent::*rv)() const;
        *((void**)&rv) = dlsym("?getCircuitComponentGroupType@BaseCircuitComponent@@UEBA?AW4CircuitComponentType@@XZ");
        return (this->*rv)();
    }
    inline int getStrength() const{
        int (BaseCircuitComponent::*rv)() const;
        *((void**)&rv) = dlsym("?getStrength@BaseCircuitComponent@@UEBAHXZ");
        return (this->*rv)();
    }
    inline bool hasSource(class BaseCircuitComponent& a0){
        bool (BaseCircuitComponent::*rv)(class BaseCircuitComponent&);
        *((void**)&rv) = dlsym("?hasSource@BaseCircuitComponent@@UEAA_NAEAV1@@Z");
        return (this->*rv)(std::forward<class BaseCircuitComponent&>(a0));
    }
    inline bool removeSource(class BlockPos const& a0, class BaseCircuitComponent const* a1){
        bool (BaseCircuitComponent::*rv)(class BlockPos const&, class BaseCircuitComponent const*);
        *((void**)&rv) = dlsym("?removeSource@BaseCircuitComponent@@UEAA_NAEBVBlockPos@@PEBV1@@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0), std::forward<class BaseCircuitComponent const*>(a1));
    }
    inline void setConsumePowerAnyDirection(bool a0){
        void (BaseCircuitComponent::*rv)(bool);
        *((void**)&rv) = dlsym("?setConsumePowerAnyDirection@BaseCircuitComponent@@UEAAX_N@Z");
        return (this->*rv)(std::forward<bool>(a0));
    }
    */

protected:
    MCAPI bool trackPowerSource(class CircuitTrackingInfo const&, int, bool, int);

private:
};