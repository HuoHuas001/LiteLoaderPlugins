// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_FIXEDBIOMESOURCE
#include "Extra/FixedBiomeSourceAPI.hpp"
#undef EXTRA_INCLUDE_PART_FIXEDBIOMESOURCE
class FixedBiomeSource {
#include "Extra/FixedBiomeSourceAPI.hpp"
public:
    /*0*/ virtual ~FixedBiomeSource();
    /*1*/ virtual void fillBiomes(class LevelChunk&, class ChunkLocalNoiseCache const&) const;
    /*2*/ virtual class BiomeArea getBiomeArea(class BoundingBox const&, unsigned int) const;
    /*3*/ virtual bool containsOnly(int, int, int, int, class gsl::span<int const, -1>) const;
    /*
    inline class Biome const* getBiome(int a0, int a1, int a2) const{
        class Biome const* (FixedBiomeSource::*rv)(int, int, int) const;
        *((void**)&rv) = dlsym("?getBiome@FixedBiomeSource@@UEBAPEBVBiome@@HHH@Z");
        return (this->*rv)(std::forward<int>(a0), std::forward<int>(a1), std::forward<int>(a2));
    }
    inline bool containsOnly(int a0, int a1, int a2, int a3, class gsl::span<int const, -1> a4) const{
        bool (FixedBiomeSource::*rv)(int, int, int, int, class gsl::span<int const, -1>) const;
        *((void**)&rv) = dlsym("?containsOnly@FixedBiomeSource@@UEBA_NHHHHV?$span@$$CBH$0?0@gsl@@@Z");
        return (this->*rv)(std::forward<int>(a0), std::forward<int>(a1), std::forward<int>(a2), std::forward<int>(a3), std::forward<class gsl::span<int const, -1>>(a4));
    }
    inline void fillBiomes(class LevelChunk& a0, class ChunkLocalNoiseCache const& a1) const{
        void (FixedBiomeSource::*rv)(class LevelChunk&, class ChunkLocalNoiseCache const&) const;
        *((void**)&rv) = dlsym("?fillBiomes@FixedBiomeSource@@UEBAXAEAVLevelChunk@@AEBVChunkLocalNoiseCache@@@Z");
        return (this->*rv)(std::forward<class LevelChunk&>(a0), std::forward<class ChunkLocalNoiseCache const&>(a1));
    }
    inline class BiomeArea getBiomeArea(class BoundingBox const& a0, unsigned int a1) const{
        class BiomeArea (FixedBiomeSource::*rv)(class BoundingBox const&, unsigned int) const;
        *((void**)&rv) = dlsym("?getBiomeArea@FixedBiomeSource@@UEBA?AVBiomeArea@@AEBVBoundingBox@@I@Z");
        return (this->*rv)(std::forward<class BoundingBox const&>(a0), std::forward<unsigned int>(a1));
    }
    */

protected:

private:
};