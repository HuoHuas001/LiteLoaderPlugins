// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "Fireball.hpp"
#include "Actor.hpp"
#define EXTRA_INCLUDE_PART_WITHERSKULL
#include "Extra/WitherSkullAPI.hpp"
#undef EXTRA_INCLUDE_PART_WITHERSKULL
class WitherSkull : public Fireball {
#include "Extra/WitherSkullAPI.hpp"
public:
    /*0*/ virtual void reloadHardcoded(int /*enum enum Actor::InitializationMethod*/, class VariantParameterList const&);
    /*1*/ virtual void initializeComponents(int /*enum enum Actor::InitializationMethod*/, class VariantParameterList const&);
    /*2*/ virtual ~WitherSkull();
    /*3*/ virtual bool isRuntimePredictedMovementEnabled() const;
    /*4*/ virtual void __unk_vfn_0();
    /*5*/ virtual float getInterpolatedHeadRot(float) const;
    /*6*/ virtual float getInterpolatedBodyYaw(float) const;
    /*7*/ virtual class Vec3 getInterpolatedRidingOffset(float) const;
    /*8*/ virtual void __unk_vfn_1();
    /*9*/ virtual float getRidingHeight();
    /*10*/ virtual void __unk_vfn_2();
    /*11*/ virtual void __unk_vfn_3();
    /*12*/ virtual float getCameraOffset() const;
    /*13*/ virtual float getShadowHeightOffs();
    /*14*/ virtual void __unk_vfn_4();
    /*15*/ virtual float getBrightness(float) const;
    /*16*/ virtual void __unk_vfn_5();
    /*17*/ virtual void playerTouch(class Player&);
    /*18*/ virtual bool isPickable();
    /*19*/ virtual void __unk_vfn_6();
    /*20*/ virtual bool isSleeping() const;
    /*21*/ virtual void setSleeping(bool);
    /*22*/ virtual void __unk_vfn_7();
    /*23*/ virtual bool isBlocking() const;
    /*24*/ virtual bool isDamageBlocked(class ActorDamageSource const&) const;
    /*25*/ virtual bool isOnFire() const;
    /*26*/ virtual void __unk_vfn_8();
    /*27*/ virtual bool isSurfaceMob() const;
    /*28*/ virtual void __unk_vfn_9();
    /*29*/ virtual void __unk_vfn_10();
    /*30*/ virtual void __unk_vfn_11();
    /*31*/ virtual class Actor* findAttackTarget();
    /*32*/ virtual bool isValidTarget(class Actor*) const;
    /*33*/ virtual void adjustDamageAmount(int&) const;
    /*34*/ virtual void onTame();
    /*35*/ virtual void onFailedTame();
    /*36*/ virtual bool isJumping() const;
    /*37*/ virtual void vehicleLanded(class Vec3 const&, class Vec3 const&);
    /*38*/ virtual void animateHurt();
    /*39*/ virtual void onBounceStarted(class BlockPos const&, class Block const&);
    /*40*/ virtual void __unk_vfn_12();
    /*41*/ virtual void awardKillScore(class Actor&, int);
    /*42*/ virtual int /*enum enum ArmorMaterialType*/ getArmorMaterialTypeInSlot(int /*enum enum ArmorSlot*/) const;
    /*43*/ virtual int /*enum enum ArmorTextureType*/ getArmorMaterialTextureTypeInSlot(int /*enum enum ArmorSlot*/) const;
    /*44*/ virtual float getArmorColorInSlot(int /*enum enum ArmorSlot*/, int) const;
    /*45*/ virtual void setEquippedSlot(int /*enum enum EquipmentSlot*/, class ItemStack const&);
    /*46*/ virtual class HashedString const& queryEntityRenderer() const;
    /*47*/ virtual struct ActorUniqueID getSourceUniqueID() const;
    /*48*/ virtual bool canFreeze() const;
    /*49*/ virtual int getPortalWaitTime() const;
    /*50*/ virtual bool canChangeDimensions() const;
    /*51*/ virtual void __unk_vfn_13();
    /*52*/ virtual struct ActorUniqueID getControllingPlayer() const;
    /*53*/ virtual bool canPickupItem(class ItemStack const&) const;
    /*54*/ virtual bool canBePulledIntoVehicle() const;
    /*55*/ virtual bool inCaravan() const;
    /*56*/ virtual void __unk_vfn_14();
    /*57*/ virtual bool canSynchronizeNewEntity() const;
    /*58*/ virtual void buildDebugInfo(std::string&) const;
    /*59*/ virtual int getDeathTime() const;
    /*60*/ virtual void swing();
    /*61*/ virtual void __unk_vfn_15();
    /*62*/ virtual void __unk_vfn_16();
    /*63*/ virtual float getYHeadRot() const;
    /*64*/ virtual bool isWorldBuilder() const;
    /*65*/ virtual void __unk_vfn_17();
    /*66*/ virtual bool isAdventure() const;
    /*67*/ virtual bool canDestroyBlock(class Block const&) const;
    /*68*/ virtual void setAuxValue(int);
    /*69*/ virtual void stopSpinAttack();
    /*70*/ virtual void __unk_vfn_18();
    /*71*/ virtual void __unk_vfn_19();
    /*72*/ virtual void updateEntitySpecificMolangVariables(class RenderParams&);
    /*73*/ virtual void __unk_vfn_20();
    /*74*/ virtual bool _hurt(class ActorDamageSource const&, int, bool, bool);
    /*75*/ virtual void __unk_vfn_21();
    /*76*/ virtual void _onSizeUpdated();
    /*77*/ virtual void __unk_vfn_22();
    /*78*/ virtual float getInertia();
    /*
    inline bool isOnFire() const{
        bool (WitherSkull::*rv)() const;
        *((void**)&rv) = dlsym("?isOnFire@WitherSkull@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool shouldBurn(){
        bool (WitherSkull::*rv)();
        *((void**)&rv) = dlsym("?shouldBurn@WitherSkull@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline bool isPickable(){
        bool (WitherSkull::*rv)();
        *((void**)&rv) = dlsym("?isPickable@WitherSkull@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline bool _hurt(class ActorDamageSource const& a0, int a1, bool a2, bool a3){
        bool (WitherSkull::*rv)(class ActorDamageSource const&, int, bool, bool);
        *((void**)&rv) = dlsym("?_hurt@WitherSkull@@MEAA_NAEBVActorDamageSource@@H_N1@Z");
        return (this->*rv)(std::forward<class ActorDamageSource const&>(a0), std::forward<int>(a1), std::forward<bool>(a2), std::forward<bool>(a3));
    }
    inline bool canDestroyBlock(class Block const& a0) const{
        bool (WitherSkull::*rv)(class Block const&) const;
        *((void**)&rv) = dlsym("?canDestroyBlock@WitherSkull@@UEBA_NAEBVBlock@@@Z");
        return (this->*rv)(std::forward<class Block const&>(a0));
    }
    inline float getInertia(){
        float (WitherSkull::*rv)();
        *((void**)&rv) = dlsym("?getInertia@WitherSkull@@MEAAMXZ");
        return (this->*rv)();
    }
    inline void initializeComponents(int \/*enum enum Actor::InitializationMethod*\/ a0, class VariantParameterList const& a1){
        void (WitherSkull::*rv)(int \/*enum enum Actor::InitializationMethod*\/, class VariantParameterList const&);
        *((void**)&rv) = dlsym("?initializeComponents@WitherSkull@@UEAAXW4InitializationMethod@Actor@@AEBVVariantParameterList@@@Z");
        return (this->*rv)(std::forward<int \/*enum enum Actor::InitializationMethod*\/>(a0), std::forward<class VariantParameterList const&>(a1));
    }
    */

protected:

private:
};