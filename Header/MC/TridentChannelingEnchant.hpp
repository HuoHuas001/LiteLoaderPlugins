// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "Enchant.hpp"
#define EXTRA_INCLUDE_PART_TRIDENTCHANNELINGENCHANT
#include "Extra/TridentChannelingEnchantAPI.hpp"
#undef EXTRA_INCLUDE_PART_TRIDENTCHANNELINGENCHANT
class TridentChannelingEnchant {
#include "Extra/TridentChannelingEnchantAPI.hpp"
public:
    /*0*/ virtual ~TridentChannelingEnchant();
    /*1*/ virtual bool isCompatibleWith(int /*enum enum Enchant::Type*/) const;
    /*
    inline int getMaxLevel() const{
        int (TridentChannelingEnchant::*rv)() const;
        *((void**)&rv) = dlsym("?getMaxLevel@TridentChannelingEnchant@@UEBAHXZ");
        return (this->*rv)();
    }
    inline int getMaxCost(int a0) const{
        int (TridentChannelingEnchant::*rv)(int) const;
        *((void**)&rv) = dlsym("?getMaxCost@TridentChannelingEnchant@@UEBAHH@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline int getMinCost(int a0) const{
        int (TridentChannelingEnchant::*rv)(int) const;
        *((void**)&rv) = dlsym("?getMinCost@TridentChannelingEnchant@@UEBAHH@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline bool isCompatibleWith(int \/*enum enum Enchant::Type*\/ a0) const{
        bool (TridentChannelingEnchant::*rv)(int \/*enum enum Enchant::Type*\/) const;
        *((void**)&rv) = dlsym("?isCompatibleWith@TridentChannelingEnchant@@UEBA_NW4Type@Enchant@@@Z");
        return (this->*rv)(std::forward<int \/*enum enum Enchant::Type*\/>(a0));
    }
    */

protected:

private:
};