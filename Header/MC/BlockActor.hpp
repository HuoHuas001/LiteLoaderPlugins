// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_BLOCKACTOR
#include "Extra/BlockActorAPI.hpp"
#undef EXTRA_INCLUDE_PART_BLOCKACTOR
class BlockActor {
#include "Extra/BlockActorAPI.hpp"
public:
    /*0*/ virtual ~BlockActor();
    /*1*/ virtual void load(class Level&, class CompoundTag const&, class DataLoadHelper&);
    /*2*/ virtual bool save(class CompoundTag&) const;
    /*3*/ virtual bool saveItemInstanceData(class CompoundTag&);
    /*4*/ virtual void saveBlockData(class CompoundTag&, class BlockSource&) const;
    /*5*/ virtual void loadBlockData(class CompoundTag const&, class BlockSource&, class DataLoadHelper&);
    /*6*/ virtual void onCustomTagLoadDone(class BlockSource&);
    /*7*/ virtual void tick(class BlockSource&);
    /*8*/ virtual void onChanged(class BlockSource&);
    /*9*/ virtual bool isMovable(class BlockSource&);
    /*10*/ virtual bool isCustomNameSaved();
    /*11*/ virtual void onPlace(class BlockSource&);
    /*12*/ virtual void __unk_vfn_0();
    /*13*/ virtual void onRemoved(class BlockSource&);
    /*14*/ virtual void triggerEvent(int, int);
    /*15*/ virtual void __unk_vfn_1();
    /*16*/ virtual void __unk_vfn_2();
    /*17*/ virtual void __unk_vfn_3();
    /*18*/ virtual void __unk_vfn_4();
    /*19*/ virtual class BlockActor* getCrackEntity(class BlockSource&, class BlockPos const&);
    /*20*/ virtual void getDebugText(std::vector<std::string>&, class BlockPos const&);
    /*21*/ virtual void __unk_vfn_5();
    /*22*/ virtual std::string const& getFilteredCustomName(class UIProfanityContext const&);
    /*23*/ virtual std::string getName() const;
    /*24*/ virtual void setCustomName(std::string const&);
    /*25*/ virtual std::string getImmersiveReaderText(class BlockSource&);
    /*26*/ virtual void __unk_vfn_6();
    /*27*/ virtual class PistonBlockActor* getOwningPiston(class BlockSource&);
    /*28*/ virtual void __unk_vfn_7();
    /*29*/ virtual void __unk_vfn_8();
    /*30*/ virtual void __unk_vfn_9();
    /*31*/ virtual void __unk_vfn_10();
    /*32*/ virtual void __unk_vfn_11();
    /*33*/ virtual void __unk_vfn_12();
    /*34*/ virtual std::unique_ptr<class BlockActorDataPacket> _getUpdatePacket(class BlockSource&);
    /*35*/ virtual void _onUpdatePacket(class CompoundTag const&, class BlockSource&);
    /*36*/ virtual bool _playerCanUpdate(class Player const&) const;
    /*
    inline bool hasAlphaLayer() const{
        bool (BlockActor::*rv)() const;
        *((void**)&rv) = dlsym("?hasAlphaLayer@BlockActor@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline class Container* getContainer(){
        class Container* (BlockActor::*rv)();
        *((void**)&rv) = dlsym("?getContainer@BlockActor@@UEAAPEAVContainer@@XZ");
        return (this->*rv)();
    }
    inline class Container const* getContainer() const{
        class Container const* (BlockActor::*rv)() const;
        *((void**)&rv) = dlsym("?getContainer@BlockActor@@UEBAPEBVContainer@@XZ");
        return (this->*rv)();
    }
    inline class PistonBlockActor* getOwningPiston(class BlockSource& a0){
        class PistonBlockActor* (BlockActor::*rv)(class BlockSource&);
        *((void**)&rv) = dlsym("?getOwningPiston@BlockActor@@UEAAPEAVPistonBlockActor@@AEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0));
    }
    inline void onCustomTagLoadDone(class BlockSource& a0){
        void (BlockActor::*rv)(class BlockSource&);
        *((void**)&rv) = dlsym("?onCustomTagLoadDone@BlockActor@@UEAAXAEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0));
    }
    inline void saveBlockData(class CompoundTag& a0, class BlockSource& a1) const{
        void (BlockActor::*rv)(class CompoundTag&, class BlockSource&) const;
        *((void**)&rv) = dlsym("?saveBlockData@BlockActor@@UEBAXAEAVCompoundTag@@AEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class CompoundTag&>(a0), std::forward<class BlockSource&>(a1));
    }
    inline void onPlace(class BlockSource& a0){
        void (BlockActor::*rv)(class BlockSource&);
        *((void**)&rv) = dlsym("?onPlace@BlockActor@@UEAAXAEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0));
    }
    inline void _onUpdatePacket(class CompoundTag const& a0, class BlockSource& a1){
        void (BlockActor::*rv)(class CompoundTag const&, class BlockSource&);
        *((void**)&rv) = dlsym("?_onUpdatePacket@BlockActor@@MEAAXAEBVCompoundTag@@AEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class CompoundTag const&>(a0), std::forward<class BlockSource&>(a1));
    }
    inline void onChanged(class BlockSource& a0){
        void (BlockActor::*rv)(class BlockSource&);
        *((void**)&rv) = dlsym("?onChanged@BlockActor@@UEAAXAEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0));
    }
    inline void onChunkLoaded(class LevelChunk& a0){
        void (BlockActor::*rv)(class LevelChunk&);
        *((void**)&rv) = dlsym("?onChunkLoaded@BlockActor@@UEAAXAEAVLevelChunk@@@Z");
        return (this->*rv)(std::forward<class LevelChunk&>(a0));
    }
    inline void triggerEvent(int a0, int a1){
        void (BlockActor::*rv)(int, int);
        *((void**)&rv) = dlsym("?triggerEvent@BlockActor@@UEAAXHH@Z");
        return (this->*rv)(std::forward<int>(a0), std::forward<int>(a1));
    }
    inline void onChunkUnloaded(class LevelChunk& a0){
        void (BlockActor::*rv)(class LevelChunk&);
        *((void**)&rv) = dlsym("?onChunkUnloaded@BlockActor@@UEAAXAEAVLevelChunk@@@Z");
        return (this->*rv)(std::forward<class LevelChunk&>(a0));
    }
    inline void fixupOnLoad(class LevelChunk& a0){
        void (BlockActor::*rv)(class LevelChunk&);
        *((void**)&rv) = dlsym("?fixupOnLoad@BlockActor@@UEAAXAEAVLevelChunk@@@Z");
        return (this->*rv)(std::forward<class LevelChunk&>(a0));
    }
    inline void loadBlockData(class CompoundTag const& a0, class BlockSource& a1, class DataLoadHelper& a2){
        void (BlockActor::*rv)(class CompoundTag const&, class BlockSource&, class DataLoadHelper&);
        *((void**)&rv) = dlsym("?loadBlockData@BlockActor@@UEAAXAEBVCompoundTag@@AEAVBlockSource@@AEAVDataLoadHelper@@@Z");
        return (this->*rv)(std::forward<class CompoundTag const&>(a0), std::forward<class BlockSource&>(a1), std::forward<class DataLoadHelper&>(a2));
    }
    inline void onRemoved(class BlockSource& a0){
        void (BlockActor::*rv)(class BlockSource&);
        *((void**)&rv) = dlsym("?onRemoved@BlockActor@@UEAAXAEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0));
    }
    inline void onMove(){
        void (BlockActor::*rv)();
        *((void**)&rv) = dlsym("?onMove@BlockActor@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void onNeighborChanged(class BlockSource& a0, class BlockPos const& a1){
        void (BlockActor::*rv)(class BlockSource&, class BlockPos const&);
        *((void**)&rv) = dlsym("?onNeighborChanged@BlockActor@@UEAAXAEAVBlockSource@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0), std::forward<class BlockPos const&>(a1));
    }
    inline class BlockActor* getCrackEntity(class BlockSource& a0, class BlockPos const& a1){
        class BlockActor* (BlockActor::*rv)(class BlockSource&, class BlockPos const&);
        *((void**)&rv) = dlsym("?getCrackEntity@BlockActor@@UEAAPEAV1@AEAVBlockSource@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0), std::forward<class BlockPos const&>(a1));
    }
    inline bool _playerCanUpdate(class Player const& a0) const{
        bool (BlockActor::*rv)(class Player const&) const;
        *((void**)&rv) = dlsym("?_playerCanUpdate@BlockActor@@MEBA_NAEBVPlayer@@@Z");
        return (this->*rv)(std::forward<class Player const&>(a0));
    }
    inline std::string getName() const{
        std::string (BlockActor::*rv)() const;
        *((void**)&rv) = dlsym("?getName@BlockActor@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ");
        return (this->*rv)();
    }
    inline std::unique_ptr<class BlockActorDataPacket> _getUpdatePacket(class BlockSource& a0){
        std::unique_ptr<class BlockActorDataPacket> (BlockActor::*rv)(class BlockSource&);
        *((void**)&rv) = dlsym("?_getUpdatePacket@BlockActor@@MEAA?AV?$unique_ptr@VBlockActorDataPacket@@U?$default_delete@VBlockActorDataPacket@@@std@@@std@@AEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0));
    }
    inline float getShadowRadius(class BlockSource& a0) const{
        float (BlockActor::*rv)(class BlockSource&) const;
        *((void**)&rv) = dlsym("?getShadowRadius@BlockActor@@UEBAMAEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0));
    }
    inline float getDeletionDelayTimeSeconds() const{
        float (BlockActor::*rv)() const;
        *((void**)&rv) = dlsym("?getDeletionDelayTimeSeconds@BlockActor@@UEBAMXZ");
        return (this->*rv)();
    }
    inline int getRepairCost() const{
        int (BlockActor::*rv)() const;
        *((void**)&rv) = dlsym("?getRepairCost@BlockActor@@UEBAHXZ");
        return (this->*rv)();
    }
    inline std::string const& getCustomName() const{
        std::string const& (BlockActor::*rv)() const;
        *((void**)&rv) = dlsym("?getCustomName@BlockActor@@UEBAAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ");
        return (this->*rv)();
    }
    inline std::string getImmersiveReaderText(class BlockSource& a0){
        std::string (BlockActor::*rv)(class BlockSource&);
        *((void**)&rv) = dlsym("?getImmersiveReaderText@BlockActor@@UEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0));
    }
    inline void clearCache(){
        void (BlockActor::*rv)();
        *((void**)&rv) = dlsym("?clearCache@BlockActor@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void getDebugText(std::vector<std::string>& a0, class BlockPos const& a1){
        void (BlockActor::*rv)(std::vector<std::string>&, class BlockPos const&);
        *((void**)&rv) = dlsym("?getDebugText@BlockActor@@UEAAXAEAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<std::vector<std::string>&>(a0), std::forward<class BlockPos const&>(a1));
    }
    inline std::string const& getFilteredCustomName(class UIProfanityContext const& a0){
        std::string const& (BlockActor::*rv)(class UIProfanityContext const&);
        *((void**)&rv) = dlsym("?getFilteredCustomName@BlockActor@@UEAAAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBVUIProfanityContext@@@Z");
        return (this->*rv)(std::forward<class UIProfanityContext const&>(a0));
    }
    inline bool isCustomNameSaved(){
        bool (BlockActor::*rv)();
        *((void**)&rv) = dlsym("?isCustomNameSaved@BlockActor@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline bool isMovable(class BlockSource& a0){
        bool (BlockActor::*rv)(class BlockSource&);
        *((void**)&rv) = dlsym("?isMovable@BlockActor@@UEAA_NAEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0));
    }
    inline void load(class Level& a0, class CompoundTag const& a1, class DataLoadHelper& a2){
        void (BlockActor::*rv)(class Level&, class CompoundTag const&, class DataLoadHelper&);
        *((void**)&rv) = dlsym("?load@BlockActor@@UEAAXAEAVLevel@@AEBVCompoundTag@@AEAVDataLoadHelper@@@Z");
        return (this->*rv)(std::forward<class Level&>(a0), std::forward<class CompoundTag const&>(a1), std::forward<class DataLoadHelper&>(a2));
    }
    inline bool save(class CompoundTag& a0) const{
        bool (BlockActor::*rv)(class CompoundTag&) const;
        *((void**)&rv) = dlsym("?save@BlockActor@@UEBA_NAEAVCompoundTag@@@Z");
        return (this->*rv)(std::forward<class CompoundTag&>(a0));
    }
    inline bool saveItemInstanceData(class CompoundTag& a0){
        bool (BlockActor::*rv)(class CompoundTag&);
        *((void**)&rv) = dlsym("?saveItemInstanceData@BlockActor@@UEAA_NAEAVCompoundTag@@@Z");
        return (this->*rv)(std::forward<class CompoundTag&>(a0));
    }
    inline void setCustomName(std::string const& a0){
        void (BlockActor::*rv)(std::string const&);
        *((void**)&rv) = dlsym("?setCustomName@BlockActor@@UEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z");
        return (this->*rv)(std::forward<std::string const&>(a0));
    }
    inline void tick(class BlockSource& a0){
        void (BlockActor::*rv)(class BlockSource&);
        *((void**)&rv) = dlsym("?tick@BlockActor@@UEAAXAEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0));
    }
    */
    MCAPI void assignBlockIfNotAssigned(class BlockSource&);
    MCAPI class AABB const& getAABB() const;
    MCAPI class Block const* getBlock() const;
    MCAPI class BlockPos const& getPosition() const;
    MCAPI std::unique_ptr<class BlockActorDataPacket> getServerUpdatePacket(class BlockSource&);
    MCAPI enum BlockActorType const& getType() const;
    MCAPI bool const ignoreLighting() const;
    MCAPI bool isType(enum BlockActorType) const;
    MCAPI void moveTo(class BlockPos const&);
    MCAPI bool onUpdatePacket(class CompoundTag const&, class BlockSource&, class Player const*);
    MCAPI void setChanged();
    MCAPI void setCustomNameSaved(bool);
    MCAPI void setIgnoreLighting(bool);
    MCAPI void setMovable(bool);
    MCAPI static bool isType(class BlockActor&, enum BlockActorType);
    MCAPI static class std::shared_ptr<class BlockActor> loadStatic(class Level&, class CompoundTag const&, class DataLoadHelper&);

protected:
    MCAPI void _resetAABB();

private:
    MCAPI static class std::map<std::string, enum BlockActorType, struct std::less<std::string >, class std::allocator<struct std::pair<std::string const, enum BlockActorType> > > _createIdClassMap();
    MCAPI static class std::map<std::string, enum BlockActorType, struct std::less<std::string >, class std::allocator<struct std::pair<std::string const, enum BlockActorType> > > const mIdClassMap;
};