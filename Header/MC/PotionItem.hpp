// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "Item.hpp"
#include "Json.hpp"
#include "Potion.hpp"
#define EXTRA_INCLUDE_PART_POTIONITEM
#include "Extra/PotionItemAPI.hpp"
#undef EXTRA_INCLUDE_PART_POTIONITEM
class PotionItem : public Item {
#include "Extra/PotionItemAPI.hpp"
public:
    /*0*/ virtual ~PotionItem();
    /*1*/ virtual void tearDown();
    /*2*/ virtual int getMaxUseDuration(class ItemStack const*) const;
    /*3*/ virtual void __unk_vfn_0();
    /*4*/ virtual void __unk_vfn_1();
    /*5*/ virtual void executeEvent(class ItemStackBase&, std::string const&, class RenderParams&) const;
    /*6*/ virtual void __unk_vfn_2();
    /*7*/ virtual bool isArmor() const;
    /*8*/ virtual bool isBlockPlanterItem() const;
    /*9*/ virtual void __unk_vfn_3();
    /*10*/ virtual void __unk_vfn_4();
    /*11*/ virtual bool isDyeable() const;
    /*12*/ virtual bool isDye() const;
    /*13*/ virtual int /*enum enum ItemColor*/ getItemColor() const;
    /*14*/ virtual bool isFertilizer() const;
    /*15*/ virtual void __unk_vfn_5();
    /*16*/ virtual bool isThrowable() const;
    /*17*/ virtual bool isUseable() const;
    /*18*/ virtual class ItemComponent* getComponent(class HashedString const&) const;
    /*19*/ virtual class FuelItemComponent* getFuel() const;
    /*20*/ virtual void __unk_vfn_6();
    /*21*/ virtual bool canDestroySpecial(class Block const&) const;
    /*22*/ virtual int getLevelDataForAuxValue(int) const;
    /*23*/ virtual short getMaxDamage() const;
    /*24*/ virtual int getAttackDamage() const;
    /*25*/ virtual bool isGlint(class ItemStackBase const&) const;
    /*26*/ virtual void __unk_vfn_7();
    /*27*/ virtual void __unk_vfn_8();
    /*28*/ virtual void __unk_vfn_9();
    /*29*/ virtual bool isWearableThroughLootTable(class CompoundTag const*) const;
    /*30*/ virtual bool canDestroyInCreative() const;
    /*31*/ virtual bool isDestructive(int) const;
    /*32*/ virtual bool isLiquidClipItem(int) const;
    /*33*/ virtual bool shouldInteractionWithBlockBypassLiquid(class Block const&) const;
    /*34*/ virtual bool requiresInteract() const;
    /*35*/ virtual void appendFormattedHovertext(class ItemStackBase const&, class Level&, std::string&, bool) const;
    /*36*/ virtual bool isValidRepairItem(class ItemStackBase const&, class ItemStackBase const&, class BaseGameVersion const&) const;
    /*37*/ virtual int getEnchantSlot() const;
    /*38*/ virtual int getEnchantValue() const;
    /*39*/ virtual int getArmorValue() const;
    /*40*/ virtual void __unk_vfn_10();
    /*41*/ virtual bool isValidAuxValue(int) const;
    /*42*/ virtual void __unk_vfn_11();
    /*43*/ virtual void __unk_vfn_12();
    /*44*/ virtual void __unk_vfn_13();
    /*45*/ virtual void __unk_vfn_14();
    /*46*/ virtual class mce::Color getColor(class CompoundTag const*, class ItemDescriptor const&) const;
    /*47*/ virtual bool hasCustomColor(class CompoundTag const*) const;
    /*48*/ virtual void __unk_vfn_15();
    /*49*/ virtual void clearColor(class CompoundTag*) const;
    /*50*/ virtual void __unk_vfn_16();
    /*51*/ virtual void __unk_vfn_17();
    /*52*/ virtual void __unk_vfn_18();
    /*53*/ virtual void __unk_vfn_19();
    /*54*/ virtual void __unk_vfn_20();
    /*55*/ virtual void __unk_vfn_21();
    /*56*/ virtual bool canUseOnSimTick() const;
    /*57*/ virtual class ItemStack& use(class ItemStack&, class Player&) const;
    /*58*/ virtual int /*enum enum ItemUseMethod*/ useTimeDepleted(class ItemStack&, class Level*, class Player*) const;
    /*59*/ virtual float getDestroySpeed(class ItemStackBase const&, class Block const&) const;
    /*60*/ virtual void hitActor(class ItemStack&, class Actor&, class Mob&) const;
    /*61*/ virtual void hitBlock(class ItemStack&, class Block const&, class BlockPos const&, class Mob&) const;
    /*62*/ virtual bool mineBlock(class ItemInstance&, class Block const&, int, int, int, class Actor*) const;
    /*63*/ virtual bool mineBlock(class ItemStack&, class Block const&, int, int, int, class Actor*) const;
    /*64*/ virtual void __unk_vfn_22();
    /*65*/ virtual std::string buildDescriptionId(class ItemDescriptor const&, class CompoundTag const*) const;
    /*66*/ virtual std::string buildEffectDescriptionName(class ItemStackBase const&) const;
    /*67*/ virtual unsigned char getMaxStackSize(class ItemDescriptor const&) const;
    /*68*/ virtual bool inventoryTick(class ItemStack&, class Level&, class Actor&, int, bool) const;
    /*69*/ virtual void refreshedInContainer(class ItemStackBase const&, class Level&) const;
    /*70*/ virtual void fixupCommon(class ItemStackBase&, class Level&) const;
    /*71*/ virtual void __unk_vfn_23();
    /*72*/ virtual void __unk_vfn_24();
    /*73*/ virtual bool validFishInteraction(int) const;
    /*74*/ virtual std::string getInteractText(class Player const&) const;
    /*75*/ virtual int getAnimationFrameFor(class Mob*, bool, class ItemStack const*, bool) const;
    /*76*/ virtual struct TextureUVCoordinateSet const& getIcon(class ItemStackBase const&, int, bool) const;
    /*77*/ virtual int getIconYOffset() const;
    /*78*/ virtual class Item& setIcon(std::string const&, int);
    /*79*/ virtual bool canBeCharged() const;
    /*80*/ virtual void playSoundIncrementally(class ItemStack const&, class Mob&) const;
    /*81*/ virtual void __unk_vfn_25();
    /*82*/ virtual std::string getAuxValuesDescription() const;
    /*83*/ virtual bool _calculatePlacePos(class ItemStackBase&, class Actor&, unsigned char&, class BlockPos&) const;
    /*
    inline int \/*enum enum Potion::PotionType*\/ getPotionType() const{
        int \/*enum enum Potion::PotionType*\/ (PotionItem::*rv)() const;
        *((void**)&rv) = dlsym("?getPotionType@PotionItem@@UEBA?AW4PotionType@Potion@@XZ");
        return (this->*rv)();
    }
    inline bool uniqueAuxValues() const{
        bool (PotionItem::*rv)() const;
        *((void**)&rv) = dlsym("?uniqueAuxValues@PotionItem@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline void appendFormattedHovertext(class ItemStackBase const& a0, class Level& a1, std::string& a2, bool a3) const{
        void (PotionItem::*rv)(class ItemStackBase const&, class Level&, std::string&, bool) const;
        *((void**)&rv) = dlsym("?appendFormattedHovertext@PotionItem@@UEBAXAEBVItemStackBase@@AEAVLevel@@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z");
        return (this->*rv)(std::forward<class ItemStackBase const&>(a0), std::forward<class Level&>(a1), std::forward<std::string&>(a2), std::forward<bool>(a3));
    }
    inline std::string buildDescriptionId(class ItemDescriptor const& a0, class CompoundTag const* a1) const{
        std::string (PotionItem::*rv)(class ItemDescriptor const&, class CompoundTag const*) const;
        *((void**)&rv) = dlsym("?buildDescriptionId@PotionItem@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBVItemDescriptor@@PEBVCompoundTag@@@Z");
        return (this->*rv)(std::forward<class ItemDescriptor const&>(a0), std::forward<class CompoundTag const*>(a1));
    }
    inline std::string buildEffectDescriptionName(class ItemStackBase const& a0) const{
        std::string (PotionItem::*rv)(class ItemStackBase const&) const;
        *((void**)&rv) = dlsym("?buildEffectDescriptionName@PotionItem@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBVItemStackBase@@@Z");
        return (this->*rv)(std::forward<class ItemStackBase const&>(a0));
    }
    inline struct TextureUVCoordinateSet const& getIcon(class ItemStackBase const& a0, int a1, bool a2) const{
        struct TextureUVCoordinateSet const& (PotionItem::*rv)(class ItemStackBase const&, int, bool) const;
        *((void**)&rv) = dlsym("?getIcon@PotionItem@@UEBAAEBUTextureUVCoordinateSet@@AEBVItemStackBase@@H_N@Z");
        return (this->*rv)(std::forward<class ItemStackBase const&>(a0), std::forward<int>(a1), std::forward<bool>(a2));
    }
    inline bool isDestructive(int a0) const{
        bool (PotionItem::*rv)(int) const;
        *((void**)&rv) = dlsym("?isDestructive@PotionItem@@UEBA_NH@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline bool isGlint(class ItemStackBase const& a0) const{
        bool (PotionItem::*rv)(class ItemStackBase const&) const;
        *((void**)&rv) = dlsym("?isGlint@PotionItem@@MEBA_NAEBVItemStackBase@@@Z");
        return (this->*rv)(std::forward<class ItemStackBase const&>(a0));
    }
    inline bool isValidAuxValue(int a0) const{
        bool (PotionItem::*rv)(int) const;
        *((void**)&rv) = dlsym("?isValidAuxValue@PotionItem@@UEBA_NH@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline class Item& setIcon(std::string const& a0, int a1){
        class Item& (PotionItem::*rv)(std::string const&, int);
        *((void**)&rv) = dlsym("?setIcon@PotionItem@@UEAAAEAVItem@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z");
        return (this->*rv)(std::forward<std::string const&>(a0), std::forward<int>(a1));
    }
    inline class ItemStack& use(class ItemStack& a0, class Player& a1) const{
        class ItemStack& (PotionItem::*rv)(class ItemStack&, class Player&) const;
        *((void**)&rv) = dlsym("?use@PotionItem@@UEBAAEAVItemStack@@AEAV2@AEAVPlayer@@@Z");
        return (this->*rv)(std::forward<class ItemStack&>(a0), std::forward<class Player&>(a1));
    }
    inline int \/*enum enum ItemUseMethod*\/ useTimeDepleted(class ItemStack& a0, class Level* a1, class Player* a2) const{
        int \/*enum enum ItemUseMethod*\/ (PotionItem::*rv)(class ItemStack&, class Level*, class Player*) const;
        *((void**)&rv) = dlsym("?useTimeDepleted@PotionItem@@UEBA?AW4ItemUseMethod@@AEAVItemStack@@PEAVLevel@@PEAVPlayer@@@Z");
        return (this->*rv)(std::forward<class ItemStack&>(a0), std::forward<class Level*>(a1), std::forward<class Player*>(a2));
    }
    */
    MCAPI static void applyEffect(class ThrownPotion*, class ItemStack const&);
    MCAPI static bool isDestructivePotion(enum Potion::PotionVariant);

protected:

private:
};