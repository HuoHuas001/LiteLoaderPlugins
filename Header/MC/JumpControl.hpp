// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_JUMPCONTROL
#include "Extra/JumpControlAPI.hpp"
#undef EXTRA_INCLUDE_PART_JUMPCONTROL
class JumpControl {
#include "Extra/JumpControlAPI.hpp"
public:
    /*0*/ virtual ~JumpControl();
    /*1*/ virtual void __unk_vfn_0();
    /*2*/ virtual void tick(class JumpControlComponent&, class Mob&);
    /*3*/ virtual void __unk_vfn_1();
    /*4*/ virtual float getJumpPower(class JumpControlComponent const&, class Mob const&) const;
    /*
    inline int \/*enum enum JumpType*\/ getJumpType(class JumpControlComponent const& a0, class Mob const& a1) const{
        int \/*enum enum JumpType*\/ (JumpControl::*rv)(class JumpControlComponent const&, class Mob const&) const;
        *((void**)&rv) = dlsym("?getJumpType@JumpControl@@MEBA?AW4JumpType@@AEBVJumpControlComponent@@AEBVMob@@@Z");
        return (this->*rv)(std::forward<class JumpControlComponent const&>(a0), std::forward<class Mob const&>(a1));
    }
    inline int getJumpDelay(class JumpControlComponent const& a0, class Mob const& a1) const{
        int (JumpControl::*rv)(class JumpControlComponent const&, class Mob const&) const;
        *((void**)&rv) = dlsym("?getJumpDelay@JumpControl@@MEBAHAEBVJumpControlComponent@@AEBVMob@@@Z");
        return (this->*rv)(std::forward<class JumpControlComponent const&>(a0), std::forward<class Mob const&>(a1));
    }
    inline void setJumpType(class JumpControlComponent& a0, class Mob& a1, int \/*enum enum JumpType*\/ a2){
        void (JumpControl::*rv)(class JumpControlComponent&, class Mob&, int \/*enum enum JumpType*\/);
        *((void**)&rv) = dlsym("?setJumpType@JumpControl@@MEAAXAEAVJumpControlComponent@@AEAVMob@@W4JumpType@@@Z");
        return (this->*rv)(std::forward<class JumpControlComponent&>(a0), std::forward<class Mob&>(a1), std::forward<int \/*enum enum JumpType*\/>(a2));
    }
    inline void initializeInternal(class Mob& a0, struct JumpControlDescription* a1){
        void (JumpControl::*rv)(class Mob&, struct JumpControlDescription*);
        *((void**)&rv) = dlsym("?initializeInternal@JumpControl@@UEAAXAEAVMob@@PEAUJumpControlDescription@@@Z");
        return (this->*rv)(std::forward<class Mob&>(a0), std::forward<struct JumpControlDescription*>(a1));
    }
    inline void resetSpeedModifier(class JumpControlComponent const& a0, class Mob& a1){
        void (JumpControl::*rv)(class JumpControlComponent const&, class Mob&);
        *((void**)&rv) = dlsym("?resetSpeedModifier@JumpControl@@MEAAXAEBVJumpControlComponent@@AEAVMob@@@Z");
        return (this->*rv)(std::forward<class JumpControlComponent const&>(a0), std::forward<class Mob&>(a1));
    }
    inline float getJumpPower(class JumpControlComponent const& a0, class Mob const& a1) const{
        float (JumpControl::*rv)(class JumpControlComponent const&, class Mob const&) const;
        *((void**)&rv) = dlsym("?getJumpPower@JumpControl@@MEBAMAEBVJumpControlComponent@@AEBVMob@@@Z");
        return (this->*rv)(std::forward<class JumpControlComponent const&>(a0), std::forward<class Mob const&>(a1));
    }
    inline void tick(class JumpControlComponent& a0, class Mob& a1){
        void (JumpControl::*rv)(class JumpControlComponent&, class Mob&);
        *((void**)&rv) = dlsym("?tick@JumpControl@@MEAAXAEAVJumpControlComponent@@AEAVMob@@@Z");
        return (this->*rv)(std::forward<class JumpControlComponent&>(a0), std::forward<class Mob&>(a1));
    }
    */

protected:

private:
};