// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_MINECRAFTREPORTGAMELISTENER
#include "Extra/MinecraftReportGameListenerAPI.hpp"
#undef EXTRA_INCLUDE_PART_MINECRAFTREPORTGAMELISTENER
class MinecraftReportGameListener {
#include "Extra/MinecraftReportGameListenerAPI.hpp"
public:
    /*0*/ virtual ~MinecraftReportGameListener();
    /*1*/ virtual void onTestStructureLoaded(class gametest::BaseGameTestInstance&);
    /*2*/ virtual void onTestPassed(class gametest::BaseGameTestInstance&);
    /*3*/ virtual void onTestFailed(class gametest::BaseGameTestInstance&);
    /*
    inline void onTestFailed(class gametest::BaseGameTestInstance& a0){
        void (MinecraftReportGameListener::*rv)(class gametest::BaseGameTestInstance&);
        *((void**)&rv) = dlsym("?onTestFailed@MinecraftReportGameListener@@UEAAXAEAVBaseGameTestInstance@gametest@@@Z");
        return (this->*rv)(std::forward<class gametest::BaseGameTestInstance&>(a0));
    }
    inline void onTestPassed(class gametest::BaseGameTestInstance& a0){
        void (MinecraftReportGameListener::*rv)(class gametest::BaseGameTestInstance&);
        *((void**)&rv) = dlsym("?onTestPassed@MinecraftReportGameListener@@UEAAXAEAVBaseGameTestInstance@gametest@@@Z");
        return (this->*rv)(std::forward<class gametest::BaseGameTestInstance&>(a0));
    }
    inline void onTestStructureLoaded(class gametest::BaseGameTestInstance& a0){
        void (MinecraftReportGameListener::*rv)(class gametest::BaseGameTestInstance&);
        *((void**)&rv) = dlsym("?onTestStructureLoaded@MinecraftReportGameListener@@UEAAXAEAVBaseGameTestInstance@gametest@@@Z");
        return (this->*rv)(std::forward<class gametest::BaseGameTestInstance&>(a0));
    }
    */

protected:

private:
    MCAPI std::string _generateErrorDescription(struct gametest::GameTestError const&) const;
    MCAPI void _reportFailure(struct gametest::GameTestError const&, class BlockSource&);
    MCAPI void _reportPassed(std::string const&, class BlockSource&);
    MCAPI void _say(std::string const&, std::string const&);
    MCAPI void _spawnBeacon(class Block const&);
    MCAPI void _spawnLectern(std::string const&);
    MCAPI void _visualizeFailedTest(struct gametest::GameTestError const&, class BlockSource&);
};