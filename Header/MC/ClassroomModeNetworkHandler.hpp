// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_CLASSROOMMODENETWORKHANDLER
#include "Extra/ClassroomModeNetworkHandlerAPI.hpp"
#undef EXTRA_INCLUDE_PART_CLASSROOMMODENETWORKHANDLER
class ClassroomModeNetworkHandler {
#include "Extra/ClassroomModeNetworkHandlerAPI.hpp"
public:
    /*0*/ virtual void __unk_vfn_0();
    /*1*/ virtual ~ClassroomModeNetworkHandler();
    /*2*/ virtual void __unk_vfn_1();
    /*3*/ virtual void __unk_vfn_2();
    /*4*/ virtual void __unk_vfn_3();
    /*5*/ virtual void __unk_vfn_4();
    /*6*/ virtual void __unk_vfn_5();
    /*7*/ virtual void __unk_vfn_6();
    /*8*/ virtual void onWebsocketRequest(std::string const&, std::string const&, class std::function<void (void)>);
    /*
    inline bool allowIncomingPacketId(class NetworkIdentifier const& a0, int \/*enum enum MinecraftPacketIds*\/ a1){
        bool (ClassroomModeNetworkHandler::*rv)(class NetworkIdentifier const&, int \/*enum enum MinecraftPacketIds*\/);
        *((void**)&rv) = dlsym("?allowIncomingPacketId@ClassroomModeNetworkHandler@@UEAA_NAEBVNetworkIdentifier@@W4MinecraftPacketIds@@@Z");
        return (this->*rv)(std::forward<class NetworkIdentifier const&>(a0), std::forward<int \/*enum enum MinecraftPacketIds*\/>(a1));
    }
    inline void onWebsocketRequest(std::string const& a0, std::string const& a1, class std::function<void (void)> a2){
        void (ClassroomModeNetworkHandler::*rv)(std::string const&, std::string const&, class std::function<void (void)>);
        *((void**)&rv) = dlsym("?onWebsocketRequest@ClassroomModeNetworkHandler@@UEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0V?$function@$$A6AXXZ@3@@Z");
        return (this->*rv)(std::forward<std::string const&>(a0), std::forward<std::string const&>(a1), std::forward<class std::function<void (void)>>(a2));
    }
    */

protected:

private:
    MCAPI void _connect(std::string const&);
};