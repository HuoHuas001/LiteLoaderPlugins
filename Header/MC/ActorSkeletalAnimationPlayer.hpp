// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_ACTORSKELETALANIMATIONPLAYER
#include "Extra/ActorSkeletalAnimationPlayerAPI.hpp"
#undef EXTRA_INCLUDE_PART_ACTORSKELETALANIMATIONPLAYER
class ActorSkeletalAnimationPlayer {
#include "Extra/ActorSkeletalAnimationPlayerAPI.hpp"
public:
    /*0*/ virtual ~ActorSkeletalAnimationPlayer();
    /*1*/ virtual void __unk_vfn_0();
    /*2*/ virtual void resetAnimation();
    /*3*/ virtual void __unk_vfn_1();
    /*4*/ virtual void __unk_vfn_2();
    /*5*/ virtual void bindSoundEffects(class std::unordered_map<class HashedString, std::string, struct std::hash<class HashedString>, struct std::equal_to<class HashedString>, class std::allocator<struct std::pair<class HashedString const, std::string > > > const&);
    /*6*/ virtual void __unk_vfn_3();
    /*7*/ virtual void __unk_vfn_4();
    /*8*/ virtual void __unk_vfn_5();
    /*9*/ virtual class HashedString const& getRawName() const;
    /*
    inline int \/*enum enum ActorAnimationType*\/ getAnimationType() const{
        int \/*enum enum ActorAnimationType*\/ (ActorSkeletalAnimationPlayer::*rv)() const;
        *((void**)&rv) = dlsym("?getAnimationType@ActorSkeletalAnimationPlayer@@UEBA?AW4ActorAnimationType@@XZ");
        return (this->*rv)();
    }
    inline void buildBoneToPartMapping(class AnimationComponent& a0){
        void (ActorSkeletalAnimationPlayer::*rv)(class AnimationComponent&);
        *((void**)&rv) = dlsym("?buildBoneToPartMapping@ActorSkeletalAnimationPlayer@@UEAAXAEAVAnimationComponent@@@Z");
        return (this->*rv)(std::forward<class AnimationComponent&>(a0));
    }
    inline class std::shared_ptr<class ActorAnimationPlayer> findAnimation(class HashedString const& a0){
        class std::shared_ptr<class ActorAnimationPlayer> (ActorSkeletalAnimationPlayer::*rv)(class HashedString const&);
        *((void**)&rv) = dlsym("?findAnimation@ActorSkeletalAnimationPlayer@@UEAA?AV?$shared_ptr@VActorAnimationPlayer@@@std@@AEBVHashedString@@@Z");
        return (this->*rv)(std::forward<class HashedString const&>(a0));
    }
    inline void bindParticleEffects(class std::unordered_map<class HashedString, class HashedString, struct std::hash<class HashedString>, struct std::equal_to<class HashedString>, class std::allocator<struct std::pair<class HashedString const, class HashedString> > > const& a0){
        void (ActorSkeletalAnimationPlayer::*rv)(class std::unordered_map<class HashedString, class HashedString, struct std::hash<class HashedString>, struct std::equal_to<class HashedString>, class std::allocator<struct std::pair<class HashedString const, class HashedString> > > const&);
        *((void**)&rv) = dlsym("?bindParticleEffects@ActorSkeletalAnimationPlayer@@UEAAXAEBV?$unordered_map@VHashedString@@V1@U?$hash@VHashedString@@@std@@U?$equal_to@VHashedString@@@3@V?$allocator@U?$pair@$$CBVHashedString@@V1@@std@@@3@@std@@@Z");
        return (this->*rv)(std::forward<class std::unordered_map<class HashedString, class HashedString, struct std::hash<class HashedString>, struct std::equal_to<class HashedString>, class std::allocator<struct std::pair<class HashedString const, class HashedString> > > const&>(a0));
    }
    inline void bindSoundEffects(class std::unordered_map<class HashedString, std::string, struct std::hash<class HashedString>, struct std::equal_to<class HashedString>, class std::allocator<struct std::pair<class HashedString const, std::string > > > const& a0){
        void (ActorSkeletalAnimationPlayer::*rv)(class std::unordered_map<class HashedString, std::string, struct std::hash<class HashedString>, struct std::equal_to<class HashedString>, class std::allocator<struct std::pair<class HashedString const, std::string > > > const&);
        *((void**)&rv) = dlsym("?bindSoundEffects@ActorSkeletalAnimationPlayer@@UEAAXAEBV?$unordered_map@VHashedString@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$hash@VHashedString@@@3@U?$equal_to@VHashedString@@@3@V?$allocator@U?$pair@$$CBVHashedString@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@3@@std@@@Z");
        return (this->*rv)(std::forward<class std::unordered_map<class HashedString, std::string, struct std::hash<class HashedString>, struct std::equal_to<class HashedString>, class std::allocator<struct std::pair<class HashedString const, std::string > > > const&>(a0));
    }
    inline class HashedString const& getRawName() const{
        class HashedString const& (ActorSkeletalAnimationPlayer::*rv)() const;
        *((void**)&rv) = dlsym("?getRawName@ActorSkeletalAnimationPlayer@@UEBAAEBVHashedString@@XZ");
        return (this->*rv)();
    }
    inline bool hasAnimationFinished() const{
        bool (ActorSkeletalAnimationPlayer::*rv)() const;
        *((void**)&rv) = dlsym("?hasAnimationFinished@ActorSkeletalAnimationPlayer@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline void resetAnimation(){
        void (ActorSkeletalAnimationPlayer::*rv)();
        *((void**)&rv) = dlsym("?resetAnimation@ActorSkeletalAnimationPlayer@@UEAAXXZ");
        return (this->*rv)();
    }
    */

protected:

private:
};