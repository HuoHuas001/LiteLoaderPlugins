// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "Item.hpp"
#include "Json.hpp"
#define EXTRA_INCLUDE_PART_CHEMISTRYSTICKITEM
#include "Extra/ChemistryStickItemAPI.hpp"
#undef EXTRA_INCLUDE_PART_CHEMISTRYSTICKITEM
class ChemistryStickItem : public Item {
#include "Extra/ChemistryStickItemAPI.hpp"
public:
    /*0*/ virtual ~ChemistryStickItem();
    /*1*/ virtual void tearDown();
    /*2*/ virtual int getMaxUseDuration(class ItemStack const*) const;
    /*3*/ virtual void __unk_vfn_0();
    /*4*/ virtual void __unk_vfn_1();
    /*5*/ virtual void executeEvent(class ItemStackBase&, std::string const&, class RenderParams&) const;
    /*6*/ virtual void __unk_vfn_2();
    /*7*/ virtual bool isArmor() const;
    /*8*/ virtual bool isBlockPlanterItem() const;
    /*9*/ virtual void __unk_vfn_3();
    /*10*/ virtual void __unk_vfn_4();
    /*11*/ virtual bool isDyeable() const;
    /*12*/ virtual bool isDye() const;
    /*13*/ virtual int /*enum enum ItemColor*/ getItemColor() const;
    /*14*/ virtual bool isFertilizer() const;
    /*15*/ virtual void __unk_vfn_5();
    /*16*/ virtual bool isThrowable() const;
    /*17*/ virtual bool isUseable() const;
    /*18*/ virtual class ItemComponent* getComponent(class HashedString const&) const;
    /*19*/ virtual class FuelItemComponent* getFuel() const;
    /*20*/ virtual class Item& setMaxDamage(int);
    /*21*/ virtual void __unk_vfn_6();
    /*22*/ virtual bool canDestroySpecial(class Block const&) const;
    /*23*/ virtual int getLevelDataForAuxValue(int) const;
    /*24*/ virtual short getMaxDamage() const;
    /*25*/ virtual int getAttackDamage() const;
    /*26*/ virtual bool isGlint(class ItemStackBase const&) const;
    /*27*/ virtual void __unk_vfn_7();
    /*28*/ virtual void __unk_vfn_8();
    /*29*/ virtual void __unk_vfn_9();
    /*30*/ virtual bool isWearableThroughLootTable(class CompoundTag const*) const;
    /*31*/ virtual bool canDestroyInCreative() const;
    /*32*/ virtual bool isDestructive(int) const;
    /*33*/ virtual bool isLiquidClipItem(int) const;
    /*34*/ virtual bool shouldInteractionWithBlockBypassLiquid(class Block const&) const;
    /*35*/ virtual bool requiresInteract() const;
    /*36*/ virtual bool isValidRepairItem(class ItemStackBase const&, class ItemStackBase const&, class BaseGameVersion const&) const;
    /*37*/ virtual int getEnchantSlot() const;
    /*38*/ virtual int getEnchantValue() const;
    /*39*/ virtual int getArmorValue() const;
    /*40*/ virtual void __unk_vfn_10();
    /*41*/ virtual bool isValidAuxValue(int) const;
    /*42*/ virtual void __unk_vfn_11();
    /*43*/ virtual void __unk_vfn_12();
    /*44*/ virtual void __unk_vfn_13();
    /*45*/ virtual void __unk_vfn_14();
    /*46*/ virtual class mce::Color getColor(class CompoundTag const*, class ItemDescriptor const&) const;
    /*47*/ virtual bool hasCustomColor(class CompoundTag const*) const;
    /*48*/ virtual void __unk_vfn_15();
    /*49*/ virtual void clearColor(class CompoundTag*) const;
    /*50*/ virtual void __unk_vfn_16();
    /*51*/ virtual void __unk_vfn_17();
    /*52*/ virtual void __unk_vfn_18();
    /*53*/ virtual void __unk_vfn_19();
    /*54*/ virtual void __unk_vfn_20();
    /*55*/ virtual void __unk_vfn_21();
    /*56*/ virtual bool canUseOnSimTick() const;
    /*57*/ virtual class ItemStack& use(class ItemStack&, class Player&) const;
    /*58*/ virtual int /*enum enum ItemUseMethod*/ useTimeDepleted(class ItemStack&, class Level*, class Player*) const;
    /*59*/ virtual float getDestroySpeed(class ItemStackBase const&, class Block const&) const;
    /*60*/ virtual void hurtActor(class ItemStack&, class Actor&, class Mob&) const;
    /*61*/ virtual void hitActor(class ItemStack&, class Actor&, class Mob&) const;
    /*62*/ virtual void hitBlock(class ItemStack&, class Block const&, class BlockPos const&, class Mob&) const;
    /*63*/ virtual bool mineBlock(class ItemInstance&, class Block const&, int, int, int, class Actor*) const;
    /*64*/ virtual bool mineBlock(class ItemStack&, class Block const&, int, int, int, class Actor*) const;
    /*65*/ virtual void __unk_vfn_22();
    /*66*/ virtual unsigned char getMaxStackSize(class ItemDescriptor const&) const;
    /*67*/ virtual bool inventoryTick(class ItemStack&, class Level&, class Actor&, int, bool) const;
    /*68*/ virtual void refreshedInContainer(class ItemStackBase const&, class Level&) const;
    /*69*/ virtual void fixupCommon(class ItemStackBase&) const;
    /*70*/ virtual void fixupCommon(class ItemStackBase&, class Level&) const;
    /*71*/ virtual void __unk_vfn_23();
    /*72*/ virtual void __unk_vfn_24();
    /*73*/ virtual bool validFishInteraction(int) const;
    /*74*/ virtual std::string getInteractText(class Player const&) const;
    /*75*/ virtual int getAnimationFrameFor(class Mob*, bool, class ItemStack const*, bool) const;
    /*76*/ virtual int getIconYOffset() const;
    /*77*/ virtual bool canBeCharged() const;
    /*78*/ virtual void playSoundIncrementally(class ItemStack const&, class Mob&) const;
    /*79*/ virtual void __unk_vfn_25();
    /*80*/ virtual std::string getAuxValuesDescription() const;
    /*81*/ virtual bool _calculatePlacePos(class ItemStackBase&, class Actor&, unsigned char&, class BlockPos&) const;
    /*
    inline bool isValidRepairItem(class ItemStackBase const& a0, class ItemStackBase const& a1, class BaseGameVersion const& a2) const{
        bool (ChemistryStickItem::*rv)(class ItemStackBase const&, class ItemStackBase const&, class BaseGameVersion const&) const;
        *((void**)&rv) = dlsym("?isValidRepairItem@ChemistryStickItem@@UEBA_NAEBVItemStackBase@@0AEBVBaseGameVersion@@@Z");
        return (this->*rv)(std::forward<class ItemStackBase const&>(a0), std::forward<class ItemStackBase const&>(a1), std::forward<class BaseGameVersion const&>(a2));
    }
    inline void hurtActor(class ItemStack& a0, class Actor& a1, class Mob& a2) const{
        void (ChemistryStickItem::*rv)(class ItemStack&, class Actor&, class Mob&) const;
        *((void**)&rv) = dlsym("?hurtActor@ChemistryStickItem@@UEBAXAEAVItemStack@@AEAVActor@@AEAVMob@@@Z");
        return (this->*rv)(std::forward<class ItemStack&>(a0), std::forward<class Actor&>(a1), std::forward<class Mob&>(a2));
    }
    inline bool uniqueAuxValues() const{
        bool (ChemistryStickItem::*rv)() const;
        *((void**)&rv) = dlsym("?uniqueAuxValues@ChemistryStickItem@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool showsDurabilityInCreative() const{
        bool (ChemistryStickItem::*rv)() const;
        *((void**)&rv) = dlsym("?showsDurabilityInCreative@ChemistryStickItem@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool mineBlock(class ItemStack& a0, class Block const& a1, int a2, int a3, int a4, class Actor* a5) const{
        bool (ChemistryStickItem::*rv)(class ItemStack&, class Block const&, int, int, int, class Actor*) const;
        *((void**)&rv) = dlsym("?mineBlock@ChemistryStickItem@@UEBA_NAEAVItemStack@@AEBVBlock@@HHHPEAVActor@@@Z");
        return (this->*rv)(std::forward<class ItemStack&>(a0), std::forward<class Block const&>(a1), std::forward<int>(a2), std::forward<int>(a3), std::forward<int>(a4), std::forward<class Actor*>(a5));
    }
    inline void fixupCommon(class ItemStackBase& a0) const{
        void (ChemistryStickItem::*rv)(class ItemStackBase&) const;
        *((void**)&rv) = dlsym("?fixupCommon@ChemistryStickItem@@UEBAXAEAVItemStackBase@@@Z");
        return (this->*rv)(std::forward<class ItemStackBase&>(a0));
    }
    inline bool inventoryTick(class ItemStack& a0, class Level& a1, class Actor& a2, int a3, bool a4) const{
        bool (ChemistryStickItem::*rv)(class ItemStack&, class Level&, class Actor&, int, bool) const;
        *((void**)&rv) = dlsym("?inventoryTick@ChemistryStickItem@@UEBA_NAEAVItemStack@@AEAVLevel@@AEAVActor@@H_N@Z");
        return (this->*rv)(std::forward<class ItemStack&>(a0), std::forward<class Level&>(a1), std::forward<class Actor&>(a2), std::forward<int>(a3), std::forward<bool>(a4));
    }
    inline class Item& setMaxDamage(int a0){
        class Item& (ChemistryStickItem::*rv)(int);
        *((void**)&rv) = dlsym("?setMaxDamage@ChemistryStickItem@@UEAAAEAVItem@@H@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline class ItemStack& use(class ItemStack& a0, class Player& a1) const{
        class ItemStack& (ChemistryStickItem::*rv)(class ItemStack&, class Player&) const;
        *((void**)&rv) = dlsym("?use@ChemistryStickItem@@UEBAAEAVItemStack@@AEAV2@AEAVPlayer@@@Z");
        return (this->*rv)(std::forward<class ItemStack&>(a0), std::forward<class Player&>(a1));
    }
    inline int \/*enum enum ItemUseMethod*\/ useTimeDepleted(class ItemStack& a0, class Level* a1, class Player* a2) const{
        int \/*enum enum ItemUseMethod*\/ (ChemistryStickItem::*rv)(class ItemStack&, class Level*, class Player*) const;
        *((void**)&rv) = dlsym("?useTimeDepleted@ChemistryStickItem@@UEBA?AW4ItemUseMethod@@AEAVItemStack@@PEAVLevel@@PEAVPlayer@@@Z");
        return (this->*rv)(std::forward<class ItemStack&>(a0), std::forward<class Level*>(a1), std::forward<class Player*>(a2));
    }
    */
    MCAPI static enum ItemColor getColorType(int);
    MCAPI static bool isActive(int);
    MCAPI static bool isChemistryStick(class ItemStackBase const&);

protected:
    MCAPI std::string _getColorName(int) const;
    MCAPI bool _tick(class ItemStack&, unsigned __int64) const;

private:
    MCAPI void _storeActivationTimestamp(class ItemStack&, unsigned __int64, int) const;
    MCAPI static std::string const ACTIVATION_TIMESTAMP_TAG;
    MCAPI static int const ACTIVE_BIT;
    MCAPI static int const COLOR_BITS;
    MCAPI static int const COLOR_MASK;
    MCAPI static int const DAMAGE_BITS;
    MCAPI static int const DAMAGE_MASK;
    MCAPI static int const DAMAGE_START_BIT;
};