// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "Feature.hpp"
#define EXTRA_INCLUDE_PART_CORALCRUSTFEATURE
#include "Extra/CoralCrustFeatureAPI.hpp"
#undef EXTRA_INCLUDE_PART_CORALCRUSTFEATURE
class CoralCrustFeature : public Feature {
#include "Extra/CoralCrustFeatureAPI.hpp"
public:
    /*0*/ virtual ~CoralCrustFeature();
    /*1*/ virtual void __unk_vfn_0();
    /*2*/ virtual bool place(class BlockSource&, class BlockPos const&, class Random&) const;
    /*
    inline bool place(class BlockSource& a0, class BlockPos const& a1, class Random& a2) const{
        bool (CoralCrustFeature::*rv)(class BlockSource&, class BlockPos const&, class Random&) const;
        *((void**)&rv) = dlsym("?place@CoralCrustFeature@@UEBA_NAEAVBlockSource@@AEBVBlockPos@@AEAVRandom@@@Z");
        return (this->*rv)(std::forward<class BlockSource&>(a0), std::forward<class BlockPos const&>(a1), std::forward<class Random&>(a2));
    }
    */

protected:

private:
    MCAPI class BlockPos _getCropOffsetFromRot(int, int) const;
    MCAPI class BlockPos _getOffsetFromRot(int, int) const;
    MCAPI void _placeCoral(class BlockSource&, class BlockPos const&, class Random&, std::vector<class BlockPos>&, std::vector<struct std::pair<class BlockPos, unsigned char>>&, int) const;
    MCAPI void _placeCoralBase(class BlockSource&, class BlockPos const&, class Random&, class LegacyStructureTemplate&, class LegacyStructureSettings&) const;
    MCAPI void _placeSideDecorations(class BlockSource&, class BlockPos const&, class Random&, unsigned char) const;
};