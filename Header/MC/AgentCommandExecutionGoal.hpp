// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_AGENTCOMMANDEXECUTIONGOAL
#include "Extra/AgentCommandExecutionGoalAPI.hpp"
#undef EXTRA_INCLUDE_PART_AGENTCOMMANDEXECUTIONGOAL
class AgentCommandExecutionGoal {
#include "Extra/AgentCommandExecutionGoalAPI.hpp"
public:
    /*0*/ virtual ~AgentCommandExecutionGoal();
    /*1*/ virtual bool canUse();
    /*2*/ virtual void __unk_vfn_0();
    /*3*/ virtual void __unk_vfn_1();
    /*4*/ virtual void start();
    /*5*/ virtual void stop();
    /*6*/ virtual void __unk_vfn_2();
    /*7*/ virtual void appendDebugInfo(std::string&) const;
    /*
    inline bool canBeInterrupted(){
        bool (AgentCommandExecutionGoal::*rv)();
        *((void**)&rv) = dlsym("?canBeInterrupted@AgentCommandExecutionGoal@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline void appendDebugInfo(std::string& a0) const{
        void (AgentCommandExecutionGoal::*rv)(std::string&) const;
        *((void**)&rv) = dlsym("?appendDebugInfo@AgentCommandExecutionGoal@@UEBAXAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z");
        return (this->*rv)(std::forward<std::string&>(a0));
    }
    inline bool canUse(){
        bool (AgentCommandExecutionGoal::*rv)();
        *((void**)&rv) = dlsym("?canUse@AgentCommandExecutionGoal@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline void start(){
        void (AgentCommandExecutionGoal::*rv)();
        *((void**)&rv) = dlsym("?start@AgentCommandExecutionGoal@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void stop(){
        void (AgentCommandExecutionGoal::*rv)();
        *((void**)&rv) = dlsym("?stop@AgentCommandExecutionGoal@@UEAAXXZ");
        return (this->*rv)();
    }
    */

protected:

private:
};