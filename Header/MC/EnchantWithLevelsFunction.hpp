// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_ENCHANTWITHLEVELSFUNCTION
#include "Extra/EnchantWithLevelsFunctionAPI.hpp"
#undef EXTRA_INCLUDE_PART_ENCHANTWITHLEVELSFUNCTION
class EnchantWithLevelsFunction {
#include "Extra/EnchantWithLevelsFunctionAPI.hpp"
public:
    /*0*/ virtual ~EnchantWithLevelsFunction();
    /*
    inline int apply(class ItemInstance& a0, class Random& a1, struct Trade const& a2, class LootTableContext& a3){
        int (EnchantWithLevelsFunction::*rv)(class ItemInstance&, class Random&, struct Trade const&, class LootTableContext&);
        *((void**)&rv) = dlsym("?apply@EnchantWithLevelsFunction@@UEAAHAEAVItemInstance@@AEAVRandom@@AEBUTrade@@AEAVLootTableContext@@@Z");
        return (this->*rv)(std::forward<class ItemInstance&>(a0), std::forward<class Random&>(a1), std::forward<struct Trade const&>(a2), std::forward<class LootTableContext&>(a3));
    }
    inline int apply(class ItemStack& a0, class Random& a1, struct Trade const& a2, class LootTableContext& a3){
        int (EnchantWithLevelsFunction::*rv)(class ItemStack&, class Random&, struct Trade const&, class LootTableContext&);
        *((void**)&rv) = dlsym("?apply@EnchantWithLevelsFunction@@UEAAHAEAVItemStack@@AEAVRandom@@AEBUTrade@@AEAVLootTableContext@@@Z");
        return (this->*rv)(std::forward<class ItemStack&>(a0), std::forward<class Random&>(a1), std::forward<struct Trade const&>(a2), std::forward<class LootTableContext&>(a3));
    }
    inline void apply(class ItemInstance& a0, class Random& a1, class LootTableContext& a2){
        void (EnchantWithLevelsFunction::*rv)(class ItemInstance&, class Random&, class LootTableContext&);
        *((void**)&rv) = dlsym("?apply@EnchantWithLevelsFunction@@UEAAXAEAVItemInstance@@AEAVRandom@@AEAVLootTableContext@@@Z");
        return (this->*rv)(std::forward<class ItemInstance&>(a0), std::forward<class Random&>(a1), std::forward<class LootTableContext&>(a2));
    }
    inline void apply(class ItemStack& a0, class Random& a1, class LootTableContext& a2){
        void (EnchantWithLevelsFunction::*rv)(class ItemStack&, class Random&, class LootTableContext&);
        *((void**)&rv) = dlsym("?apply@EnchantWithLevelsFunction@@UEAAXAEAVItemStack@@AEAVRandom@@AEAVLootTableContext@@@Z");
        return (this->*rv)(std::forward<class ItemStack&>(a0), std::forward<class Random&>(a1), std::forward<class LootTableContext&>(a2));
    }
    */

protected:

private:
};