// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_DEFAULTDATALOADHELPER
#include "Extra/DefaultDataLoadHelperAPI.hpp"
#undef EXTRA_INCLUDE_PART_DEFAULTDATALOADHELPER
class DefaultDataLoadHelper {
#include "Extra/DefaultDataLoadHelperAPI.hpp"
public:
    /*0*/ virtual ~DefaultDataLoadHelper();
    /*
    inline bool shouldResetTime(){
        bool (DefaultDataLoadHelper::*rv)();
        *((void**)&rv) = dlsym("?shouldResetTime@DefaultDataLoadHelper@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline int \/*enum enum DataLoadHelperType*\/ getType() const{
        int \/*enum enum DataLoadHelperType*\/ (DefaultDataLoadHelper::*rv)() const;
        *((void**)&rv) = dlsym("?getType@DefaultDataLoadHelper@@UEBA?AW4DataLoadHelperType@@XZ");
        return (this->*rv)();
    }
    inline struct ActorUniqueID loadActorUniqueID(struct ActorUniqueID a0){
        struct ActorUniqueID (DefaultDataLoadHelper::*rv)(struct ActorUniqueID);
        *((void**)&rv) = dlsym("?loadActorUniqueID@DefaultDataLoadHelper@@UEAA?AUActorUniqueID@@U2@@Z");
        return (this->*rv)(std::forward<struct ActorUniqueID>(a0));
    }
    inline struct ActorUniqueID loadOwnerID(struct ActorUniqueID a0){
        struct ActorUniqueID (DefaultDataLoadHelper::*rv)(struct ActorUniqueID);
        *((void**)&rv) = dlsym("?loadOwnerID@DefaultDataLoadHelper@@UEAA?AUActorUniqueID@@U2@@Z");
        return (this->*rv)(std::forward<struct ActorUniqueID>(a0));
    }
    inline class BlockPos loadBlockPosition(class BlockPos const& a0){
        class BlockPos (DefaultDataLoadHelper::*rv)(class BlockPos const&);
        *((void**)&rv) = dlsym("?loadBlockPosition@DefaultDataLoadHelper@@UEAA?AVBlockPos@@AEBV2@@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0));
    }
    inline class Vec3 loadPosition(class Vec3 const& a0){
        class Vec3 (DefaultDataLoadHelper::*rv)(class Vec3 const&);
        *((void**)&rv) = dlsym("?loadPosition@DefaultDataLoadHelper@@UEAA?AVVec3@@AEBV2@@Z");
        return (this->*rv)(std::forward<class Vec3 const&>(a0));
    }
    inline class BlockPos loadBlockPositionOffset(class BlockPos const& a0){
        class BlockPos (DefaultDataLoadHelper::*rv)(class BlockPos const&);
        *((void**)&rv) = dlsym("?loadBlockPositionOffset@DefaultDataLoadHelper@@UEAA?AVBlockPos@@AEBV2@@Z");
        return (this->*rv)(std::forward<class BlockPos const&>(a0));
    }
    inline class Vec3 loadDirection(class Vec3 const& a0){
        class Vec3 (DefaultDataLoadHelper::*rv)(class Vec3 const&);
        *((void**)&rv) = dlsym("?loadDirection@DefaultDataLoadHelper@@UEAA?AVVec3@@AEBV2@@Z");
        return (this->*rv)(std::forward<class Vec3 const&>(a0));
    }
    inline int \/*enum enum Mirror*\/ loadMirror(int \/*enum enum Mirror*\/ a0){
        int \/*enum enum Mirror*\/ (DefaultDataLoadHelper::*rv)(int \/*enum enum Mirror*\/);
        *((void**)&rv) = dlsym("?loadMirror@DefaultDataLoadHelper@@UEAA?AW4Mirror@@W42@@Z");
        return (this->*rv)(std::forward<int \/*enum enum Mirror*\/>(a0));
    }
    inline int \/*enum enum Rotation*\/ loadRotation(int \/*enum enum Rotation*\/ a0){
        int \/*enum enum Rotation*\/ (DefaultDataLoadHelper::*rv)(int \/*enum enum Rotation*\/);
        *((void**)&rv) = dlsym("?loadRotation@DefaultDataLoadHelper@@UEAA?AW4Rotation@@W42@@Z");
        return (this->*rv)(std::forward<int \/*enum enum Rotation*\/>(a0));
    }
    inline int \/*enum enum Direction::Type*\/ loadDirection(int \/*enum enum Direction::Type*\/ a0){
        int \/*enum enum Direction::Type*\/ (DefaultDataLoadHelper::*rv)(int \/*enum enum Direction::Type*\/);
        *((void**)&rv) = dlsym("?loadDirection@DefaultDataLoadHelper@@UEAA?AW4Type@Direction@@W423@@Z");
        return (this->*rv)(std::forward<int \/*enum enum Direction::Type*\/>(a0));
    }
    inline unsigned char loadFacingID(unsigned char a0){
        unsigned char (DefaultDataLoadHelper::*rv)(unsigned char);
        *((void**)&rv) = dlsym("?loadFacingID@DefaultDataLoadHelper@@UEAAEE@Z");
        return (this->*rv)(std::forward<unsigned char>(a0));
    }
    inline float loadRotationRadiansX(float a0){
        float (DefaultDataLoadHelper::*rv)(float);
        *((void**)&rv) = dlsym("?loadRotationRadiansX@DefaultDataLoadHelper@@UEAAMM@Z");
        return (this->*rv)(std::forward<float>(a0));
    }
    inline float loadRotationDegreesX(float a0){
        float (DefaultDataLoadHelper::*rv)(float);
        *((void**)&rv) = dlsym("?loadRotationDegreesX@DefaultDataLoadHelper@@UEAAMM@Z");
        return (this->*rv)(std::forward<float>(a0));
    }
    inline float loadRotationRadiansY(float a0){
        float (DefaultDataLoadHelper::*rv)(float);
        *((void**)&rv) = dlsym("?loadRotationRadiansY@DefaultDataLoadHelper@@UEAAMM@Z");
        return (this->*rv)(std::forward<float>(a0));
    }
    inline float loadRotationDegreesY(float a0){
        float (DefaultDataLoadHelper::*rv)(float);
        *((void**)&rv) = dlsym("?loadRotationDegreesY@DefaultDataLoadHelper@@UEAAMM@Z");
        return (this->*rv)(std::forward<float>(a0));
    }
    */

protected:

private:
};