// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_JSONLOADER
#include "Extra/JsonLoaderAPI.hpp"
#undef EXTRA_INCLUDE_PART_JSONLOADER
class JsonLoader {
#include "Extra/JsonLoaderAPI.hpp"
public:
    /*0*/ virtual ~JsonLoader();
    /*1*/ virtual bool isBool() const;
    /*2*/ virtual bool isInt() const;
    /*3*/ virtual bool isString() const;
    /*4*/ virtual void __unk_vfn_0();
    /*5*/ virtual bool isArray() const;
    /*6*/ virtual bool doSerialize(bool&);
    /*7*/ virtual bool doSerialize(signed char&);
    /*8*/ virtual bool doSerialize(unsigned char&);
    /*9*/ virtual bool doSerialize(short&);
    /*10*/ virtual bool doSerialize(unsigned short&);
    /*11*/ virtual bool doSerialize(int&);
    /*12*/ virtual bool doSerialize(unsigned int&);
    /*13*/ virtual bool doSerialize(__int64&);
    /*14*/ virtual bool doSerialize(unsigned __int64&);
    /*15*/ virtual bool doSerialize(float&);
    /*16*/ virtual bool doSerialize(double&);
    /*17*/ virtual bool doSerialize(std::string&);
    /*18*/ virtual bool doBeginMember(char const*, bool);
    /*19*/ virtual bool doBeginMember(unsigned __int64, std::string&);
    /*20*/ virtual void __unk_vfn_1();
    /*21*/ virtual bool doBeginArray(unsigned __int64&);
    /*22*/ virtual bool doBeginArrayItem(unsigned __int64);
    /*23*/ virtual void __unk_vfn_2();
    /*24*/ virtual void __unk_vfn_3();
    /*25*/ virtual bool doBeginObject(unsigned __int64&);
    /*
    inline bool doEndObject(){
        bool (JsonLoader::*rv)();
        *((void**)&rv) = dlsym("?doEndObject@JsonLoader@@EEAA_NXZ");
        return (this->*rv)();
    }
    inline bool doEndArray(){
        bool (JsonLoader::*rv)();
        *((void**)&rv) = dlsym("?doEndArray@JsonLoader@@EEAA_NXZ");
        return (this->*rv)();
    }
    inline bool doBeginArray(unsigned __int64& a0){
        bool (JsonLoader::*rv)(unsigned __int64&);
        *((void**)&rv) = dlsym("?doBeginArray@JsonLoader@@EEAA_NAEA_K@Z");
        return (this->*rv)(std::forward<unsigned __int64&>(a0));
    }
    inline bool doBeginArrayItem(unsigned __int64 a0){
        bool (JsonLoader::*rv)(unsigned __int64);
        *((void**)&rv) = dlsym("?doBeginArrayItem@JsonLoader@@EEAA_N_K@Z");
        return (this->*rv)(std::forward<unsigned __int64>(a0));
    }
    inline bool doBeginMember(char const* a0, bool a1){
        bool (JsonLoader::*rv)(char const*, bool);
        *((void**)&rv) = dlsym("?doBeginMember@JsonLoader@@EEAA_NPEBD_N@Z");
        return (this->*rv)(std::forward<char const*>(a0), std::forward<bool>(a1));
    }
    inline bool doBeginMember(unsigned __int64 a0, std::string& a1){
        bool (JsonLoader::*rv)(unsigned __int64, std::string&);
        *((void**)&rv) = dlsym("?doBeginMember@JsonLoader@@EEAA_N_KAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z");
        return (this->*rv)(std::forward<unsigned __int64>(a0), std::forward<std::string&>(a1));
    }
    inline bool doBeginObject(unsigned __int64& a0){
        bool (JsonLoader::*rv)(unsigned __int64&);
        *((void**)&rv) = dlsym("?doBeginObject@JsonLoader@@EEAA_NAEA_K@Z");
        return (this->*rv)(std::forward<unsigned __int64&>(a0));
    }
    inline bool doBeginObject(){
        bool (JsonLoader::*rv)();
        *((void**)&rv) = dlsym("?doBeginObject@JsonLoader@@EEAA_NXZ");
        return (this->*rv)();
    }
    inline bool isObject() const{
        bool (JsonLoader::*rv)() const;
        *((void**)&rv) = dlsym("?isObject@JsonLoader@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool doEndArrayItem(){
        bool (JsonLoader::*rv)();
        *((void**)&rv) = dlsym("?doEndArrayItem@JsonLoader@@EEAA_NXZ");
        return (this->*rv)();
    }
    inline bool doEndMember(){
        bool (JsonLoader::*rv)();
        *((void**)&rv) = dlsym("?doEndMember@JsonLoader@@EEAA_NXZ");
        return (this->*rv)();
    }
    inline bool doSerialize(signed char& a0){
        bool (JsonLoader::*rv)(signed char&);
        *((void**)&rv) = dlsym("?doSerialize@JsonLoader@@EEAA_NAEAC@Z");
        return (this->*rv)(std::forward<signed char&>(a0));
    }
    inline bool doSerialize(unsigned char& a0){
        bool (JsonLoader::*rv)(unsigned char&);
        *((void**)&rv) = dlsym("?doSerialize@JsonLoader@@EEAA_NAEAE@Z");
        return (this->*rv)(std::forward<unsigned char&>(a0));
    }
    inline bool doSerialize(short& a0){
        bool (JsonLoader::*rv)(short&);
        *((void**)&rv) = dlsym("?doSerialize@JsonLoader@@EEAA_NAEAF@Z");
        return (this->*rv)(std::forward<short&>(a0));
    }
    inline bool doSerialize(unsigned short& a0){
        bool (JsonLoader::*rv)(unsigned short&);
        *((void**)&rv) = dlsym("?doSerialize@JsonLoader@@EEAA_NAEAG@Z");
        return (this->*rv)(std::forward<unsigned short&>(a0));
    }
    inline bool doSerialize(int& a0){
        bool (JsonLoader::*rv)(int&);
        *((void**)&rv) = dlsym("?doSerialize@JsonLoader@@EEAA_NAEAH@Z");
        return (this->*rv)(std::forward<int&>(a0));
    }
    inline bool doSerialize(unsigned int& a0){
        bool (JsonLoader::*rv)(unsigned int&);
        *((void**)&rv) = dlsym("?doSerialize@JsonLoader@@EEAA_NAEAI@Z");
        return (this->*rv)(std::forward<unsigned int&>(a0));
    }
    inline bool doSerialize(float& a0){
        bool (JsonLoader::*rv)(float&);
        *((void**)&rv) = dlsym("?doSerialize@JsonLoader@@EEAA_NAEAM@Z");
        return (this->*rv)(std::forward<float&>(a0));
    }
    inline bool doSerialize(double& a0){
        bool (JsonLoader::*rv)(double&);
        *((void**)&rv) = dlsym("?doSerialize@JsonLoader@@EEAA_NAEAN@Z");
        return (this->*rv)(std::forward<double&>(a0));
    }
    inline bool doSerialize(std::string& a0){
        bool (JsonLoader::*rv)(std::string&);
        *((void**)&rv) = dlsym("?doSerialize@JsonLoader@@EEAA_NAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z");
        return (this->*rv)(std::forward<std::string&>(a0));
    }
    inline bool doSerialize(__int64& a0){
        bool (JsonLoader::*rv)(__int64&);
        *((void**)&rv) = dlsym("?doSerialize@JsonLoader@@EEAA_NAEA_J@Z");
        return (this->*rv)(std::forward<__int64&>(a0));
    }
    inline bool doSerialize(unsigned __int64& a0){
        bool (JsonLoader::*rv)(unsigned __int64&);
        *((void**)&rv) = dlsym("?doSerialize@JsonLoader@@EEAA_NAEA_K@Z");
        return (this->*rv)(std::forward<unsigned __int64&>(a0));
    }
    inline bool doSerialize(bool& a0){
        bool (JsonLoader::*rv)(bool&);
        *((void**)&rv) = dlsym("?doSerialize@JsonLoader@@EEAA_NAEA_N@Z");
        return (this->*rv)(std::forward<bool&>(a0));
    }
    inline bool isArray() const{
        bool (JsonLoader::*rv)() const;
        *((void**)&rv) = dlsym("?isArray@JsonLoader@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isBool() const{
        bool (JsonLoader::*rv)() const;
        *((void**)&rv) = dlsym("?isBool@JsonLoader@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isInt() const{
        bool (JsonLoader::*rv)() const;
        *((void**)&rv) = dlsym("?isInt@JsonLoader@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isString() const{
        bool (JsonLoader::*rv)() const;
        *((void**)&rv) = dlsym("?isString@JsonLoader@@UEBA_NXZ");
        return (this->*rv)();
    }
    */

protected:

private:
    MCAPI void _loadJson(std::string const&);
    MCAPI void _useJson(class rapidjson::GenericValue<struct rapidjson::UTF8<char>, class rapidjson::MemoryPoolAllocator<class rapidjson::CrtAllocator> >&);
    MCAPI void _useJson(class rapidjson::GenericDocument<struct rapidjson::UTF8<char>, class rapidjson::MemoryPoolAllocator<class rapidjson::CrtAllocator>, class rapidjson::CrtAllocator>&);
};